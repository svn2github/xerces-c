/*
 * Copyright 2002,2004 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.30
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPERL
#define SWIG_CASTRANK_MODE

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "3"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Add in functionality missing in older versions of Perl. Much of this is based on Devel-PPPort on cpan. */

/* Add PERL_REVISION, PERL_VERSION, PERL_SUBVERSION if missing */
#ifndef PERL_REVISION
#  if !defined(__PATCHLEVEL_H_INCLUDED__) && !(defined(PATCHLEVEL) && defined(SUBVERSION))
#    define PERL_PATCHLEVEL_H_IMPLICIT
#    include <patchlevel.h>
#  endif
#  if !(defined(PERL_VERSION) || (defined(SUBVERSION) && defined(PATCHLEVEL)))
#    include <could_not_find_Perl_patchlevel.h>
#  endif
#  ifndef PERL_REVISION
#    define PERL_REVISION       (5)
#    define PERL_VERSION        PATCHLEVEL
#    define PERL_SUBVERSION     SUBVERSION
#  endif
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

#ifndef SvIOK_UV
# define SvIOK_UV(sv)       (SvIOK(sv) && (SvUVX(sv) == SvIVX(sv)))
#endif

#ifndef SvUOK
# define SvUOK(sv)           SvIOK_UV(sv)
#endif

#if ((PERL_VERSION < 4) || ((PERL_VERSION == 4) && (PERL_SUBVERSION <= 5)))
#  define PL_sv_undef               sv_undef
#  define PL_na	                    na
#  define PL_errgv                  errgv
#  define PL_sv_no                  sv_no
#  define PL_sv_yes                 sv_yes
#  define PL_markstack_ptr          markstack_ptr
#endif

#ifndef IVSIZE
#  ifdef LONGSIZE
#    define IVSIZE LONGSIZE
#  else
#    define IVSIZE 4 /* A bold guess, but the best we can make. */
#  endif
#endif

#ifndef INT2PTR
#  if (IVSIZE == PTRSIZE) && (UVSIZE == PTRSIZE)
#    define PTRV                  UV
#    define INT2PTR(any,d)        (any)(d)
#  else
#    if PTRSIZE == LONGSIZE
#      define PTRV                unsigned long
#    else
#      define PTRV                unsigned
#    endif
#    define INT2PTR(any,d)        (any)(PTRV)(d)
#  endif

#  define NUM2PTR(any,d)  (any)(PTRV)(d)
#  define PTR2IV(p)       INT2PTR(IV,p)
#  define PTR2UV(p)       INT2PTR(UV,p)
#  define PTR2NV(p)       NUM2PTR(NV,p)

#  if PTRSIZE == LONGSIZE
#    define PTR2ul(p)     (unsigned long)(p)
#  else
#    define PTR2ul(p)     INT2PTR(unsigned long,p)
#  endif
#endif /* !INT2PTR */

#ifndef get_sv
#  define get_sv perl_get_sv
#endif

#ifndef ERRSV
#  define ERRSV get_sv("@",FALSE)
#endif

#ifndef pTHX_
#define pTHX_
#endif   

#include <string.h>
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Perl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}




/* -----------------------------------------------------------------------------
 * perlrun.swg
 *
 * This file contains the runtime support for Perl modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef PERL_OBJECT
#define SWIG_PERL_OBJECT_DECL CPerlObj *SWIGUNUSEDPARM(pPerl),
#define SWIG_PERL_OBJECT_CALL pPerl,
#else
#define SWIG_PERL_OBJECT_DECL
#define SWIG_PERL_OBJECT_CALL
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pp, type, flags)           SWIG_Perl_ConvertPtr(SWIG_PERL_OBJECT_CALL obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)              SWIG_Perl_NewPointerObj(SWIG_PERL_OBJECT_CALL p, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, p, s, type)             SWIG_Perl_ConvertPacked(SWIG_PERL_OBJECT_CALL obj, p, s, type)
#define SWIG_NewPackedObj(p, s, type)	                SWIG_Perl_NewPackedObj(SWIG_PERL_OBJECT_CALL p, s, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Perl_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Perl_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Perl_ErrorType(code)               
#define SWIG_Error(code, msg)            		sv_setpvf(GvSV(PL_errgv),"%s %s\n", SWIG_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    

/* Perl-specific SWIG API */

#define SWIG_MakePtr(sv, ptr, type, flags)              SWIG_Perl_MakePtr(SWIG_PERL_OBJECT_CALL sv, ptr, type, flags)
#define SWIG_MakePackedObj(sv, p, s, type)	        SWIG_Perl_MakePackedObj(SWIG_PERL_OBJECT_CALL sv, p, s, type)
#define SWIG_SetError(str)                              SWIG_Error(SWIG_RuntimeError, str)


#define SWIG_PERL_DECL_ARGS_1(arg1)                     (SWIG_PERL_OBJECT_DECL arg1)
#define SWIG_PERL_CALL_ARGS_1(arg1)                     (SWIG_PERL_OBJECT_CALL arg1)
#define SWIG_PERL_DECL_ARGS_2(arg1, arg2)               (SWIG_PERL_OBJECT_DECL arg1, arg2)
#define SWIG_PERL_CALL_ARGS_2(arg1, arg2)               (SWIG_PERL_OBJECT_CALL arg1, arg2)

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_OWNER   SWIG_POINTER_OWN
#define SWIG_SHADOW  SWIG_OWNER << 1

#define SWIG_MAYBE_PERL_OBJECT SWIG_PERL_OBJECT_DECL

/* SWIG Perl macros */

/* Macro to call an XS function */
#ifdef PERL_OBJECT 
#  define SWIG_CALLXS(_name) _name(cv,pPerl) 
#else 
#  ifndef MULTIPLICITY 
#    define SWIG_CALLXS(_name) _name(cv) 
#  else 
#    define SWIG_CALLXS(_name) _name(PERL_GET_THX, cv) 
#  endif 
#endif 

/* Note: SwigMagicFuncHack is a typedef used to get the C++ compiler to just shut up already */

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;
typedef int (CPerlObj::*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (CPerlObj::*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
#define SWIGCLASS_STATIC
#else
#define MAGIC_PPERL
#define SWIGCLASS_STATIC static SWIGUNUSED
#ifndef MULTIPLICITY
#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif


#else
#define SWIG_MAGIC(a,b) (struct interpreter *interp, SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#endif
#endif

/* Workaround for bug in perl 5.6.x croak and earlier */
#if (PERL_VERSION < 8)
#  ifdef PERL_OBJECT
#    define SWIG_croak_null() SWIG_Perl_croak_null(pPerl)
static void SWIG_Perl_croak_null(CPerlObj *pPerl)
#  else
static void SWIG_croak_null()
#  endif
{
  SV *err=ERRSV;
#  if (PERL_VERSION < 6)
  croak("%_", err);
#  else
  if (SvOK(err) && !SvROK(err)) croak("%_", err);
  croak(Nullch);
#  endif
}
#else
#  define SWIG_croak_null() croak(Nullch)
#endif


/* 
   Define how strict is the cast between strings an integers/doubles
   when overloading between these types occurs.
   
   The default is making it as strict as possible by using SWIG_AddCast
   when needed.
   
   You can use -DSWIG_PERL_NO_STRICT_STR2NUM at compilation time to
   disable the SWIG_AddCast, making the casting between string and
   numbers less strict.

   In the end, we try to solve the overloading between strings and
   numerical types in the more natural way, but if you can avoid it,
   well, avoid it using %rename, for example.
*/
#ifndef SWIG_PERL_NO_STRICT_STR2NUM
# ifndef SWIG_PERL_STRICT_STR2NUM
#  define SWIG_PERL_STRICT_STR2NUM
# endif
#endif
#ifdef SWIG_PERL_STRICT_STR2NUM
/* string takes precedence */
#define SWIG_Str2NumCast(x) SWIG_AddCast(x)  
#else
/* number takes precedence */
#define SWIG_Str2NumCast(x) x
#endif



#include <stdlib.h>

SWIGRUNTIME const char *
SWIG_Perl_TypeProxyName(const swig_type_info *type) {
  if (!type) return NULL;
  if (type->clientdata != NULL) {
    return (const char*) type->clientdata;
  } 
  else {
    return type->name;
  }
}

SWIGRUNTIME swig_cast_info *
SWIG_TypeProxyCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(( (!iter->type->clientdata && (strcmp((char*)iter->type->name, c) == 0)) 
			    || (iter->type->clientdata && (strcmp((char*)iter->type->clientdata, c) == 0))), ty);
}


/* Function for getting a pointer value */

SWIGRUNTIME int
SWIG_Perl_ConvertPtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags) {
  swig_cast_info *tc;
  void *voidptr = (void *)0;
  SV *tsv = 0;
  /* If magical, apply more magic */
  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    IV tmp = 0;
    tsv = (SV*) SvRV(sv);
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
        mg = mg_find(tsv,'P');
        if (mg) {
          sv = mg->mg_obj;
          if (sv_isobject(sv)) {
	    tsv = (SV*)SvRV(sv);
            tmp = SvIV(tsv);
          }
        }
      } else {
        return SWIG_ERROR;
      }
    } else {
      tmp = SvIV(tsv);
    }
    voidptr = INT2PTR(void *,tmp);
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return SWIG_OK;
  } else if (SvTYPE(sv) == SVt_RV) {  /* Check for NULL pointer */
    if (!SvROK(sv)) {
      *(ptr) = (void *) 0;
      return SWIG_OK;
    } else {
      return SWIG_ERROR;
    }
  } else {                            /* Don't know what it is */
    return SWIG_ERROR;
  }
  if (_t) {
    /* Now see if the types match */
    char *_c = HvNAME(SvSTASH(SvRV(sv)));
    tc = SWIG_TypeProxyCheck(_c,_t);
    if (!tc) {
      return SWIG_ERROR;
    }
    *ptr = SWIG_TypeCast(tc,voidptr);
  } else {
    *ptr = voidptr;
  }

  /* 
   *  DISOWN implementation: we need a perl guru to check this one.
   */
  if (tsv && (flags & SWIG_POINTER_DISOWN)) {
    /* 
     *  almost copy paste code from below SWIG_POINTER_OWN setting
     */
    SV *obj = sv;
    HV *stash = SvSTASH(SvRV(obj));
    GV *gv = *(GV**) hv_fetch(stash, "OWNER", 5, TRUE);
    if (isGV(gv)) {
      HV *hv = GvHVn(gv);
      /*
       * To set ownership (see below), a newSViv(1) entry is added. 
       * Hence, to remove ownership, we delete the entry.
       */
      if (hv_exists_ent(hv, obj, 0)) {
	hv_delete_ent(hv, obj, 0, 0);
      }
    }
  }
  return SWIG_OK;
}

SWIGRUNTIME void
SWIG_Perl_MakePtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, swig_type_info *t, int flags) {
  if (ptr && (flags & SWIG_SHADOW)) {
    SV *self;
    SV *obj=newSV(0);
    HV *hash=newHV();
    HV *stash;
    sv_setref_pv(obj, (char *) SWIG_Perl_TypeProxyName(t), ptr);
    stash=SvSTASH(SvRV(obj));
    if (flags & SWIG_POINTER_OWN) {
      HV *hv;
      GV *gv=*(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
      if (!isGV(gv))
        gv_init(gv, stash, "OWNER", 5, FALSE);
      hv=GvHVn(gv);
      hv_store_ent(hv, obj, newSViv(1), 0);
    }
    sv_magic((SV *)hash, (SV *)obj, 'P', Nullch, 0);
    SvREFCNT_dec(obj);
    self=newRV_noinc((SV *)hash);
    sv_setsv(sv, self);
    SvREFCNT_dec((SV *)self);
    sv_bless(sv, stash);
  }
  else {
    sv_setref_pv(sv, (char *) SWIG_Perl_TypeProxyName(t), ptr);
  }
}

SWIGRUNTIMEINLINE SV *
SWIG_Perl_NewPointerObj(SWIG_MAYBE_PERL_OBJECT void *ptr, swig_type_info *t, int flags) {
  SV *result = sv_newmortal();
  SWIG_MakePtr(result, ptr, t, flags);
  return result;
}

SWIGRUNTIME void
SWIG_Perl_MakePackedObj(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(SWIG_Perl_TypeProxyName(type))) > 1000) return;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,SWIG_Perl_TypeProxyName(type));
  sv_setpv(sv, result);
}

SWIGRUNTIME SV *
SWIG_Perl_NewPackedObj(SWIG_MAYBE_PERL_OBJECT void *ptr, int sz, swig_type_info *type) {
  SV *result = sv_newmortal();
  SWIG_Perl_MakePackedObj(result, ptr, sz, type);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Perl_ConvertPacked(SWIG_MAYBE_PERL_OBJECT SV *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c = 0;

  if ((!obj) || (!SvOK(obj))) return SWIG_ERROR;
  c = SvPV(obj, PL_na);
  /* Pointer values must start with leading underscore */
  if (*c != '_') return SWIG_ERROR;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) return SWIG_ERROR;
  }
  return SWIG_OK;
}


/* Macros for low-level exception handling */
#define SWIG_croak(x)    { SWIG_Error(SWIG_RuntimeError, x); SWIG_fail; }


typedef XS(SwigPerlWrapper);
typedef SwigPerlWrapper *SwigPerlWrapperPtr;

/* Structure for command table */
typedef struct {
  const char         *name;
  SwigPerlWrapperPtr  wrapper;
} swig_command_info;

/* Information for constant table */

#define SWIG_INT     1
#define SWIG_FLOAT   2
#define SWIG_STRING  3
#define SWIG_POINTER 4
#define SWIG_BINARY  5

/* Constant information structure */
typedef struct swig_constant_info {
    int              type;
    const char      *name;
    long             lvalue;
    double           dvalue;
    void            *pvalue;
    swig_type_info **ptype;
} swig_constant_info;


/* Structure for variable table */
typedef struct {
  const char   *name;
  SwigMagicFunc   set;
  SwigMagicFunc   get;
  swig_type_info  **type;
} swig_variable_info;

/* Magic variable code */
#ifndef PERL_OBJECT
#define swig_create_magic(s,a,b,c) _swig_create_magic(s,a,b,c)
  #ifndef MULTIPLICITY
     SWIGRUNTIME void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int (*get)(SV *,MAGIC *)) 
  #else
     SWIGRUNTIME void _swig_create_magic(SV *sv, char *name, int (*set)(struct interpreter*, SV *, MAGIC *), int (*get)(struct interpreter*, SV *,MAGIC *)) 
  #endif
#else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
SWIGRUNTIME void _swig_create_magic(CPerlObj *pPerl, SV *sv, const char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) 
#endif
{
  MAGIC *mg;
  sv_magic(sv,sv,'U',(char *) name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = (SwigMagicFuncHack) get;
  mg->mg_virtual->svt_set = (SwigMagicFuncHack) set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}


SWIGRUNTIME swig_module_info *
SWIG_Perl_GetModule(void) {
  static void *type_pointer = (void *)0;
  SV *pointer;

  /* first check if pointer already created */
  if (!type_pointer) {
    pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, FALSE);
    if (pointer && SvOK(pointer)) {
      type_pointer = INT2PTR(swig_type_info **, SvIV(pointer));
    }
  }

  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Perl_SetModule(swig_module_info *module) {
  SV *pointer;

  /* create a new pointer */
  pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TRUE);
  sv_setiv(pointer, PTR2IV(module));
}

#ifdef __cplusplus
}
#endif

/* Workaround perl5 global namespace pollution. Note that undefining library
 * functions like fopen will not solve the problem on all platforms as fopen
 * might be a macro on Windows but not necessarily on other operating systems. */
#ifdef do_open
  #undef do_open
#endif
#ifdef do_close
  #undef do_close
#endif
#ifdef scalar
  #undef scalar
#endif
#ifdef list
  #undef list
#endif
#ifdef apply
  #undef apply
#endif
#ifdef convert
  #undef convert
#endif
#ifdef Error
  #undef Error
#endif
#ifdef form
  #undef form
#endif
#ifdef vform
  #undef vform
#endif
#ifdef LABEL
  #undef LABEL
#endif
#ifdef METHOD
  #undef METHOD
#endif
#ifdef Move
  #undef Move
#endif
#ifdef yylex
  #undef yylex
#endif
#ifdef yyparse
  #undef yyparse
#endif
#ifdef yyerror
  #undef yyerror
#endif
#ifdef invert
  #undef invert
#endif
#ifdef ref
  #undef ref
#endif
#ifdef read
  #undef read
#endif
#ifdef write
  #undef write
#endif
#ifdef eof
  #undef eof
#endif
#ifdef bool
  #undef bool
#endif
#ifdef close
  #undef close
#endif
#ifdef rewind
  #undef rewind
#endif
#ifdef free
  #undef free
#endif
#ifdef malloc
  #undef malloc
#endif
#ifdef calloc
  #undef calloc
#endif
#ifdef Stat
  #undef Stat
#endif
#ifdef check
  #undef check
#endif
#ifdef seekdir
  #undef seekdir
#endif
#ifdef open
  #undef open
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_DatatypeValidatorFactory swig_types[0]
#define SWIGTYPE_p_IdentityConstraint swig_types[1]
#define SWIGTYPE_p_PSVIDefs__PSVIScope swig_types[2]
#define SWIGTYPE_p_PSVIUni swig_types[3]
#define SWIGTYPE_p_PanicHandler swig_types[4]
#define SWIGTYPE_p_RefHash2KeysTableOfTValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t_t swig_types[5]
#define SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__ComplexTypeInfo_t swig_types[6]
#define SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XMLAttDef_t swig_types[7]
#define SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XSAnnotation_t swig_types[8]
#define SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesAttGroupInfo_t swig_types[9]
#define SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesGroupInfo_t swig_types[10]
#define SWIGTYPE_p_ValidationContext swig_types[11]
#define SWIGTYPE_p_ValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t swig_types[12]
#define SWIGTYPE_p_ValueVectorOfTunsigned_int_t swig_types[13]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t swig_types[14]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t swig_types[15]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__BinInputStream swig_types[16]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__ComplexTypeInfo swig_types[17]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentSpecNode swig_types[18]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef swig_types[19]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList swig_types[20]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl swig_types[21]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl swig_types[22]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar swig_types[23]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator swig_types[24]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator swig_types[25]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__EntityResolver swig_types[26]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler swig_types[27]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar swig_types[28]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__GrammarResolver swig_types[29]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator swig_types[30]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager swig_types[31]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t swig_types[32]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t swig_types[33]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__XMLNotationDecl_t swig_types[34]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t swig_types[35]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t swig_types[36]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__NamespaceScope swig_types[37]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttribute swig_types[38]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttributeList swig_types[39]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement swig_types[40]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIHandler swig_types[41]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIItem swig_types[42]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlCallbackHandler swig_types[43]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandler swig_types[44]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler swig_types[45]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName swig_types[46]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t swig_types[47]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t swig_types[48]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t swig_types[49]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t swig_types[50]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException swig_types[51]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException swig_types[52]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotSupportedException swig_types[53]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException swig_types[54]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef swig_types[55]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList swig_types[56]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl swig_types[57]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar swig_types[58]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaSymbols swig_types[59]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator swig_types[60]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__SecurityManager swig_types[61]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef swig_types[62]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList swig_types[63]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr swig_types[64]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLContentModel swig_types[65]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDTDDescription swig_types[66]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDeleter swig_types[67]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler swig_types[68]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl swig_types[69]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl swig_types[70]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityResolver swig_types[71]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t swig_types[72]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t swig_types[73]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t swig_types[74]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException swig_types[75]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLExcepts swig_types[76]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription swig_types[77]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl swig_types[78]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken swig_types[79]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPlatformUtils swig_types[80]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier swig_types[81]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription swig_types[82]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL swig_types[83]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUni swig_types[84]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri swig_types[85]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator swig_types[86]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMemory swig_types[87]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSAnnotation swig_types[88]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSAttributeDeclaration swig_types[89]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSElementDeclaration swig_types[90]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSModel swig_types[91]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSNotationDeclaration swig_types[92]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition swig_types[93]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSTypeDefinition swig_types[94]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSValue swig_types[95]
#define SWIGTYPE_p_XMLBuffer swig_types[96]
#define SWIGTYPE_p_XMLErrorReporter swig_types[97]
#define SWIGTYPE_p_XMLErrorReporter__ErrTypes swig_types[98]
#define SWIGTYPE_p_XSerializable swig_types[99]
#define SWIGTYPE_p_XSerializeEngine swig_types[100]
#define SWIGTYPE_p_char swig_types[101]
#define SWIGTYPE_p_int swig_types[102]
#define SWIGTYPE_p_int32_t swig_types[103]
#define SWIGTYPE_p_p_void swig_types[104]
#define SWIGTYPE_p_size_t swig_types[105]
#define SWIGTYPE_p_ssize_t swig_types[106]
#define SWIGTYPE_p_uint16_t swig_types[107]
#define SWIGTYPE_p_uint32_t swig_types[108]
#define SWIGTYPE_p_unsigned_char swig_types[109]
static swig_type_info *swig_types[111];
static swig_module_info swig_module = {swig_types, 110, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    boot_XML__Xerces

#define SWIG_name   "XML::Xercesc::boot_XML__Xerces"
#define SWIG_prefix "XML::Xercesc::"

#define SWIGVERSION 0x010330 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
#ifndef MULTIPLICITY
SWIGEXPORT void SWIG_init (CV* cv);
#else
SWIGEXPORT void SWIG_init (pTHXo_ CV* cv);
#endif
#else
SWIGEXPORT void SWIG_init (CV *cv, CPerlObj *);
#endif


#include "xercesc/sax/SAXException.hpp"
#include "xercesc/sax/SAXParseException.hpp"
#include "xercesc/sax/EntityResolver.hpp"

#include "xercesc/util/PlatformUtils.hpp"
#include "xercesc/util/XMLString.hpp"
#include "xercesc/util/XMLUri.hpp"
#include "xercesc/util/QName.hpp"
#include "xercesc/util/HexBin.hpp"
#include "xercesc/util/Base64.hpp"
#include "xercesc/util/NameIdPool.hpp"
#include "xercesc/util/XMLEnumerator.hpp"
#include "xercesc/util/SecurityManager.hpp"
#include "xercesc/util/XMLException.hpp"
#include "xercesc/util/XMLEntityResolver.hpp"

#include "xercesc/framework/XMLValidator.hpp"
#include "xercesc/framework/XMLDocumentHandler.hpp"
#include "xercesc/framework/XMLPScanToken.hpp"

#include "xercesc/framework/psvi/PSVIHandler.hpp"
#include "xercesc/framework/psvi/PSVIItem.hpp"
#include "xercesc/framework/psvi/PSVIElement.hpp"
#include "xercesc/framework/psvi/PSVIAttribute.hpp"
#include "xercesc/framework/psvi/PSVIAttributeList.hpp"

#include "xercesc/framework/XMLGrammarDescription.hpp"
#include "xercesc/framework/XMLDTDDescription.hpp"
#include "xercesc/framework/XMLSchemaDescription.hpp"

#include "xercesc/validators/common/Grammar.hpp"
#include "xercesc/validators/DTD/DTDAttDef.hpp"
#include "xercesc/validators/DTD/DTDAttDefList.hpp"
#include "xercesc/validators/DTD/DTDGrammar.hpp"
#include "xercesc/validators/DTD/DTDValidator.hpp"
#include "xercesc/validators/schema/SchemaGrammar.hpp"
#include "xercesc/validators/schema/SchemaValidator.hpp"
#include "xercesc/validators/schema/SchemaAttDefList.hpp"
#include "xercesc/validators/schema/SchemaAttDef.hpp"

#include "PSVIWriter/PSVIUni.hpp"



#define SWIG_SetErrorf SWIG_Perl_SetErrorf

static void
SWIG_Perl_SetErrorf(const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  sv_vsetpvfn(perl_get_sv("@", TRUE), fmt, strlen(fmt), &args, Null(SV**), 0, Null(bool*));
  va_end(args);
}

SWIGRUNTIMEINLINE void
SWIG_Perl_NullRef(const char *type, int argnum, const char *symname)
{
  if (type) {
    SWIG_Perl_SetErrorf("null reference of type: '%s' was received as argumnent: %d of %s",type,argnum,symname);
  } else {
    SWIG_Perl_SetErrorf("null reference was received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Perl_NullRef(const char *type, const char *argname, const char *symname)
{
  if (type) {
    SWIG_Perl_SetErrorf("null reference of type: '%s' was received as argumnent: %s of %s",type,argname,symname);
  } else {
    SWIG_Perl_SetErrorf("null reference was received");
  }
}

SWIGRUNTIME void
SWIG_Perl_TypeError(const char *type, int argnum, const char *symname)
{
  if (type) {
    SWIG_Perl_SetErrorf("Type error in argument %d of %s. Expected %s", argnum, symname, type);
  } else {
    SWIG_Perl_SetErrorf("Type error in argument $argnum of $symname", argnum, symname);
  }
}






#include "Transcoder.hpp"
#include "XMLExceptionHandler.hpp"

#include "PerlCallbackHandler.hpp"
#include "PerlErrorCallbackHandler.hpp"
#include "PerlDOMCallbackHandler.hpp"
#include "PerlEntityResolverHandler.hpp"




// we initialize the static UTF-8 transcoding info
// these are used by the typemaps to convert between
// Xerces internal UTF-16 and the scripting language format
static Transcoder* UTF8_TRANSCODER  = NULL;




static XMLExceptionHandler* XML_EXCEPTION_HANDLER  = NULL;

void
makeXMLException(const XMLException& e){
    SV *error = ERRSV;
    SWIG_MakePtr(error, (void *) XML_EXCEPTION_HANDLER->copyXMLException(e), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException, SWIG_SHADOW|0);
}

/*
 * The generic exception handler
 *    'goto fail' must be called - either explicitly, or via SWIG_croak()
 *    to ensure that any variable cleanup is done - to avoid memory leaks.
 *    By making these macros, it reduces the code *file* size dramatically
 *    (but doesn't reduce the compiled file size at all...)
 */

#define CATCH_XML_EXCEPTION         \
    catch (const XMLException& e)   \
    {                               \
        makeXMLException(e);        \
	goto fail;                  \
    }                               \
    catch (...)                     \
    {                               \
        SWIG_croak("Handling Unknown exception"); \
        goto fail;                  \
    }



static swig_type_info *
Grammar_dynamic_cast(void **ptr) {
   Grammar **nptr = (Grammar **) ptr;
   if (*nptr == NULL) {
       return NULL;
   }
   short int type = (*nptr)->getGrammarType();
   if (type == Grammar::DTDGrammarType) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar;
   }
   if (type == Grammar::SchemaGrammarType) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar;
   }
   return NULL;
}


static swig_type_info *
XMLGrammarDescription_dynamic_cast(void **ptr) {
   XMLGrammarDescription **nptr = (XMLGrammarDescription **) ptr;
   if (*nptr == NULL) {
       return NULL;
   }
   short int type = (*nptr)->getGrammarType();
   if (type == Grammar::DTDGrammarType) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDTDDescription;
   }
   if (type == Grammar::SchemaGrammarType) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription;
   }
   return NULL;
}



XERCES_CPP_NAMESPACE_USE



SWIGINTERNINLINE SV *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  SV *obj = sv_newmortal();
  if (carray) {
    if (size && (carray[size - 1] == 0)) {
      sv_setpv(obj, carray);
    } else {
      char *tmp = (new char[size + 1]);
      memcpy(tmp, carray, size);
      tmp[size] = 0;
      sv_setpv(obj, tmp);
      delete[] tmp;
    }
  } else {
    sv_setsv(obj, &PL_sv_undef);
  }
  return obj;
}


SWIGINTERNINLINE SV * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsVal_double SWIG_PERL_DECL_ARGS_2(SV *obj, double *val)
{
  if (SvNIOK(obj)) {
    if (val) *val = SvNV(obj);
    return SWIG_OK;
  } else if (SvIOK(obj)) {
    if (val) *val = (double) SvIV(obj);
    return SWIG_AddCast(SWIG_OK);
  } else {
    const char *nptr = SvPV(obj, PL_na);
    if (nptr) {
      char *endptr;
      double v = strtod(nptr, &endptr);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_long  SWIG_PERL_DECL_ARGS_1(unsigned long value)
{    
  SV *obj = sv_newmortal();
  sv_setuv(obj, (UV) value);
  return obj;
}


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_int  SWIG_PERL_DECL_ARGS_1(unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(value);
}


SWIGINTERNINLINE SV *
SWIG_From_long  SWIG_PERL_DECL_ARGS_1(long value)
{    
  SV *obj = sv_newmortal();
  sv_setiv(obj, (IV) value);
  return obj;
}


SWIGINTERNINLINE SV *
SWIG_From_int  SWIG_PERL_DECL_ARGS_1(int value)
{    
  return SWIG_From_long  SWIG_PERL_CALL_ARGS_1(value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(SV *obj, char** cptr, size_t* psize, int *alloc)
{
  if (SvPOK(obj)) {
    STRLEN len = 0;
    char *cstr = SvPV(obj, len); 
    size_t size = len + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      char* vptr = 0; 
      if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = vptr;
	if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_bool SWIG_PERL_DECL_ARGS_2(SV *obj, bool* val)
{
  if (obj == &PL_sv_yes) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == &PL_sv_no) { 
    if (val) *val = false;
    return SWIG_OK;
  } else {
    if (val) *val = SvTRUE(obj) ? true: false;
    return SWIG_AddCast(SWIG_OK);    
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE SV *
SWIG_From_bool  SWIG_PERL_DECL_ARGS_1(bool value)
{    
  SV *obj = sv_newmortal();
  if (value) {
    sv_setsv(obj, &PL_sv_yes);
  } else {
    sv_setsv(obj, &PL_sv_no); 
  }
  return obj;
}


#include <limits.h>
#ifndef LLONG_MIN
# define LLONG_MIN	LONG_LONG_MIN
#endif
#ifndef LLONG_MAX
# define LLONG_MAX	LONG_LONG_MAX
#endif
#ifndef ULLONG_MAX
# define ULLONG_MAX	ULONG_LONG_MAX
#endif


SWIGINTERN int
SWIG_AsVal_long SWIG_PERL_DECL_ARGS_2(SV *obj, long* val)
{
  if (SvIOK(obj)) {
    if (val) *val = SvIV(obj);
    return SWIG_OK;
  } else {
    int dispatch = 0;
    const char *nptr = SvPV(obj, PL_na);
    if (nptr) {
      char *endptr;
      long v = strtol(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_PERL_DECL_ARGS_2(SV * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long SWIG_PERL_DECL_ARGS_2(SV *obj, unsigned long *val) 
{
  if (SvUOK(obj)) {
    if (val) *val = SvUV(obj);
    return SWIG_OK;
  } else  if (SvIOK(obj)) {
    long v = SvIV(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else {
    int dispatch = 0;
    const char *nptr = SvPV(obj, PL_na);
    if (nptr) {
      char *endptr;
      unsigned long v = strtoul(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int SWIG_PERL_DECL_ARGS_2(SV * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE SV *
SWIG_From_size_t  SWIG_PERL_DECL_ARGS_1(size_t value)
{    
  return SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned long >(value));
}

#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_XML__Xerces_var::
class _wrap_XML__Xerces_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(pTHX_ SV *SWIGUNUSEDPARM(sv), MAGIC *SWIGUNUSEDPARM(mg)) {
    MAGIC_PPERL
    croak("Value is read-only.");
    return 0;
}
SWIGCLASS_STATIC int _wrap_XMLUni_fgAnyString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgAnyString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgAttListString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgAttListString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgCommentString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgCommentString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgCDATAString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgCDATAString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDefaultString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDefaultString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDocTypeString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDocTypeString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgEBCDICEncodingString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgEBCDICEncodingString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgElemString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgElemString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgEmptyString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgEmptyString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgEncodingString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgEncodingString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgEntitString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgEntitString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgEntityString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgEntityString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgEntitiesString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgEntitiesString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgEnumerationString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgEnumerationString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgExceptDomain_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgExceptDomain));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgFixedString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgFixedString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIBM037EncodingString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIBM037EncodingString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIBM037EncodingString2_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIBM037EncodingString2));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIBM1047EncodingString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIBM1047EncodingString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIBM1047EncodingString2_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIBM1047EncodingString2));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIBM1140EncodingString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIBM1140EncodingString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIBM1140EncodingString2_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIBM1140EncodingString2));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIBM1140EncodingString3_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIBM1140EncodingString3));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIBM1140EncodingString4_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIBM1140EncodingString4));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIESString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIESString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIDString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIDString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIDRefString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIDRefString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIDRefsString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIDRefsString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgImpliedString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgImpliedString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIgnoreString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIgnoreString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIncludeString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIncludeString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgISO88591EncodingString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgISO88591EncodingString2_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString2));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgISO88591EncodingString3_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString3));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgISO88591EncodingString4_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString4));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgISO88591EncodingString5_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString5));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgISO88591EncodingString6_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString6));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgISO88591EncodingString7_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString7));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgISO88591EncodingString8_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString8));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgISO88591EncodingString9_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString9));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgISO88591EncodingString10_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString10));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgISO88591EncodingString11_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString11));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgISO88591EncodingString12_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgISO88591EncodingString12));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgLocalHostString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgLocalHostString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgNoString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgNoString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgNotationString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgNotationString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgNDATAString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgNDATAString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgNmTokenString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgNmTokenString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgNmTokensString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgNmTokensString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgPCDATAString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgPCDATAString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgPIString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgPIString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgPubIDString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgPubIDString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgRefString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgRefString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgRequiredString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgRequiredString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgStandaloneString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgStandaloneString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgVersion1_0_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgVersion1_0));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgVersion1_1_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgVersion1_1));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgSysIDString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgSysIDString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUnknownURIName_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUnknownURIName));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUCS4EncodingString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUCS4EncodingString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUCS4EncodingString2_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUCS4EncodingString2));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUCS4EncodingString3_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUCS4EncodingString3));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUCS4BEncodingString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUCS4BEncodingString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUCS4BEncodingString2_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUCS4BEncodingString2));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUCS4LEncodingString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUCS4LEncodingString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUCS4LEncodingString2_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUCS4LEncodingString2));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUSASCIIEncodingString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUSASCIIEncodingString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUSASCIIEncodingString2_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUSASCIIEncodingString2));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUSASCIIEncodingString3_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUSASCIIEncodingString3));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUSASCIIEncodingString4_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUSASCIIEncodingString4));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUTF8EncodingString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUTF8EncodingString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUTF8EncodingString2_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUTF8EncodingString2));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUTF16EncodingString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16EncodingString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUTF16EncodingString2_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16EncodingString2));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUTF16EncodingString3_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16EncodingString3));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUTF16EncodingString4_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16EncodingString4));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUTF16EncodingString5_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16EncodingString5));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUTF16EncodingString6_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16EncodingString6));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUTF16EncodingString7_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16EncodingString7));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUTF16BEncodingString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16BEncodingString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUTF16BEncodingString2_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16BEncodingString2));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUTF16LEncodingString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16LEncodingString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUTF16LEncodingString2_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUTF16LEncodingString2));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgVersionString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgVersionString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgValidityDomain_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgValidityDomain));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgWin1252EncodingString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgWin1252EncodingString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLChEncodingString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLChEncodingString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLDOMMsgDomain_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDOMMsgDomain));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLStringSpace_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLStringSpace));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLStringHTab_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLStringHTab));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLStringCR_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLStringCR));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLStringLF_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLStringLF));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLStringSpaceU_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLStringSpaceU));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLStringHTabU_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLStringHTabU));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLStringCRU_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLStringCRU));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLStringLFU_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLStringLFU));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLDeclString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLDeclStringSpace_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclStringSpace));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLDeclStringHTab_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclStringHTab));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLDeclStringLF_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclStringLF));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLDeclStringCR_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclStringCR));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLDeclStringSpaceU_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclStringSpaceU));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLDeclStringHTabU_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclStringHTabU));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLDeclStringLFU_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclStringLFU));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLDeclStringCRU_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLDeclStringCRU));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLNSString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLNSString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLNSColonString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLNSColonString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLNSURIName_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLNSURIName));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLErrDomain_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLErrDomain));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLURIName_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLURIName));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgInfosetURIName_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgInfosetURIName));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgYesString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgYesString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgZeroLenString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgZeroLenString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDTDEntityString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDTDEntityString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgAmp_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgAmp));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgLT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgLT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgGT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgGT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgQuot_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgQuot));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgApos_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgApos));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgWFXMLScanner_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgWFXMLScanner));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIGXMLScanner_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIGXMLScanner));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgSGXMLScanner_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgSGXMLScanner));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDGXMLScanner_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDGXMLScanner));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXSAXMLScanner_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXSAXMLScanner));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgCDataStart_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgCDataStart));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgCDataEnd_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgCDataEnd));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgArrayIndexOutOfBoundsException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgArrayIndexOutOfBoundsException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgEmptyStackException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgEmptyStackException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIllegalArgumentException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIllegalArgumentException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgInvalidCastException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgInvalidCastException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIOException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIOException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgNoSuchElementException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgNoSuchElementException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgNullPointerException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgNullPointerException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXMLPlatformUtilsException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXMLPlatformUtilsException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgRuntimeException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgRuntimeException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgTranscodingException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgTranscodingException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUnexpectedEOFException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUnexpectedEOFException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUnsupportedEncodingException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUnsupportedEncodingException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUTFDataFormatException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUTFDataFormatException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgNetAccessorException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgNetAccessorException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgMalformedURLException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgMalformedURLException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgNumberFormatException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgNumberFormatException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgParseException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgParseException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgInvalidDatatypeFacetException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgInvalidDatatypeFacetException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgInvalidDatatypeValueException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgInvalidDatatypeValueException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgSchemaDateTimeException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgSchemaDateTimeException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXPathException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXPathException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXSerializationException_Name_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXSerializationException_Name));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgNegINFString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgNegINFString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgNegZeroString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgNegZeroString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgPosZeroString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgPosZeroString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgPosINFString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgPosINFString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgNaNString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgNaNString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgEString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgEString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgZeroString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgZeroString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgNullString_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgNullString));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesDynamic_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesDynamic));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesSchema_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesSchema));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesSchemaFullChecking_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesSchemaFullChecking));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesIdentityConstraintChecking_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesIdentityConstraintChecking));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesSchemaExternalSchemaLocation_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesSchemaExternalSchemaLocation));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesSchemaExternalNoNameSpaceSchemaLocation_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesSchemaExternalNoNameSpaceSchemaLocation));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesSecurityManager_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesSecurityManager));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesLoadExternalDTD_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesLoadExternalDTD));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesContinueAfterFatalError_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesContinueAfterFatalError));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesValidationErrorAsFatal_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesValidationErrorAsFatal));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesUserAdoptsDOMDocument_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesUserAdoptsDOMDocument));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesCacheGrammarFromParse_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesCacheGrammarFromParse));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesUseCachedGrammarInParse_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesUseCachedGrammarInParse));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesScannerName_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesScannerName));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesParserUseDocumentFromImplementation_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesParserUseDocumentFromImplementation));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesCalculateSrcOfs_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesCalculateSrcOfs));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesStandardUriConformant_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesStandardUriConformant));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesDOMHasPSVIInfo_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesDOMHasPSVIInfo));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesGenerateSyntheticAnnotations_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesGenerateSyntheticAnnotations));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesValidateAnnotations_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesValidateAnnotations));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesIgnoreCachedDTD_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesIgnoreCachedDTD));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesIgnoreAnnotations_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesIgnoreAnnotations));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesDisableDefaultEntityResolution_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesDisableDefaultEntityResolution));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesSkipDTDValidation_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesSkipDTDValidation));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercesEntityResolver_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercesEntityResolver));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgSAX2CoreValidation_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgSAX2CoreValidation));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgSAX2CoreNameSpaces_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgSAX2CoreNameSpaces));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgSAX2CoreNameSpacePrefixes_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgSAX2CoreNameSpacePrefixes));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMCanonicalForm_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMCanonicalForm));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMCDATASections_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMCDATASections));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMComments_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMComments));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMCharsetOverridesXMLEncoding_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMCharsetOverridesXMLEncoding));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMCheckCharacterNormalization_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMCheckCharacterNormalization));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMDatatypeNormalization_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMDatatypeNormalization));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMDisallowDoctype_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMDisallowDoctype));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMElementContentWhitespace_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMElementContentWhitespace));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMErrorHandler_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMErrorHandler));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMEntities_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMEntities));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMIgnoreUnknownCharacterDenormalization_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMIgnoreUnknownCharacterDenormalization));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMInfoset_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMInfoset));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMNamespaces_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMNamespaces));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMNamespaceDeclarations_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMNamespaceDeclarations));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMNormalizeCharacters_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMNormalizeCharacters));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMResourceResolver_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMResourceResolver));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMSchemaLocation_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMSchemaLocation));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMSchemaType_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMSchemaType));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMSplitCDATASections_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMSplitCDATASections));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMSupportedMediatypesOnly_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMSupportedMediatypesOnly));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMValidate_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMValidate));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMValidateIfSchema_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMValidateIfSchema));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMWellFormed_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWellFormed));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMXMLSchemaType_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMXMLSchemaType));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMDTDType_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMDTDType));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMWRTCanonicalForm_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTCanonicalForm));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMWRTDiscardDefaultContent_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTDiscardDefaultContent));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMWRTEntities_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTEntities));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMWRTFormatPrettyPrint_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTFormatPrettyPrint));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMWRTNormalizeCharacters_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTNormalizeCharacters));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMWRTSplitCdataSections_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTSplitCdataSections));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMWRTValidation_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTValidation));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMWRTWhitespaceInElementContent_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTWhitespaceInElementContent));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMWRTBOM_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTBOM));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMXMLDeclaration_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMXMLDeclaration));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDOMWRTXercesPrettyPrint_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDOMWRTXercesPrettyPrint));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercescInterfacePSVITypeInfo_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercescInterfacePSVITypeInfo));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercescInterfaceDOMDocumentTypeImpl_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercescInterfaceDOMDocumentTypeImpl));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercescInterfaceDOMMemoryManager_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgXercescInterfaceDOMMemoryManager));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgXercescDefaultLocale_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_FromCharPtr(XERCES_CPP_NAMESPACE::XMLUni::fgXercescDefaultLocale))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgDefErrMsg_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgDefErrMsg));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgValueZero_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgValueZero));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgNegOne_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgNegOne));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgValueOne_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgValueOne));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgLongMaxInc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgLongMaxInc));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgLongMinInc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgLongMinInc));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIntMaxInc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIntMaxInc));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgIntMinInc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgIntMinInc));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgShortMaxInc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgShortMaxInc));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgShortMinInc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgShortMinInc));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgByteMaxInc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgByteMaxInc));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgByteMinInc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgByteMinInc));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgULongMaxInc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgULongMaxInc));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUIntMaxInc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUIntMaxInc));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUShortMaxInc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUShortMaxInc));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgUByteMaxInc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgUByteMaxInc));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgLangPattern_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgLangPattern));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgBooleanValueSpace_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  AV *myav = newAV();
  for (int i=0;i<4;i++) {
    av_push(myav, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLUni::fgBooleanValueSpace[i]));
  }
  
  SV* rv = newRV((SV*)myav);
  sv_setsv((SV*)sv, rv);
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLUni_fgBooleanValueSpaceArraySize_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(XERCES_CPP_NAMESPACE::XMLUni::fgBooleanValueSpaceArraySize)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgURI_XSI_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgURI_XSI));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgURI_SCHEMAFORSCHEMA_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgURI_SCHEMAFORSCHEMA));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgXSI_SCHEMALOCACTION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgXSI_SCHEMALOCACTION));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgXSI_NONAMESPACESCHEMALOCACTION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgXSI_NONAMESPACESCHEMALOCACTION));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgXSI_TYPE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgXSI_TYPE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_ALL_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_ALL));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_ANNOTATION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_ANNOTATION));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_ANY_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_ANY));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_WILDCARD_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_WILDCARD));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_ANYATTRIBUTE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_ANYATTRIBUTE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_APPINFO_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_APPINFO));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_ATTRIBUTE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_ATTRIBUTE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_ATTRIBUTEGROUP_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_ATTRIBUTEGROUP));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_CHOICE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_CHOICE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_COMPLEXTYPE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_COMPLEXTYPE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_CONTENT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_CONTENT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_DOCUMENTATION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_DOCUMENTATION));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_DURATION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_DURATION));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_ELEMENT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_ELEMENT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_ENCODING_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_ENCODING));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_ENUMERATION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_ENUMERATION));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_FIELD_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_FIELD));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_WHITESPACE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_WHITESPACE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_GROUP_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_GROUP));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_IMPORT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_IMPORT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_INCLUDE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_INCLUDE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_REDEFINE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_REDEFINE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_KEY_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_KEY));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_KEYREF_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_KEYREF));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_LENGTH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_LENGTH));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_MAXEXCLUSIVE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_MAXEXCLUSIVE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_MAXINCLUSIVE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_MAXINCLUSIVE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_MAXLENGTH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_MAXLENGTH));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_MINEXCLUSIVE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_MINEXCLUSIVE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_MININCLUSIVE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_MININCLUSIVE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_MINLENGTH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_MINLENGTH));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_NOTATION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_NOTATION));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_PATTERN_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_PATTERN));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_PERIOD_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_PERIOD));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_TOTALDIGITS_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_TOTALDIGITS));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_FRACTIONDIGITS_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_FRACTIONDIGITS));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_SCHEMA_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_SCHEMA));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_SELECTOR_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_SELECTOR));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_SEQUENCE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_SEQUENCE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_SIMPLETYPE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_SIMPLETYPE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_UNION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_UNION));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_LIST_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_LIST));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_UNIQUE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_UNIQUE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_COMPLEXCONTENT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_COMPLEXCONTENT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_SIMPLECONTENT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_SIMPLECONTENT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_RESTRICTION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_RESTRICTION));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgELT_EXTENSION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgELT_EXTENSION));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_ABSTRACT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_ABSTRACT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_ATTRIBUTEFORMDEFAULT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_ATTRIBUTEFORMDEFAULT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_BASE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_BASE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_ITEMTYPE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_ITEMTYPE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_MEMBERTYPES_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_MEMBERTYPES));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_BLOCK_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_BLOCK));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_BLOCKDEFAULT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_BLOCKDEFAULT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_DEFAULT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_DEFAULT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_ELEMENTFORMDEFAULT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_ELEMENTFORMDEFAULT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_SUBSTITUTIONGROUP_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_SUBSTITUTIONGROUP));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_FINAL_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_FINAL));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_FINALDEFAULT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_FINALDEFAULT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_FIXED_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_FIXED));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_FORM_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_FORM));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_ID_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_ID));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_MAXOCCURS_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_MAXOCCURS));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_MINOCCURS_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_MINOCCURS));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_NAME_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_NAME));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_NAMESPACE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_NAMESPACE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_NILL_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_NILL));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_NILLABLE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_NILLABLE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_PROCESSCONTENTS_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_PROCESSCONTENTS));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_REF_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_REF));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_REFER_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_REFER));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_SCHEMALOCATION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_SCHEMALOCATION));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_SOURCE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_SOURCE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_SYSTEM_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_SYSTEM));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_PUBLIC_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_PUBLIC));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_TARGETNAMESPACE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_TARGETNAMESPACE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_TYPE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_TYPE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_USE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_USE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_VALUE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_VALUE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_MIXED_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_MIXED));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_VERSION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_VERSION));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATT_XPATH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATT_XPATH));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_TWOPOUNDANY_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_TWOPOUNDANY));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_TWOPOUNDLOCAL_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_TWOPOUNDLOCAL));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_TWOPOUNDOTHER_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_TWOPOUNDOTHER));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_TWOPOUNDTRAGETNAMESPACE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_TWOPOUNDTRAGETNAMESPACE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_POUNDALL_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_POUNDALL));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_BASE64_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_BASE64));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_BOOLEAN_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_BOOLEAN));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_DEFAULT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_DEFAULT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_ELEMENTONLY_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_ELEMENTONLY));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_EMPTY_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_EMPTY));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_EXTENSION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_EXTENSION));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_FALSE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_FALSE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_FIXED_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_FIXED));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_HEX_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_HEX));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_ID_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_ID));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_LAX_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_LAX));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_MAXLENGTH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_MAXLENGTH));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_MINLENGTH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_MINLENGTH));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_MIXED_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_MIXED));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_NCNAME_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_NCNAME));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_OPTIONAL_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_OPTIONAL));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_PROHIBITED_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_PROHIBITED));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_QNAME_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_QNAME));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_QUALIFIED_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_QUALIFIED));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_REQUIRED_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_REQUIRED));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_RESTRICTION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_RESTRICTION));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_SKIP_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_SKIP));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_STRICT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_STRICT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_STRING_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_STRING));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_TEXTONLY_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_TEXTONLY));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_TIMEDURATION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_TIMEDURATION));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_TRUE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_TRUE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_UNQUALIFIED_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_UNQUALIFIED));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_URI_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_URI));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_URIREFERENCE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_URIREFERENCE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_SUBSTITUTIONGROUP_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_SUBSTITUTIONGROUP));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_SUBSTITUTION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_SUBSTITUTION));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgATTVAL_ANYTYPE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgATTVAL_ANYTYPE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgWS_PRESERVE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgWS_PRESERVE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgWS_COLLAPSE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgWS_COLLAPSE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgWS_REPLACE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgWS_REPLACE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_STRING_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_STRING));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_TOKEN_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_TOKEN));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_LANGUAGE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_LANGUAGE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_NAME_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_NAME));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_NCNAME_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_NCNAME));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_INTEGER_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_INTEGER));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_DECIMAL_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_DECIMAL));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_BOOLEAN_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_BOOLEAN));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_NONPOSITIVEINTEGER_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_NONPOSITIVEINTEGER));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_NEGATIVEINTEGER_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_NEGATIVEINTEGER));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_LONG_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_LONG));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_INT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_INT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_SHORT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_SHORT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_BYTE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_BYTE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_NONNEGATIVEINTEGER_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_NONNEGATIVEINTEGER));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_ULONG_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_ULONG));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_UINT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_UINT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_USHORT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_USHORT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_UBYTE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_UBYTE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_POSITIVEINTEGER_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_POSITIVEINTEGER));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_DATETIME_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_DATETIME));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_DATE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_DATE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_TIME_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_TIME));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_DURATION_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_DURATION));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_DAY_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_DAY));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_MONTH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_MONTH));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_MONTHDAY_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_MONTHDAY));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_YEAR_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_YEAR));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_YEARMONTH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_YEARMONTH));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_BASE64BINARY_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_BASE64BINARY));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_HEXBINARY_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_HEXBINARY));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_FLOAT_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_FLOAT));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_DOUBLE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_DOUBLE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_URIREFERENCE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_URIREFERENCE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_ANYURI_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_ANYURI));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_QNAME_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_QNAME));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_NORMALIZEDSTRING_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_NORMALIZEDSTRING));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgDT_ANYSIMPLETYPE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgDT_ANYSIMPLETYPE));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgRegEx_XOption_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgRegEx_XOption));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgRedefIdentifier_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::SchemaSymbols::fgRedefIdentifier));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgINT_MIN_VALUE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaSymbols::fgINT_MIN_VALUE)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_SchemaSymbols_fgINT_MAX_VALUE_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaSymbols::fgINT_MAX_VALUE)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgPsvColon_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgPsvColon));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAllDeclarationsProcessed_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAllDeclarationsProcessed));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAttribute_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAttribute));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAttributes_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAttributes));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAttributeType_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAttributeType));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgBaseURI_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgBaseURI));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgCharacter_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgCharacter));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgCharacterEncodingScheme_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgCharacterEncodingScheme));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgChildren_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgChildren));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgComment_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgComment));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgContent_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgContent));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgDocument_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgDocument));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgDocTypeDeclaration_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgDocTypeDeclaration));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgDocumentElement_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgDocumentElement));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgElement_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgElement));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgInScopeNamespaces_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgInScopeNamespaces));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgLocalName_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgLocalName));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNamespace_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNamespace));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNamespaceAttributes_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNamespaceAttributes));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNamespaceName_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNamespaceName));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNormalizedValue_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNormalizedValue));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNotations_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNotations));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgPrefix_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgPrefix));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgProcessingInstruction_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgProcessingInstruction));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgReferences_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgReferences));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSpecified_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSpecified));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgStandalone_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgStandalone));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgTarget_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgTarget));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgText_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgText));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgTextContent_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgTextContent));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgUnparsedEntities_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgUnparsedEntities));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgVersion_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgVersion));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAbstract_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAbstract));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAnnotation_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAnnotation));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAnnotations_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAnnotations));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgApplicationInformation_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgApplicationInformation));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAttributeDeclaration_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAttributeDeclaration));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAttributeGroupDefinition_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAttributeGroupDefinition));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAttributeUse_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAttributeUse));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAttributeUses_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAttributeUses));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAttributeWildcard_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAttributeWildcard));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgBaseTypeDefinition_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgBaseTypeDefinition));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgCanonicalRepresentation_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgCanonicalRepresentation));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgComplexTypeDefinition_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgComplexTypeDefinition));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgCompositor_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgCompositor));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgContentType_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgContentType));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgDeclaration_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgDeclaration));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgDerivationMethod_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgDerivationMethod));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgDisallowedSubstitutions_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgDisallowedSubstitutions));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgPsvDocument_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgPsvDocument));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgDocumentLocation_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgDocumentLocation));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgElementDeclaration_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgElementDeclaration));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgFacets_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgFacets));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgFacetFixed_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgFacetFixed));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgFields_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgFields));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgFinal_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgFinal));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgFundamentalFacets_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgFundamentalFacets));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgIdentityConstraintCategory_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgIdentityConstraintCategory));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgIdentityConstraintDefinition_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgIdentityConstraintDefinition));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgIdentityConstraintDefinitions_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgIdentityConstraintDefinitions));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgIdentityConstraintTable_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgIdentityConstraintTable));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgIdIdrefTable_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgIdIdrefTable));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgItemTypeDefinition_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgItemTypeDefinition));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgMaxOccurs_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgMaxOccurs));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgMemberTypeDefinition_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgMemberTypeDefinition));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgMemberTypeDefinitions_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgMemberTypeDefinitions));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgMinOccurs_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgMinOccurs));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgModelGroup_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgModelGroup));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgModelGroupDefinition_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgModelGroupDefinition));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgName_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgName));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNamespaceConstraint_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNamespaceConstraint));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNamespaces_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNamespaces));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNamespaceSchemaInformation_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNamespaceSchemaInformation));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNil_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNil));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNillable_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNillable));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNotation_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNotation));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNotationDeclaration_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNotationDeclaration));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgParticle_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgParticle));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgParticles_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgParticles));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgPrimitiveTypeDefinition_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgPrimitiveTypeDefinition));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgProcessContents_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgProcessContents));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgProhibitedSubstitutions_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgProhibitedSubstitutions));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgPublicIdentifier_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgPublicIdentifier));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgReferencedKey_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgReferencedKey));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgRequired_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgRequired));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSchemaAnnotations_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSchemaAnnotations));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSchemaComponents_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSchemaComponents));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSchemaDefault_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSchemaDefault));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSchemaDocument_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSchemaDocument));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSchemaDocuments_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSchemaDocuments));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSchemaErrorCode_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSchemaErrorCode));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSchemaInformation_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSchemaInformation));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSchemaNamespace_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSchemaNamespace));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSchemaNormalizedValue_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSchemaNormalizedValue));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSchemaSpecified_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSchemaSpecified));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgScope_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgScope));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSelector_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSelector));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSimpleTypeDefinition_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSimpleTypeDefinition));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSubstitutionGroupAffiliation_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSubstitutionGroupAffiliation));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSubstitutionGroupExclusions_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSubstitutionGroupExclusions));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSystemIdentifier_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSystemIdentifier));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgTargetNamespace_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgTargetNamespace));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgTerm_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgTerm));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgTypeDefinition_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgTypeDefinition));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgUserInformation_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgUserInformation));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgValidationAttempted_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgValidationAttempted));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgValidationContext_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgValidationContext));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgValidity_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgValidity));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgValue_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgValue));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgValueConstraint_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgValueConstraint));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgVariety_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgVariety));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgWildcard_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgWildcard));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgXpath_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgXpath));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAll_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAll));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAny_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAny));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAppinfo_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAppinfo));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAtomic_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAtomic));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgChoice_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgChoice));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgDefault_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgDefault));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgDocumentation_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgDocumentation));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgElementOnly_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgElementOnly));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgEmpty_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgEmpty));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgExtension_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgExtension));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgFalse_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgFalse));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgFull_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgFull));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgGlobal_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgGlobal));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgInfoset_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgInfoset));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgInvalid_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgInvalid));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgKey_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgKey));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgKeyref_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgKeyref));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgLax_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgLax));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgList_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgList));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgLocal_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgLocal));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgMixed_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgMixed));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNone_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNone));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNotKnown_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNotKnown));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNsNamespace_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNsNamespace));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgOnePointZero_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgOnePointZero));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgPartial_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgPartial));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgRestrict_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgRestrict));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgRestriction_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgRestriction));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSchema_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSchema));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSequence_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSequence));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSimple_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSimple));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSkip_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSkip));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgStrict_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgStrict));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgSubstitution_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgSubstitution));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgTotal_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgTotal));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgTrue_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgTrue));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgUnbounded_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgUnbounded));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgUnion_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgUnion));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgUnique_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgUnique));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgUnknown_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgUnknown));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgValid_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgValid));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgVCFixed_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgVCFixed));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgXMLChNull_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgXMLChNull));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAg_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAg));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAnnot_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAnnot));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAttr_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAttr));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgAu_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgAu));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgElt_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgElt));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgIdc_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgIdc));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgMg_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgMg));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNot_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNot));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgType_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgType));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgBounded_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgBounded));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgCardinality_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgCardinality));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgEnumeration_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgEnumeration));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgFractionDigits_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgFractionDigits));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgLength_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgLength));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgMaxExclusive_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgMaxExclusive));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgMaxInclusive_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgMaxInclusive));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgMaxLength_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgMaxLength));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgMinExclusive_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgMinExclusive));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgMinInclusive_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgMinInclusive));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgMinLength_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgMinLength));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNumeric_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNumeric));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgOrdered_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgOrdered));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgPattern_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgPattern));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgTotalDigits_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgTotalDigits));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgWhiteSpace_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgWhiteSpace));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNamespaceInfoset_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNamespaceInfoset));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgXsi_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgXsi));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNamespaceInstance_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNamespaceInstance));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgPsv_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgPsv));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNamespacePsvi_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNamespacePsvi));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgXml_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgXml));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_PSVIUni_fgNamespaceXmlSchema_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(PSVIUni::fgNamespaceXmlSchema));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLElementDecl_fgInvalidElemId_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(XERCES_CPP_NAMESPACE::XMLElementDecl::fgInvalidElemId)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLElementDecl_fgPCDataElemId_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(XERCES_CPP_NAMESPACE::XMLElementDecl::fgPCDataElemId)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLElementDecl_fgPCDataElemName_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  
  sv_setsv((SV*)sv, UTF8_TRANSCODER->XMLString2Local(XERCES_CPP_NAMESPACE::XMLElementDecl::fgPCDataElemName));
  
  return 1;
}


SWIGCLASS_STATIC int _wrap_XMLAttDef_fgInvalidAttrId_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(XERCES_CPP_NAMESPACE::XMLAttDef::fgInvalidAttrId)))  ;
  return 1;
}




#ifdef PERL_OBJECT
};
#endif

#ifdef __cplusplus
extern "C" {
#endif
XS(_wrap_delete_XMLUni) {
  {
    XERCES_CPP_NAMESPACE::XMLUni *arg1 = (XERCES_CPP_NAMESPACE::XMLUni *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLUni(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUni, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLUni" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUni *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUni * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_SchemaSymbols) {
  {
    XERCES_CPP_NAMESPACE::SchemaSymbols *arg1 = (XERCES_CPP_NAMESPACE::SchemaSymbols *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SchemaSymbols(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaSymbols, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SchemaSymbols" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaSymbols *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaSymbols * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PSVIUni) {
  {
    PSVIUni *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_PSVIUni();");
    }
    {
      try 
      {
        result = (PSVIUni *)new PSVIUni();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PSVIUni, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_PSVIUni) {
  {
    PSVIUni *arg1 = (PSVIUni *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_PSVIUni(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_PSVIUni, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PSVIUni" "', argument " "1"" of type '" "PSVIUni *""'"); 
    }
    arg1 = reinterpret_cast< PSVIUni * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_XMLDeleter) {
  {
    XERCES_CPP_NAMESPACE::XMLDeleter *arg1 = (XERCES_CPP_NAMESPACE::XMLDeleter *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLDeleter(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDeleter, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLDeleter" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDeleter *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDeleter * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLPlatformUtils_Initialize__SWIG_0) {
  {
    char *arg1 = (char *) (char *)0 ;
    char *arg2 = (char *) (char *)0 ;
    PanicHandler *arg3 = (PanicHandler *) (PanicHandler *)0 ;
    XERCES_CPP_NAMESPACE::MemoryManager *arg4 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    bool arg5 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    bool val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: XMLPlatformUtils_Initialize(locale,nlsHome,panicHandler,memoryManager,toInitStatics);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLPlatformUtils_Initialize" "', argument " "1"" of type '" "char const *const""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLPlatformUtils_Initialize" "', argument " "2"" of type '" "char const *const""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_PanicHandler, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "XMLPlatformUtils_Initialize" "', argument " "3"" of type '" "PanicHandler *const""'"); 
    }
    arg3 = reinterpret_cast< PanicHandler * >(argp3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "XMLPlatformUtils_Initialize" "', argument " "4"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
    }
    arg4 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp4);
    ecode5 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "XMLPlatformUtils_Initialize" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    {
      try 
      {
        XERCES_CPP_NAMESPACE::XMLPlatformUtils::Initialize((char const *)arg1,(char const *)arg2,arg3,arg4,arg5);
      } 
      CATCH_XML_EXCEPTION
    }
    
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLPlatformUtils_Initialize__SWIG_1) {
  {
    char *arg1 = (char *) (char *)0 ;
    char *arg2 = (char *) (char *)0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLPlatformUtils_Initialize(locale,nlsHome);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLPlatformUtils_Initialize" "', argument " "1"" of type '" "char const *const""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLPlatformUtils_Initialize" "', argument " "2"" of type '" "char const *const""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try 
      {
        XERCES_CPP_NAMESPACE::XMLPlatformUtils::Initialize((char const *)arg1,(char const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_XMLPlatformUtils_Initialize__SWIG_2) {
  {
    char *arg1 = (char *) (char *)0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLPlatformUtils_Initialize(locale);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLPlatformUtils_Initialize" "', argument " "1"" of type '" "char const *const""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try 
      {
        XERCES_CPP_NAMESPACE::XMLPlatformUtils::Initialize((char const *)arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_XMLPlatformUtils_Initialize__SWIG_3) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: XMLPlatformUtils_Initialize();");
    }
    {
      try 
      {
        XERCES_CPP_NAMESPACE::XMLPlatformUtils::Initialize();
      } 
      CATCH_XML_EXCEPTION
    }
    
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_XMLPlatformUtils_Initialize) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(2), &vptr, SWIGTYPE_p_PanicHandler, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(3), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLPlatformUtils_Initialize__SWIG_3); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLPlatformUtils_Initialize__SWIG_2); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLPlatformUtils_Initialize__SWIG_1); return;
    case 4:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLPlatformUtils_Initialize__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'XMLPlatformUtils_Initialize'");
  XSRETURN(0);
}


XS(_wrap_XMLPlatformUtils_Terminate) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: XMLPlatformUtils_Terminate();");
    }
    {
      try 
      {
        XERCES_CPP_NAMESPACE::XMLPlatformUtils::Terminate();
      } 
      CATCH_XML_EXCEPTION
    }
    
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_XMLPlatformUtils) {
  {
    XERCES_CPP_NAMESPACE::XMLPlatformUtils *arg1 = (XERCES_CPP_NAMESPACE::XMLPlatformUtils *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLPlatformUtils(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPlatformUtils, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLPlatformUtils" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLPlatformUtils *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLPlatformUtils * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_lookupByName) {
  {
    XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLURL::Protocols result;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLURL_lookupByName(protoName);");
    }
    
    // we convert *everything* into a string *including* undef
    arg1 = UTF8_TRANSCODER->Local2XMLString(ST(0));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLURL::Protocols)XERCES_CPP_NAMESPACE::XMLURL::lookupByName((uint16_t const *)arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    delete[] arg1;
    
    XSRETURN(argvi);
  fail:
    
    delete[] arg1;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_parse) {
  {
    XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLURL *arg2 = 0 ;
    bool result;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLURL_parse(urlText,xmlURL);");
    }
    
    // we convert *everything* into a string *including* undef
    arg1 = UTF8_TRANSCODER->Local2XMLString(ST(0));
    
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLURL_parse" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLURL &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLURL_parse" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLURL &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp2);
    {
      try 
      {
        result = (bool)XERCES_CPP_NAMESPACE::XMLURL::parse((uint16_t const *)arg1,*arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    delete[] arg1;
    
    
    XSRETURN(argvi);
  fail:
    
    delete[] arg1;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLURL__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_XMLURL();");
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLURL *)new XERCES_CPP_NAMESPACE::XMLURL();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLURL__SWIG_1) {
  {
    XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLURL *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_XMLURL(baseURL,relativeURL);");
    }
    
    // we convert *everything* into a string *including* undef
    arg1 = UTF8_TRANSCODER->Local2XMLString(ST(0));
    
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLURL *)new XERCES_CPP_NAMESPACE::XMLURL((XMLCh const *)arg1,(XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    delete[] arg1;
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    delete[] arg1;
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLURL__SWIG_2) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLURL *result = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_XMLURL(baseURL,relativeURL);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_XMLURL" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_XMLURL" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const &""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLURL *)new XERCES_CPP_NAMESPACE::XMLURL((XERCES_CPP_NAMESPACE::XMLURL const &)*arg1,(XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLURL__SWIG_3) {
  {
    XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLURL *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_XMLURL(urlText);");
    }
    
    // we convert *everything* into a string *including* undef
    arg1 = UTF8_TRANSCODER->Local2XMLString(ST(0));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLURL *)new XERCES_CPP_NAMESPACE::XMLURL((XMLCh const *)arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    delete[] arg1;
    
    XSRETURN(argvi);
  fail:
    
    delete[] arg1;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLURL__SWIG_4) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = 0 ;
    XERCES_CPP_NAMESPACE::XMLURL *result = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_XMLURL(toCopy);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_XMLURL" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_XMLURL" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const &""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLURL *)new XERCES_CPP_NAMESPACE::XMLURL((XERCES_CPP_NAMESPACE::XMLURL const &)*arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLURL) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLURL__SWIG_0); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLURL__SWIG_4); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLURL__SWIG_3); return;
    case 4:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLURL__SWIG_2); return;
    case 5:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLURL__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_XMLURL'");
  XSRETURN(0);
}


XS(_wrap_delete_XMLURL) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLURL(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLURL" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL___eq__) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XERCES_CPP_NAMESPACE::XMLURL *arg2 = 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLURL___eq__(self,toCompare);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL___eq__" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLURL___eq__" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLURL___eq__" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp2);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->operator ==((XERCES_CPP_NAMESPACE::XMLURL const &)*arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL___ne__) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XERCES_CPP_NAMESPACE::XMLURL *arg2 = 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLURL___ne__(self,toCompare);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL___ne__" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLURL___ne__" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLURL___ne__" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp2);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->operator !=((XERCES_CPP_NAMESPACE::XMLURL const &)*arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_getFragment) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLURL_getFragment(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_getFragment" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getFragment();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_getHost) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLURL_getHost(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_getHost" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getHost();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_getPassword) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLURL_getPassword(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_getPassword" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getPassword();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_getPath) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLURL_getPath(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_getPath" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getPath();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_getPortNum) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLURL_getPortNum(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_getPortNum" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getPortNum();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_getProtocol) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XERCES_CPP_NAMESPACE::XMLURL::Protocols result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLURL_getProtocol(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_getProtocol" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLURL::Protocols)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getProtocol();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_getProtocolName) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLURL_getProtocolName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_getProtocolName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getProtocolName();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_getQuery) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLURL_getQuery(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_getQuery" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getQuery();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_getURLText) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLURL_getURLText(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_getURLText" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getURLText();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_getUser) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLURL_getUser(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_getUser" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getUser();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_getMemoryManager) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XERCES_CPP_NAMESPACE::MemoryManager *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLURL_getMemoryManager(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_getMemoryManager" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::MemoryManager *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->getMemoryManager();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_setURL__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLURL_setURL(self,urlText);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_setURL" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setURL((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_setURL__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: XMLURL_setURL(self,baseURL,relativeURL);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_setURL" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    {
      try 
      {
        (arg1)->setURL((XMLCh const *)arg2,(XMLCh const *)arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_setURL__SWIG_2) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XERCES_CPP_NAMESPACE::XMLURL *arg2 = 0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: XMLURL_setURL(self,baseURL,relativeURL);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_setURL" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLURL_setURL" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLURL_setURL" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp2);
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    {
      try 
      {
        (arg1)->setURL((XERCES_CPP_NAMESPACE::XMLURL const &)*arg2,(XMLCh const *)arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    delete[] arg3;
    
    XSRETURN(argvi);
  fail:
    
    
    
    delete[] arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_setURL__SWIG_3) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLURL *arg4 = 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: XMLURL_setURL(self,baseURL,relativeURL,xmlURL);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_setURL" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    res4 = SWIG_ConvertPtr(ST(3), &argp4, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "XMLURL_setURL" "', argument " "4"" of type '" "XERCES_CPP_NAMESPACE::XMLURL &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLURL_setURL" "', argument " "4"" of type '" "XERCES_CPP_NAMESPACE::XMLURL &""'"); 
    }
    arg4 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp4);
    {
      try 
      {
        result = (bool)(arg1)->setURL((XMLCh const *)arg2,(XMLCh const *)arg3,*arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_setURL) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(3), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLURL_setURL__SWIG_0); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLURL_setURL__SWIG_2); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLURL_setURL__SWIG_1); return;
    case 4:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLURL_setURL__SWIG_3); return;
    }
  }
  
  croak("No matching function for overloaded 'XMLURL_setURL'");
  XSRETURN(0);
}


XS(_wrap_XMLURL_isRelative) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLURL_isRelative(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_isRelative" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->isRelative();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_hasInvalidChar) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLURL_hasInvalidChar(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_hasInvalidChar" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->hasInvalidChar();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_makeNewStream) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XERCES_CPP_NAMESPACE::BinInputStream *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLURL_makeNewStream(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_makeNewStream" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::BinInputStream *)((XERCES_CPP_NAMESPACE::XMLURL const *)arg1)->makeNewStream();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__BinInputStream, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_makeRelativeTo__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLURL_makeRelativeTo(self,baseURLText);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_makeRelativeTo" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->makeRelativeTo((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_makeRelativeTo__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::XMLURL *arg1 = (XERCES_CPP_NAMESPACE::XMLURL *) 0 ;
    XERCES_CPP_NAMESPACE::XMLURL *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLURL_makeRelativeTo(self,baseURL);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLURL_makeRelativeTo" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLURL *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLURL_makeRelativeTo" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLURL_makeRelativeTo" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLURL const &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLURL * >(argp2);
    {
      try 
      {
        (arg1)->makeRelativeTo((XERCES_CPP_NAMESPACE::XMLURL const &)*arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLURL_makeRelativeTo) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLURL_makeRelativeTo__SWIG_1); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLURL_makeRelativeTo__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'XMLURL_makeRelativeTo'");
  XSRETURN(0);
}


XS(_wrap_new_XMLUri__SWIG_0) {
  {
    XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLUri *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_XMLUri(uriSpec);");
    }
    
    // we convert *everything* into a string *including* undef
    arg1 = UTF8_TRANSCODER->Local2XMLString(ST(0));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLUri *)new XERCES_CPP_NAMESPACE::XMLUri((XMLCh const *)arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    delete[] arg1;
    
    XSRETURN(argvi);
  fail:
    
    delete[] arg1;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLUri__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) (XERCES_CPP_NAMESPACE::XMLUri *)0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLUri *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_XMLUri(baseURI,uriSpec);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_XMLUri" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri const *const""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLUri *)new XERCES_CPP_NAMESPACE::XMLUri((XERCES_CPP_NAMESPACE::XMLUri const *)arg1,(XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLUri__SWIG_2) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = 0 ;
    XERCES_CPP_NAMESPACE::XMLUri *result = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_XMLUri(toCopy);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_XMLUri" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_XMLUri" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri const &""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLUri *)new XERCES_CPP_NAMESPACE::XMLUri((XERCES_CPP_NAMESPACE::XMLUri const &)*arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_XMLUri) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLUri(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLUri" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_getUriText) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLUri_getUriText(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_getUriText" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getUriText();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_getScheme) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLUri_getScheme(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_getScheme" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getScheme();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_getUserInfo) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLUri_getUserInfo(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_getUserInfo" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getUserInfo();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_getHost) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLUri_getHost(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_getHost" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getHost();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_getPort) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLUri_getPort(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_getPort" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    {
      try 
      {
        result = (int)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getPort();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_getRegBasedAuthority) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLUri_getRegBasedAuthority(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_getRegBasedAuthority" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getRegBasedAuthority();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_getPath) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLUri_getPath(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_getPath" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getPath();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_getQueryString) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLUri_getQueryString(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_getQueryString" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getQueryString();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_getFragment) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLUri_getFragment(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_getFragment" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLUri const *)arg1)->getFragment();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_setScheme) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLUri_setScheme(self,newScheme);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_setScheme" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setScheme((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_setUserInfo) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLUri_setUserInfo(self,newUserInfo);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_setUserInfo" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setUserInfo((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_setHost) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLUri_setHost(self,newHost);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_setHost" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setHost((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_setPort) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLUri_setPort(self,newPort);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_setPort" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLUri_setPort" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try 
      {
        (arg1)->setPort(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_setRegBasedAuthority) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLUri_setRegBasedAuthority(self,newRegAuth);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_setRegBasedAuthority" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setRegBasedAuthority((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_setPath) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLUri_setPath(self,newPath);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_setPath" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setPath((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_setQueryString) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLUri_setQueryString(self,newQueryString);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_setQueryString" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setQueryString((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_setFragment) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLUri_setFragment(self,newFragment);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_setFragment" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setFragment((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_isURIString) {
  {
    XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
    bool result;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLUri_isURIString(uric);");
    }
    
    // we convert *everything* into a string *including* undef
    arg1 = UTF8_TRANSCODER->Local2XMLString(ST(0));
    
    {
      try 
      {
        result = (bool)XERCES_CPP_NAMESPACE::XMLUri::isURIString((uint16_t const *)arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    delete[] arg1;
    
    XSRETURN(argvi);
  fail:
    
    delete[] arg1;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_isValidURI__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) (XERCES_CPP_NAMESPACE::XMLUri *)0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    bool arg3 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: XMLUri_isValidURI(baseURI,uriStr,bAllowSpaces);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_isValidURI" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri const *const""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    ecode3 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XMLUri_isValidURI" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    {
      try 
      {
        result = (bool)XERCES_CPP_NAMESPACE::XMLUri::isValidURI((XERCES_CPP_NAMESPACE::XMLUri const *)arg1,(uint16_t const *)arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    delete[] arg2;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_isValidURI__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *arg1 = (XERCES_CPP_NAMESPACE::XMLUri *) (XERCES_CPP_NAMESPACE::XMLUri *)0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLUri_isValidURI(baseURI,uriStr);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLUri_isValidURI" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLUri const *const""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLUri * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        result = (bool)XERCES_CPP_NAMESPACE::XMLUri::isValidURI((XERCES_CPP_NAMESPACE::XMLUri const *)arg1,(uint16_t const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_isValidURI__SWIG_2) {
  {
    bool arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    bool arg3 ;
    bool result;
    bool val1 ;
    int ecode1 = 0 ;
    bool val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: XMLUri_isValidURI(haveBaseURI,uriStr,bAllowSpaces);");
    }
    ecode1 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "XMLUri_isValidURI" "', argument " "1"" of type '" "bool""'");
    } 
    arg1 = static_cast< bool >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    ecode3 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XMLUri_isValidURI" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
    {
      try 
      {
        result = (bool)XERCES_CPP_NAMESPACE::XMLUri::isValidURI(arg1,(uint16_t const *)arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    delete[] arg2;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_isValidURI__SWIG_3) {
  {
    bool arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    bool result;
    bool val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLUri_isValidURI(haveBaseURI,uriStr);");
    }
    ecode1 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "XMLUri_isValidURI" "', argument " "1"" of type '" "bool""'");
    } 
    arg1 = static_cast< bool >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        result = (bool)XERCES_CPP_NAMESPACE::XMLUri::isValidURI(arg1,(uint16_t const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLUri_isValidURI) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLUri_isValidURI__SWIG_1); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLUri_isValidURI__SWIG_3); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLUri_isValidURI__SWIG_0); return;
    case 4:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLUri_isValidURI__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'XMLUri_isValidURI'");
  XSRETURN(0);
}


XS(_wrap_XMLUri_normalizeURI) {
  {
    XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
    XMLBuffer *arg2 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLUri_normalizeURI(systemURI,normalizedURI);");
    }
    
    // we convert *everything* into a string *including* undef
    arg1 = UTF8_TRANSCODER->Local2XMLString(ST(0));
    
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XMLBuffer,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLUri_normalizeURI" "', argument " "2"" of type '" "XMLBuffer &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLUri_normalizeURI" "', argument " "2"" of type '" "XMLBuffer &""'"); 
    }
    arg2 = reinterpret_cast< XMLBuffer * >(argp2);
    {
      try 
      {
        XERCES_CPP_NAMESPACE::XMLUri::normalizeURI((uint16_t const *)arg1,*arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    delete[] arg1;
    
    
    XSRETURN(argvi);
  fail:
    
    delete[] arg1;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLUri__SWIG_3) {
  {
    XERCES_CPP_NAMESPACE::XMLUri *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_XMLUri();");
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLUri *)new XERCES_CPP_NAMESPACE::XMLUri();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLUri) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLUri__SWIG_3); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLUri__SWIG_2); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLUri__SWIG_0); return;
    case 4:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLUri__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_XMLUri'");
  XSRETURN(0);
}


XS(_wrap_delete_XMLExcepts) {
  {
    XERCES_CPP_NAMESPACE::XMLExcepts *arg1 = (XERCES_CPP_NAMESPACE::XMLExcepts *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLExcepts(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLExcepts, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLExcepts" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLExcepts *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLExcepts * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_XMLException) {
  {
    XERCES_CPP_NAMESPACE::XMLException *arg1 = (XERCES_CPP_NAMESPACE::XMLException *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLException(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLException" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLException *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLException * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLException_getType) {
  {
    XERCES_CPP_NAMESPACE::XMLException *arg1 = (XERCES_CPP_NAMESPACE::XMLException *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLException_getType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLException_getType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLException const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLException * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLException const *)arg1)->getType();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLException_getCode) {
  {
    XERCES_CPP_NAMESPACE::XMLException *arg1 = (XERCES_CPP_NAMESPACE::XMLException *) 0 ;
    XERCES_CPP_NAMESPACE::XMLExcepts::Codes result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLException_getCode(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLException_getCode" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLException const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLException * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLExcepts::Codes)((XERCES_CPP_NAMESPACE::XMLException const *)arg1)->getCode();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLException_getMessage) {
  {
    XERCES_CPP_NAMESPACE::XMLException *arg1 = (XERCES_CPP_NAMESPACE::XMLException *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLException_getMessage(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLException_getMessage" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLException const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLException * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLException const *)arg1)->getMessage();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLException_getSrcFile) {
  {
    XERCES_CPP_NAMESPACE::XMLException *arg1 = (XERCES_CPP_NAMESPACE::XMLException *) 0 ;
    char *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLException_getSrcFile(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLException_getSrcFile" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLException const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLException * >(argp1);
    {
      try 
      {
        result = (char *)((XERCES_CPP_NAMESPACE::XMLException const *)arg1)->getSrcFile();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLException_getSrcLine) {
  {
    XERCES_CPP_NAMESPACE::XMLException *arg1 = (XERCES_CPP_NAMESPACE::XMLException *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLException_getSrcLine(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLException_getSrcLine" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLException const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLException * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLException const *)arg1)->getSrcLine();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLException_getErrorType) {
  {
    XERCES_CPP_NAMESPACE::XMLException *arg1 = (XERCES_CPP_NAMESPACE::XMLException *) 0 ;
    XMLErrorReporter::ErrTypes result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLException_getErrorType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLException_getErrorType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLException const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLException * >(argp1);
    {
      try 
      {
        result = ((XERCES_CPP_NAMESPACE::XMLException const *)arg1)->getErrorType();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj((new XMLErrorReporter::ErrTypes(static_cast< const XMLErrorReporter::ErrTypes& >(result))), SWIGTYPE_p_XMLErrorReporter__ErrTypes, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLException_setPosition) {
  {
    XERCES_CPP_NAMESPACE::XMLException *arg1 = (XERCES_CPP_NAMESPACE::XMLException *) 0 ;
    char *arg2 = (char *) (char *)0 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: XMLException_setPosition(self,file,line);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLException_setPosition" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLException *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLException * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLException_setPosition" "', argument " "2"" of type '" "char const *const""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XMLException_setPosition" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try 
      {
        (arg1)->setPosition((char const *)arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLException_reinitMsgMutex) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: XMLException_reinitMsgMutex();");
    }
    {
      try 
      {
        XERCES_CPP_NAMESPACE::XMLException::reinitMsgMutex();
      } 
      CATCH_XML_EXCEPTION
    }
    
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_XMLException_reinitMsgLoader) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: XMLException_reinitMsgLoader();");
    }
    {
      try 
      {
        XERCES_CPP_NAMESPACE::XMLException::reinitMsgLoader();
      } 
      CATCH_XML_EXCEPTION
    }
    
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_QName__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::QName *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_QName();");
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::QName *)new XERCES_CPP_NAMESPACE::QName();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_QName__SWIG_1) {
  {
    XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    unsigned int arg3 ;
    XERCES_CPP_NAMESPACE::QName *result = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: new_QName(prefix,localPart,uriId);");
    }
    
    // we convert *everything* into a string *including* undef
    arg1 = UTF8_TRANSCODER->Local2XMLString(ST(0));
    
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_QName" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::QName *)new XERCES_CPP_NAMESPACE::QName((XMLCh const *)arg1,(XMLCh const *)arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    delete[] arg1;
    
    
    delete[] arg2;
    
    
    XSRETURN(argvi);
  fail:
    
    delete[] arg1;
    
    
    delete[] arg2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_QName__SWIG_2) {
  {
    XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
    unsigned int arg2 ;
    XERCES_CPP_NAMESPACE::QName *result = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_QName(rawName,uriId);");
    }
    
    // we convert *everything* into a string *including* undef
    arg1 = UTF8_TRANSCODER->Local2XMLString(ST(0));
    
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_QName" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::QName *)new XERCES_CPP_NAMESPACE::QName((XMLCh const *)arg1,arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    delete[] arg1;
    
    
    XSRETURN(argvi);
  fail:
    
    delete[] arg1;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_QName__SWIG_3) {
  {
    XERCES_CPP_NAMESPACE::QName *arg1 = 0 ;
    XERCES_CPP_NAMESPACE::QName *result = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_QName(qname);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_QName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_QName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName const &""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::QName *)new XERCES_CPP_NAMESPACE::QName((XERCES_CPP_NAMESPACE::QName const &)*arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_QName) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_QName__SWIG_0); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_QName__SWIG_3); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_QName__SWIG_2); return;
    case 4:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_QName__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_QName'");
  XSRETURN(0);
}


XS(_wrap_delete_QName) {
  {
    XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_QName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_QName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_QName_getPrefix) {
  {
    XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: QName_getPrefix(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QName_getPrefix" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp1);
    {
      try 
      {
        result = (XMLCh *)(arg1)->getPrefix();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_QName_getLocalPart) {
  {
    XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: QName_getLocalPart(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QName_getLocalPart" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp1);
    {
      try 
      {
        result = (XMLCh *)(arg1)->getLocalPart();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_QName_getURI) {
  {
    XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: QName_getURI(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QName_getURI" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::QName const *)arg1)->getURI();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_QName_getRawName) {
  {
    XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: QName_getRawName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QName_getRawName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp1);
    {
      try 
      {
        result = (XMLCh *)(arg1)->getRawName();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_QName_getMemoryManager) {
  {
    XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
    XERCES_CPP_NAMESPACE::MemoryManager *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: QName_getMemoryManager(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QName_getMemoryManager" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::MemoryManager *)((XERCES_CPP_NAMESPACE::QName const *)arg1)->getMemoryManager();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_QName_setName__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    unsigned int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: QName_setName(self,prefix,localPart,uriId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QName_setName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "QName_setName" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    {
      try 
      {
        (arg1)->setName((XMLCh const *)arg2,(XMLCh const *)arg3,arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_QName_setName__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: QName_setName(self,rawName,uriId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QName_setName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "QName_setName" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try 
      {
        (arg1)->setName((XMLCh const *)arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_QName_setName) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_QName_setName__SWIG_1); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_QName_setName__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'QName_setName'");
  XSRETURN(0);
}


XS(_wrap_QName_setPrefix) {
  {
    XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
    XMLCh *arg2 = (XMLCh *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: QName_setPrefix(self,XMLCh const *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QName_setPrefix" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setPrefix((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_QName_setLocalPart) {
  {
    XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
    XMLCh *arg2 = (XMLCh *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: QName_setLocalPart(self,XMLCh const *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QName_setLocalPart" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setLocalPart((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_QName_setNPrefix) {
  {
    XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
    XMLCh *arg2 = (XMLCh *) 0 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: QName_setNPrefix(self,XMLCh const *,unsigned int const);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QName_setNPrefix" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "QName_setNPrefix" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try 
      {
        (arg1)->setNPrefix((XMLCh const *)arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_QName_setNLocalPart) {
  {
    XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
    XMLCh *arg2 = (XMLCh *) 0 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: QName_setNLocalPart(self,XMLCh const *,unsigned int const);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QName_setNLocalPart" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "QName_setNLocalPart" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try 
      {
        (arg1)->setNLocalPart((XMLCh const *)arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_QName_setURI) {
  {
    XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: QName_setURI(self,unsigned int const);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QName_setURI" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QName_setURI" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        (arg1)->setURI(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_QName_setValues) {
  {
    XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
    XERCES_CPP_NAMESPACE::QName *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: QName_setValues(self,qname);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QName_setValues" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "QName_setValues" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::QName const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "QName_setValues" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::QName const &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp2);
    {
      try 
      {
        (arg1)->setValues((XERCES_CPP_NAMESPACE::QName const &)*arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_QName___eq__) {
  {
    XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
    XERCES_CPP_NAMESPACE::QName *arg2 = 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: QName___eq__(self,XERCES_CPP_NAMESPACE::QName const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QName___eq__" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "QName___eq__" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::QName const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "QName___eq__" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::QName const &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp2);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::QName const *)arg1)->operator ==((XERCES_CPP_NAMESPACE::QName const &)*arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_QName_cleanUp) {
  {
    XERCES_CPP_NAMESPACE::QName *arg1 = (XERCES_CPP_NAMESPACE::QName *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: QName_cleanUp(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QName_cleanUp" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::QName *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp1);
    {
      try 
      {
        (arg1)->cleanUp();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SecurityManager) {
  {
    XERCES_CPP_NAMESPACE::SecurityManager *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_SecurityManager();");
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::SecurityManager *)new XERCES_CPP_NAMESPACE::SecurityManager();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__SecurityManager, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_SecurityManager) {
  {
    XERCES_CPP_NAMESPACE::SecurityManager *arg1 = (XERCES_CPP_NAMESPACE::SecurityManager *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SecurityManager(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SecurityManager, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SecurityManager" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SecurityManager *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SecurityManager * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SecurityManager_setEntityExpansionLimit) {
  {
    XERCES_CPP_NAMESPACE::SecurityManager *arg1 = (XERCES_CPP_NAMESPACE::SecurityManager *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SecurityManager_setEntityExpansionLimit(self,newLimit);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SecurityManager, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecurityManager_setEntityExpansionLimit" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SecurityManager *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SecurityManager * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SecurityManager_setEntityExpansionLimit" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        (arg1)->setEntityExpansionLimit(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SecurityManager_getEntityExpansionLimit) {
  {
    XERCES_CPP_NAMESPACE::SecurityManager *arg1 = (XERCES_CPP_NAMESPACE::SecurityManager *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SecurityManager_getEntityExpansionLimit(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SecurityManager, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecurityManager_getEntityExpansionLimit" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SecurityManager const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SecurityManager * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::SecurityManager const *)arg1)->getEntityExpansionLimit();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_XMLElementDecl) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLElementDecl(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLElementDecl" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_getAttDefList) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    XMLAttDefList *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLElementDecl_getAttDefList(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_getAttDefList" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    {
      try 
      {
        {
          XMLAttDefList &_result_ref = ((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getAttDefList();
          result = (XMLAttDefList *) &_result_ref;
        }
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_getCharDataOpts) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::XMLElementDecl::CharDataOpts result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLElementDecl_getCharDataOpts(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_getCharDataOpts" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLElementDecl::CharDataOpts)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getCharDataOpts();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_hasAttDefs) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLElementDecl_hasAttDefs(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_hasAttDefs" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->hasAttDefs();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_getContentSpec) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::ContentSpecNode *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLElementDecl_getContentSpec(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_getContentSpec" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::ContentSpecNode *)(arg1)->getContentSpec();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentSpecNode, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_setContentSpec) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::ContentSpecNode *arg2 = (XERCES_CPP_NAMESPACE::ContentSpecNode *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLElementDecl_setContentSpec(self,toAdopt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_setContentSpec" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentSpecNode, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLElementDecl_setContentSpec" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::ContentSpecNode *""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::ContentSpecNode * >(argp2);
    {
      try 
      {
        (arg1)->setContentSpec(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_getContentModel) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::XMLContentModel *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLElementDecl_getContentModel(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_getContentModel" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLContentModel *)(arg1)->getContentModel();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLContentModel, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_setContentModel) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::XMLContentModel *arg2 = (XERCES_CPP_NAMESPACE::XMLContentModel *) (XERCES_CPP_NAMESPACE::XMLContentModel *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLElementDecl_setContentModel(self,newModelToAdopt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_setContentModel" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLContentModel, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLElementDecl_setContentModel" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLContentModel *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLContentModel * >(argp2);
    {
      try 
      {
        (arg1)->setContentModel(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_getFormattedContentModel) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLElementDecl_getFormattedContentModel(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_getFormattedContentModel" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getFormattedContentModel();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_getBaseName) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLElementDecl_getBaseName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_getBaseName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)(arg1)->getBaseName();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_getURI) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLElementDecl_getURI(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_getURI" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getURI();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_getElementName) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::QName *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLElementDecl_getElementName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_getElementName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::QName *)(arg1)->getElementName();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_getFullName) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLElementDecl_getFullName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_getFullName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getFullName();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_getCreateReason) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::XMLElementDecl::CreateReasons result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLElementDecl_getCreateReason(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_getCreateReason" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLElementDecl::CreateReasons)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getCreateReason();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_getId) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLElementDecl_getId(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_getId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getId();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_isDeclared) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLElementDecl_isDeclared(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_isDeclared" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->isDeclared();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_isExternal) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLElementDecl_isExternal(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_isExternal" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->isExternal();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_getMemoryManager) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::MemoryManager *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLElementDecl_getMemoryManager(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_getMemoryManager" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::MemoryManager *)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getMemoryManager();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_setElementName__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: XMLElementDecl_setElementName(self,prefix,localPart,uriId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_setElementName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "XMLElementDecl_setElementName" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try 
      {
        (arg1)->setElementName((XMLCh const *)arg2,(XMLCh const *)arg3,arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_setElementName__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: XMLElementDecl_setElementName(self,rawName,uriId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_setElementName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XMLElementDecl_setElementName" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try 
      {
        (arg1)->setElementName((XMLCh const *)arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_setElementName__SWIG_2) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::QName *arg2 = (XERCES_CPP_NAMESPACE::QName *) (XERCES_CPP_NAMESPACE::QName *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLElementDecl_setElementName(self,elementName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_setElementName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLElementDecl_setElementName" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::QName const *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp2);
    {
      try 
      {
        (arg1)->setElementName((XERCES_CPP_NAMESPACE::QName const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_setElementName) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLElementDecl_setElementName__SWIG_2); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLElementDecl_setElementName__SWIG_1); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLElementDecl_setElementName__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'XMLElementDecl_setElementName'");
  XSRETURN(0);
}


XS(_wrap_XMLElementDecl_setCreateReason) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::XMLElementDecl::CreateReasons arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLElementDecl_setCreateReason(self,newReason);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_setCreateReason" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLElementDecl_setCreateReason" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl::CreateReasons""'");
    } 
    arg2 = static_cast< XERCES_CPP_NAMESPACE::XMLElementDecl::CreateReasons >(val2);
    {
      try 
      {
        (arg1)->setCreateReason(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_setId) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLElementDecl_setId(self,newId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_setId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLElementDecl_setId" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        (arg1)->setId(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_setExternalElemDeclaration) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLElementDecl_setExternalElemDeclaration(self,aValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_setExternalElemDeclaration" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLElementDecl_setExternalElemDeclaration" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    {
      try 
      {
        (arg1)->setExternalElemDeclaration(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_getObjectType) {
  {
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::XMLElementDecl::objectType result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLElementDecl_getObjectType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_getObjectType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLElementDecl::objectType)((XERCES_CPP_NAMESPACE::XMLElementDecl const *)arg1)->getObjectType();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_storeElementDecl) {
  {
    XSerializeEngine *arg1 = 0 ;
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg2 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) (XERCES_CPP_NAMESPACE::XMLElementDecl *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLElementDecl_storeElementDecl(serEng,element);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_XSerializeEngine,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_storeElementDecl" "', argument " "1"" of type '" "XSerializeEngine &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLElementDecl_storeElementDecl" "', argument " "1"" of type '" "XSerializeEngine &""'"); 
    }
    arg1 = reinterpret_cast< XSerializeEngine * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLElementDecl_storeElementDecl" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp2);
    {
      try 
      {
        XERCES_CPP_NAMESPACE::XMLElementDecl::storeElementDecl(*arg1,arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLElementDecl_loadElementDecl) {
  {
    XSerializeEngine *arg1 = 0 ;
    XERCES_CPP_NAMESPACE::XMLElementDecl *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLElementDecl_loadElementDecl(serEng);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_XSerializeEngine,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLElementDecl_loadElementDecl" "', argument " "1"" of type '" "XSerializeEngine &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLElementDecl_loadElementDecl" "', argument " "1"" of type '" "XSerializeEngine &""'"); 
    }
    arg1 = reinterpret_cast< XSerializeEngine * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLElementDecl *)XERCES_CPP_NAMESPACE::XMLElementDecl::loadElementDecl(*arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_XMLEntityDecl) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLEntityDecl(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLEntityDecl" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_getDeclaredInIntSubset) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLEntityDecl_getDeclaredInIntSubset(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_getDeclaredInIntSubset" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getDeclaredInIntSubset();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_getIsParameter) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLEntityDecl_getIsParameter(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_getIsParameter" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getIsParameter();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_getIsSpecialChar) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLEntityDecl_getIsSpecialChar(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_getIsSpecialChar" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getIsSpecialChar();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_getId) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLEntityDecl_getId(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_getId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getId();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_getName) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLEntityDecl_getName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_getName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getName();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_getNotationName) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLEntityDecl_getNotationName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_getNotationName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getNotationName();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_getPublicId) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLEntityDecl_getPublicId(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_getPublicId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getPublicId();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_getSystemId) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLEntityDecl_getSystemId(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_getSystemId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getSystemId();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_getBaseURI) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLEntityDecl_getBaseURI(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_getBaseURI" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getBaseURI();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_getValue) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLEntityDecl_getValue(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_getValue" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getValue();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_getValueLen) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLEntityDecl_getValueLen(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_getValueLen" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getValueLen();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_isExternal) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLEntityDecl_isExternal(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_isExternal" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->isExternal();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_isUnparsed) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLEntityDecl_isUnparsed(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_isUnparsed" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->isUnparsed();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_getMemoryManager) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    XERCES_CPP_NAMESPACE::MemoryManager *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLEntityDecl_getMemoryManager(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_getMemoryManager" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::MemoryManager *)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getMemoryManager();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_setName) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLEntityDecl_setName(self,entName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_setName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setName((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_setNotationName) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLEntityDecl_setNotationName(self,newName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_setNotationName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setNotationName((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_setPublicId) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLEntityDecl_setPublicId(self,newId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_setPublicId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setPublicId((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_setSystemId) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLEntityDecl_setSystemId(self,newId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_setSystemId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setSystemId((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_setBaseURI) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLEntityDecl_setBaseURI(self,newId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_setBaseURI" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setBaseURI((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_setValue) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLEntityDecl_setValue(self,newValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_setValue" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setValue((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_setId) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLEntityDecl_setId(self,newId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_setId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLEntityDecl_setId" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        (arg1)->setId(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLEntityDecl_getKey) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLEntityDecl_getKey(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLEntityDecl_getKey" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLEntityDecl const *)arg1)->getKey();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLNotationDecl__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::XMLNotationDecl *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_XMLNotationDecl();");
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLNotationDecl *)new XERCES_CPP_NAMESPACE::XMLNotationDecl();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLNotationDecl__SWIG_1) {
  {
    XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLNotationDecl *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: new_XMLNotationDecl(notName,pubId,sysId,baseURI);");
    }
    
    // we convert *everything* into a string *including* undef
    arg1 = UTF8_TRANSCODER->Local2XMLString(ST(0));
    
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLNotationDecl *)new XERCES_CPP_NAMESPACE::XMLNotationDecl((XMLCh const *)arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    delete[] arg1;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    XSRETURN(argvi);
  fail:
    
    delete[] arg1;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLNotationDecl__SWIG_2) {
  {
    XMLCh *arg1 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLNotationDecl *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: new_XMLNotationDecl(notName,pubId,sysId);");
    }
    
    // we convert *everything* into a string *including* undef
    arg1 = UTF8_TRANSCODER->Local2XMLString(ST(0));
    
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLNotationDecl *)new XERCES_CPP_NAMESPACE::XMLNotationDecl((XMLCh const *)arg1,(XMLCh const *)arg2,(XMLCh const *)arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    delete[] arg1;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    XSRETURN(argvi);
  fail:
    
    delete[] arg1;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLNotationDecl) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLNotationDecl__SWIG_0); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLNotationDecl__SWIG_2); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLNotationDecl__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_XMLNotationDecl'");
  XSRETURN(0);
}


XS(_wrap_delete_XMLNotationDecl) {
  {
    XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLNotationDecl(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLNotationDecl" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLNotationDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLNotationDecl * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLNotationDecl_getId) {
  {
    XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLNotationDecl_getId(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLNotationDecl_getId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLNotationDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLNotationDecl * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLNotationDecl const *)arg1)->getId();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLNotationDecl_getName) {
  {
    XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLNotationDecl_getName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLNotationDecl_getName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLNotationDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLNotationDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLNotationDecl const *)arg1)->getName();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLNotationDecl_getPublicId) {
  {
    XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLNotationDecl_getPublicId(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLNotationDecl_getPublicId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLNotationDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLNotationDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLNotationDecl const *)arg1)->getPublicId();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLNotationDecl_getSystemId) {
  {
    XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLNotationDecl_getSystemId(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLNotationDecl_getSystemId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLNotationDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLNotationDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLNotationDecl const *)arg1)->getSystemId();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLNotationDecl_getBaseURI) {
  {
    XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLNotationDecl_getBaseURI(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLNotationDecl_getBaseURI" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLNotationDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLNotationDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLNotationDecl const *)arg1)->getBaseURI();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLNotationDecl_getNameSpaceId) {
  {
    XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLNotationDecl_getNameSpaceId(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLNotationDecl_getNameSpaceId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLNotationDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLNotationDecl * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLNotationDecl const *)arg1)->getNameSpaceId();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLNotationDecl_getMemoryManager) {
  {
    XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
    XERCES_CPP_NAMESPACE::MemoryManager *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLNotationDecl_getMemoryManager(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLNotationDecl_getMemoryManager" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLNotationDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLNotationDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::MemoryManager *)((XERCES_CPP_NAMESPACE::XMLNotationDecl const *)arg1)->getMemoryManager();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLNotationDecl_setId) {
  {
    XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLNotationDecl_setId(self,newId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLNotationDecl_setId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLNotationDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLNotationDecl * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLNotationDecl_setId" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        (arg1)->setId(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLNotationDecl_setName) {
  {
    XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLNotationDecl_setName(self,notName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLNotationDecl_setName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLNotationDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLNotationDecl * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setName((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLNotationDecl_setPublicId) {
  {
    XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLNotationDecl_setPublicId(self,newId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLNotationDecl_setPublicId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLNotationDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLNotationDecl * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setPublicId((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLNotationDecl_setSystemId) {
  {
    XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLNotationDecl_setSystemId(self,newId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLNotationDecl_setSystemId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLNotationDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLNotationDecl * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setSystemId((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLNotationDecl_setBaseURI) {
  {
    XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLNotationDecl_setBaseURI(self,newId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLNotationDecl_setBaseURI" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLNotationDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLNotationDecl * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setBaseURI((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLNotationDecl_setNameSpaceId) {
  {
    XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLNotationDecl_setNameSpaceId(self,newId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLNotationDecl_setNameSpaceId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLNotationDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLNotationDecl * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLNotationDecl_setNameSpaceId" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        (arg1)->setNameSpaceId(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLNotationDecl_getKey) {
  {
    XERCES_CPP_NAMESPACE::XMLNotationDecl *arg1 = (XERCES_CPP_NAMESPACE::XMLNotationDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLNotationDecl_getKey(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLNotationDecl_getKey" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLNotationDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLNotationDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLNotationDecl const *)arg1)->getKey();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_XMLAttDefList) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLAttDefList(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLAttDefList" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDefList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDefList * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDefList_isEmpty) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttDefList_isEmpty(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDefList_isEmpty" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDefList const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDefList * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLAttDefList const *)arg1)->isEmpty();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDefList_findAttDef__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
    unsigned long arg2 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: XMLAttDefList_findAttDef(self,uriID,attName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDefList_findAttDef" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDefList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDefList * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttDefList_findAttDef" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttDef *)(arg1)->findAttDef(arg2,(XMLCh const *)arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 | SWIG_SHADOW); argvi++ ;
    
    
    
    delete[] arg3;
    
    XSRETURN(argvi);
  fail:
    
    
    
    delete[] arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDefList_findAttDef__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: XMLAttDefList_findAttDef(self,attURI,attName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDefList_findAttDef" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDefList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDefList * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttDef *)(arg1)->findAttDef((XMLCh const *)arg2,(XMLCh const *)arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDefList_findAttDef) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLAttDefList_findAttDef__SWIG_0); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLAttDefList_findAttDef__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'XMLAttDefList_findAttDef'");
  XSRETURN(0);
}


XS(_wrap_XMLAttDefList_getAttDefCount) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttDefList_getAttDefCount(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDefList_getAttDefCount" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDefList const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDefList * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLAttDefList const *)arg1)->getAttDefCount();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDefList_getAttDef) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
    unsigned int arg2 ;
    XERCES_CPP_NAMESPACE::XMLAttDef *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLAttDefList_getAttDef(self,index);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDefList_getAttDef" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDefList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDefList * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttDefList_getAttDef" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        {
          XERCES_CPP_NAMESPACE::XMLAttDef &_result_ref = (arg1)->getAttDef(arg2);
          result = (XERCES_CPP_NAMESPACE::XMLAttDef *) &_result_ref;
        }
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDefList_getMemoryManager) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDefList *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDefList *) 0 ;
    XERCES_CPP_NAMESPACE::MemoryManager *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttDefList_getMemoryManager(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDefList_getMemoryManager" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDefList const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDefList * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::MemoryManager *)((XERCES_CPP_NAMESPACE::XMLAttDefList const *)arg1)->getMemoryManager();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_getAttTypeString) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg1 ;
    XMLCh *result = 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttDef_getAttTypeString(attrType);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "XMLAttDef_getAttTypeString" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg1 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val1);
    {
      try 
      {
        result = (XMLCh *)XERCES_CPP_NAMESPACE::XMLAttDef::getAttTypeString(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_getDefAttTypeString) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes arg1 ;
    XMLCh *result = 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttDef_getDefAttTypeString(attrType);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "XMLAttDef_getDefAttTypeString" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes""'");
    } 
    arg1 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes >(val1);
    {
      try 
      {
        result = (XMLCh *)XERCES_CPP_NAMESPACE::XMLAttDef::getDefAttTypeString(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_XMLAttDef) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLAttDef(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLAttDef" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_getFullName) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttDef_getFullName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDef_getFullName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getFullName();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_reset) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttDef_reset(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDef_reset" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    {
      try 
      {
        (arg1)->reset();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_getDefaultType) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttDef_getDefaultType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDef_getDefaultType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getDefaultType();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_getEnumeration) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttDef_getEnumeration(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDef_getEnumeration" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getEnumeration();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_getId) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttDef_getId(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDef_getId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getId();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_getType) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttDef_getType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDef_getType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getType();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_getValue) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttDef_getValue(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDef_getValue" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getValue();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_getCreateReason) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::CreateReasons result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttDef_getCreateReason(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDef_getCreateReason" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttDef::CreateReasons)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getCreateReason();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_isExternal) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttDef_isExternal(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDef_isExternal" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->isExternal();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_getMemoryManager) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    XERCES_CPP_NAMESPACE::MemoryManager *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttDef_getMemoryManager(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDef_getMemoryManager" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::MemoryManager *)((XERCES_CPP_NAMESPACE::XMLAttDef const *)arg1)->getMemoryManager();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_setDefaultType) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLAttDef_setDefaultType(self,newValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDef_setDefaultType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttDef_setDefaultType" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes""'");
    } 
    arg2 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes >(val2);
    {
      try 
      {
        (arg1)->setDefaultType(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_setId) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLAttDef_setId(self,newId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDef_setId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttDef_setId" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        (arg1)->setId(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_setType) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLAttDef_setType(self,newValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDef_setType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttDef_setType" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg2 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val2);
    {
      try 
      {
        (arg1)->setType(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_setValue) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLAttDef_setValue(self,newValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDef_setValue" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setValue((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_setEnumeration) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLAttDef_setEnumeration(self,newValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDef_setEnumeration" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setEnumeration((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_setCreateReason) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::CreateReasons arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLAttDef_setCreateReason(self,newReason);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDef_setCreateReason" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttDef_setCreateReason" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::CreateReasons""'");
    } 
    arg2 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::CreateReasons >(val2);
    {
      try 
      {
        (arg1)->setCreateReason(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttDef_setExternalAttDeclaration) {
  {
    XERCES_CPP_NAMESPACE::XMLAttDef *arg1 = (XERCES_CPP_NAMESPACE::XMLAttDef *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLAttDef_setExternalAttDeclaration(self,aValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttDef_setExternalAttDeclaration" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttDef_setExternalAttDeclaration" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    {
      try 
      {
        (arg1)->setExternalAttDeclaration(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_XMLValidator) {
  {
    XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLValidator(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLValidator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLValidator *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLValidator * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLValidator_requiresNamespaces) {
  {
    XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLValidator_requiresNamespaces(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLValidator_requiresNamespaces" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLValidator * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLValidator const *)arg1)->requiresNamespaces();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLValidator_getGrammar) {
  {
    XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
    XERCES_CPP_NAMESPACE::Grammar *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLValidator_getGrammar(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLValidator_getGrammar" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLValidator * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::Grammar *)((XERCES_CPP_NAMESPACE::XMLValidator const *)arg1)->getGrammar();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, SWIG_as_voidptrptr(&result)), 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLValidator_setGrammar) {
  {
    XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
    XERCES_CPP_NAMESPACE::Grammar *arg2 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLValidator_setGrammar(self,aGrammar);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLValidator_setGrammar" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLValidator *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLValidator * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLValidator_setGrammar" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::Grammar *""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::Grammar * >(argp2);
    {
      try 
      {
        (arg1)->setGrammar(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLValidator_handlesDTD) {
  {
    XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLValidator_handlesDTD(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLValidator_handlesDTD" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLValidator * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLValidator const *)arg1)->handlesDTD();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLValidator_handlesSchema) {
  {
    XERCES_CPP_NAMESPACE::XMLValidator *arg1 = (XERCES_CPP_NAMESPACE::XMLValidator *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLValidator_handlesSchema(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLValidator_handlesSchema" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLValidator * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLValidator const *)arg1)->handlesSchema();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_Grammar) {
  {
    XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_Grammar(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Grammar" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::Grammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::Grammar * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Grammar_getGrammarType) {
  {
    XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
    XERCES_CPP_NAMESPACE::Grammar::GrammarType result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Grammar_getGrammarType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grammar_getGrammarType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::Grammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::Grammar * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::Grammar::GrammarType)((XERCES_CPP_NAMESPACE::Grammar const *)arg1)->getGrammarType();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Grammar_getTargetNamespace) {
  {
    XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Grammar_getTargetNamespace(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grammar_getTargetNamespace" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::Grammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::Grammar * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::Grammar const *)arg1)->getTargetNamespace();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Grammar_getValidated) {
  {
    XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Grammar_getValidated(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grammar_getValidated" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::Grammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::Grammar * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::Grammar const *)arg1)->getValidated();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Grammar_setGrammarDescription) {
  {
    XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
    XERCES_CPP_NAMESPACE::XMLGrammarDescription *arg2 = (XERCES_CPP_NAMESPACE::XMLGrammarDescription *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Grammar_setGrammarDescription(self,XERCES_CPP_NAMESPACE::XMLGrammarDescription *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grammar_setGrammarDescription" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::Grammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::Grammar * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grammar_setGrammarDescription" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLGrammarDescription *""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLGrammarDescription * >(argp2);
    {
      try 
      {
        (arg1)->setGrammarDescription(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Grammar_getGrammarDescription) {
  {
    XERCES_CPP_NAMESPACE::Grammar *arg1 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
    XERCES_CPP_NAMESPACE::XMLGrammarDescription *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Grammar_getGrammarDescription(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grammar_getGrammarDescription" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::Grammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::Grammar * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLGrammarDescription *)((XERCES_CPP_NAMESPACE::Grammar const *)arg1)->getGrammarDescription();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, SWIG_as_voidptrptr(&result)), 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_XMLGrammarDescription) {
  {
    XERCES_CPP_NAMESPACE::XMLGrammarDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLGrammarDescription *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLGrammarDescription(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLGrammarDescription" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLGrammarDescription *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLGrammarDescription * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLGrammarDescription_getGrammarType) {
  {
    XERCES_CPP_NAMESPACE::XMLGrammarDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLGrammarDescription *) 0 ;
    XERCES_CPP_NAMESPACE::Grammar::GrammarType result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLGrammarDescription_getGrammarType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLGrammarDescription_getGrammarType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLGrammarDescription const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLGrammarDescription * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::Grammar::GrammarType)((XERCES_CPP_NAMESPACE::XMLGrammarDescription const *)arg1)->getGrammarType();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLGrammarDescription_getGrammarKey) {
  {
    XERCES_CPP_NAMESPACE::XMLGrammarDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLGrammarDescription *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLGrammarDescription_getGrammarKey(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLGrammarDescription_getGrammarKey" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLGrammarDescription const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLGrammarDescription * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLGrammarDescription const *)arg1)->getGrammarKey();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_XMLDTDDescription) {
  {
    XERCES_CPP_NAMESPACE::XMLDTDDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLDTDDescription *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLDTDDescription(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDTDDescription, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLDTDDescription" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDTDDescription *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDTDDescription * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDTDDescription_getGrammarType) {
  {
    XERCES_CPP_NAMESPACE::XMLDTDDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLDTDDescription *) 0 ;
    XERCES_CPP_NAMESPACE::Grammar::GrammarType result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLDTDDescription_getGrammarType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDTDDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDTDDescription_getGrammarType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDTDDescription const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDTDDescription * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::Grammar::GrammarType)((XERCES_CPP_NAMESPACE::XMLDTDDescription const *)arg1)->getGrammarType();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDTDDescription_getRootName) {
  {
    XERCES_CPP_NAMESPACE::XMLDTDDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLDTDDescription *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLDTDDescription_getRootName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDTDDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDTDDescription_getRootName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDTDDescription const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDTDDescription * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLDTDDescription const *)arg1)->getRootName();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDTDDescription_getSystemId) {
  {
    XERCES_CPP_NAMESPACE::XMLDTDDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLDTDDescription *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLDTDDescription_getSystemId(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDTDDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDTDDescription_getSystemId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDTDDescription const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDTDDescription * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLDTDDescription const *)arg1)->getSystemId();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDTDDescription_setRootName) {
  {
    XERCES_CPP_NAMESPACE::XMLDTDDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLDTDDescription *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLDTDDescription_setRootName(self,XMLCh const *const);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDTDDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDTDDescription_setRootName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDTDDescription *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDTDDescription * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setRootName((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDTDDescription_setSystemId) {
  {
    XERCES_CPP_NAMESPACE::XMLDTDDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLDTDDescription *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLDTDDescription_setSystemId(self,XMLCh const *const);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDTDDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDTDDescription_setSystemId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDTDDescription *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDTDDescription * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setSystemId((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_BaseXMLChVector__SWIG_0) {
  {
    unsigned int arg1 ;
    bool arg2 ;
    XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    arg3 = XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager;
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: new_BaseXMLChVector(maxElems,adoptElems,manager);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BaseXMLChVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BaseXMLChVector" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (items > 2) {
      res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_BaseXMLChVector" "', argument " "3"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
      }
      arg3 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp3);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *)new XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh >(arg1,arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_BaseXMLChVector__SWIG_1) {
  {
    unsigned int arg1 ;
    bool arg2 ;
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_BaseXMLChVector(maxElems,adoptElems);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BaseXMLChVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BaseXMLChVector" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *)new XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh >(arg1,arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_BaseXMLChVector__SWIG_2) {
  {
    unsigned int arg1 ;
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_BaseXMLChVector(maxElems);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BaseXMLChVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *)new XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh >(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_BaseXMLChVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if ((items >= 2) && (items <= 3)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 2) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(ST(2), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_3;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_BaseXMLChVector__SWIG_2); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_BaseXMLChVector__SWIG_1); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_BaseXMLChVector__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_BaseXMLChVector'");
  XSRETURN(0);
}


XS(_wrap_delete_BaseXMLChVector) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_BaseXMLChVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BaseXMLChVector" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLChVector_addElement) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) 0 ;
    uint16_t *arg2 = (uint16_t *) (uint16_t *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: BaseXMLChVector_addElement(self,toAdd);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLChVector_addElement" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->addElement(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLChVector_setElementAt) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) 0 ;
    uint16_t *arg2 = (uint16_t *) (uint16_t *)0 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: BaseXMLChVector_setElementAt(self,toSet,setAt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLChVector_setElementAt" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseXMLChVector_setElementAt" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try 
      {
        (arg1)->setElementAt(arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLChVector_insertElementAt) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) 0 ;
    uint16_t *arg2 = (uint16_t *) (uint16_t *)0 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: BaseXMLChVector_insertElementAt(self,toInsert,insertAt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLChVector_insertElementAt" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseXMLChVector_insertElementAt" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try 
      {
        (arg1)->insertElementAt(arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLChVector_orphanElementAt) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) 0 ;
    unsigned int arg2 ;
    uint16_t *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: BaseXMLChVector_orphanElementAt(self,orphanAt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLChVector_orphanElementAt" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseXMLChVector_orphanElementAt" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        result = (uint16_t *)(arg1)->orphanElementAt(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLChVector_removeAllElements) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: BaseXMLChVector_removeAllElements(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLChVector_removeAllElements" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > * >(argp1);
    {
      try 
      {
        (arg1)->removeAllElements();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLChVector_removeElementAt) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: BaseXMLChVector_removeElementAt(self,removeAt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLChVector_removeElementAt" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseXMLChVector_removeElementAt" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        (arg1)->removeElementAt(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLChVector_removeLastElement) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: BaseXMLChVector_removeLastElement(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLChVector_removeLastElement" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > * >(argp1);
    {
      try 
      {
        (arg1)->removeLastElement();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLChVector_containsElement) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) 0 ;
    uint16_t *arg2 = (uint16_t *) (uint16_t *)0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: BaseXMLChVector_containsElement(self,toCheck);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLChVector_containsElement" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        result = (bool)(arg1)->containsElement((uint16_t const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLChVector_cleanup) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: BaseXMLChVector_cleanup(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLChVector_cleanup" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > * >(argp1);
    {
      try 
      {
        (arg1)->cleanup();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLChVector_reinitialize) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: BaseXMLChVector_reinitialize(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLChVector_reinitialize" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > * >(argp1);
    {
      try 
      {
        (arg1)->reinitialize();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLChVector_curCapacity) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: BaseXMLChVector_curCapacity(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLChVector_curCapacity" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > const *)arg1)->curCapacity();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLChVector_elementAt__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) 0 ;
    unsigned int arg2 ;
    uint16_t *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: BaseXMLChVector_elementAt(self,getAt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLChVector_elementAt" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseXMLChVector_elementAt" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        result = (uint16_t *)((XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > const *)arg1)->elementAt(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLChVector_elementAt__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) 0 ;
    unsigned int arg2 ;
    uint16_t *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: BaseXMLChVector_elementAt(self,getAt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLChVector_elementAt" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseXMLChVector_elementAt" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        result = (uint16_t *)(arg1)->elementAt(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLChVector_elementAt) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_BaseXMLChVector_elementAt__SWIG_1); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_BaseXMLChVector_elementAt__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'BaseXMLChVector_elementAt'");
  XSRETURN(0);
}


XS(_wrap_BaseXMLChVector_size) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: BaseXMLChVector_size(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLChVector_size" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > const *)arg1)->size();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLChVector_getMemoryManager) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) 0 ;
    XERCES_CPP_NAMESPACE::MemoryManager *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: BaseXMLChVector_getMemoryManager(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLChVector_getMemoryManager" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::MemoryManager *)((XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > const *)arg1)->getMemoryManager();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLChVector_ensureExtraCapacity) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: BaseXMLChVector_ensureExtraCapacity(self,length);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLChVector_ensureExtraCapacity" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseXMLChVector_ensureExtraCapacity" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        (arg1)->ensureExtraCapacity(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLChVector__SWIG_0) {
  {
    unsigned int arg1 ;
    bool arg2 ;
    XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    arg3 = XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager;
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: new_XMLChVector(maxElems,adoptElems,manager);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLChVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_XMLChVector" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (items > 2) {
      res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_XMLChVector" "', argument " "3"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
      }
      arg3 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp3);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *)new XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh >(arg1,arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLChVector__SWIG_1) {
  {
    unsigned int arg1 ;
    bool arg2 ;
    XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_XMLChVector(maxElems,adoptElems);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLChVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_XMLChVector" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *)new XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh >(arg1,arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLChVector__SWIG_2) {
  {
    unsigned int arg1 ;
    XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_XMLChVector(maxElems);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLChVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *)new XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh >(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLChVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if ((items >= 2) && (items <= 3)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 2) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(ST(2), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_3;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLChVector__SWIG_2); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLChVector__SWIG_1); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLChVector__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_XMLChVector'");
  XSRETURN(0);
}


XS(_wrap_delete_XMLChVector) {
  {
    XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLChVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLChVector" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLChVector_setElementAt) {
  {
    XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *) 0 ;
    uint16_t *arg2 = (uint16_t *) (uint16_t *)0 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: XMLChVector_setElementAt(self,toSet,setAt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLChVector_setElementAt" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XMLChVector_setElementAt" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try 
      {
        (arg1)->setElementAt(arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLChVector_removeAllElements) {
  {
    XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLChVector_removeAllElements(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLChVector_removeAllElements" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > * >(argp1);
    {
      try 
      {
        (arg1)->removeAllElements();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLChVector_removeElementAt) {
  {
    XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLChVector_removeElementAt(self,removeAt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLChVector_removeElementAt" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLChVector_removeElementAt" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        (arg1)->removeElementAt(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLChVector_removeLastElement) {
  {
    XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLChVector_removeLastElement(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLChVector_removeLastElement" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > * >(argp1);
    {
      try 
      {
        (arg1)->removeLastElement();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLChVector_cleanup) {
  {
    XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *arg1 = (XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLChVector_cleanup(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLChVector_cleanup" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > * >(argp1);
    {
      try 
      {
        (arg1)->cleanup();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_XMLSchemaDescription) {
  {
    XERCES_CPP_NAMESPACE::XMLSchemaDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLSchemaDescription *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLSchemaDescription(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLSchemaDescription" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLSchemaDescription *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLSchemaDescription * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLSchemaDescription_getGrammarType) {
  {
    XERCES_CPP_NAMESPACE::XMLSchemaDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLSchemaDescription *) 0 ;
    XERCES_CPP_NAMESPACE::Grammar::GrammarType result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLSchemaDescription_getGrammarType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLSchemaDescription_getGrammarType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLSchemaDescription const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLSchemaDescription * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::Grammar::GrammarType)((XERCES_CPP_NAMESPACE::XMLSchemaDescription const *)arg1)->getGrammarType();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLSchemaDescription_getContextType) {
  {
    XERCES_CPP_NAMESPACE::XMLSchemaDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLSchemaDescription *) 0 ;
    XERCES_CPP_NAMESPACE::XMLSchemaDescription::ContextType result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLSchemaDescription_getContextType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLSchemaDescription_getContextType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLSchemaDescription const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLSchemaDescription * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLSchemaDescription::ContextType)((XERCES_CPP_NAMESPACE::XMLSchemaDescription const *)arg1)->getContextType();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLSchemaDescription_getTargetNamespace) {
  {
    XERCES_CPP_NAMESPACE::XMLSchemaDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLSchemaDescription *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLSchemaDescription_getTargetNamespace(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLSchemaDescription_getTargetNamespace" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLSchemaDescription const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLSchemaDescription * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLSchemaDescription const *)arg1)->getTargetNamespace();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLSchemaDescription_getLocationHints) {
  {
    XERCES_CPP_NAMESPACE::XMLSchemaDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLSchemaDescription *) 0 ;
    XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLSchemaDescription_getLocationHints(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLSchemaDescription_getLocationHints" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLSchemaDescription const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLSchemaDescription * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *)((XERCES_CPP_NAMESPACE::XMLSchemaDescription const *)arg1)->getLocationHints();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLSchemaDescription_getTriggeringComponent) {
  {
    XERCES_CPP_NAMESPACE::XMLSchemaDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLSchemaDescription *) 0 ;
    XERCES_CPP_NAMESPACE::QName *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLSchemaDescription_getTriggeringComponent(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLSchemaDescription_getTriggeringComponent" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLSchemaDescription const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLSchemaDescription * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::QName *)((XERCES_CPP_NAMESPACE::XMLSchemaDescription const *)arg1)->getTriggeringComponent();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLSchemaDescription_getEnclosingElementName) {
  {
    XERCES_CPP_NAMESPACE::XMLSchemaDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLSchemaDescription *) 0 ;
    XERCES_CPP_NAMESPACE::QName *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLSchemaDescription_getEnclosingElementName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLSchemaDescription_getEnclosingElementName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLSchemaDescription const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLSchemaDescription * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::QName *)((XERCES_CPP_NAMESPACE::XMLSchemaDescription const *)arg1)->getEnclosingElementName();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLSchemaDescription_getAttributes) {
  {
    XERCES_CPP_NAMESPACE::XMLSchemaDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLSchemaDescription *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLSchemaDescription_getAttributes(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLSchemaDescription_getAttributes" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLSchemaDescription const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLSchemaDescription * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttDef *)((XERCES_CPP_NAMESPACE::XMLSchemaDescription const *)arg1)->getAttributes();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLSchemaDescription_setContextType) {
  {
    XERCES_CPP_NAMESPACE::XMLSchemaDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLSchemaDescription *) 0 ;
    XERCES_CPP_NAMESPACE::XMLSchemaDescription::ContextType arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLSchemaDescription_setContextType(self,XERCES_CPP_NAMESPACE::XMLSchemaDescription::ContextType);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLSchemaDescription_setContextType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLSchemaDescription *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLSchemaDescription * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLSchemaDescription_setContextType" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLSchemaDescription::ContextType""'");
    } 
    arg2 = static_cast< XERCES_CPP_NAMESPACE::XMLSchemaDescription::ContextType >(val2);
    {
      try 
      {
        (arg1)->setContextType(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLSchemaDescription_setTargetNamespace) {
  {
    XERCES_CPP_NAMESPACE::XMLSchemaDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLSchemaDescription *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLSchemaDescription_setTargetNamespace(self,XMLCh const *const);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLSchemaDescription_setTargetNamespace" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLSchemaDescription *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLSchemaDescription * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setTargetNamespace((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLSchemaDescription_setLocationHints) {
  {
    XERCES_CPP_NAMESPACE::XMLSchemaDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLSchemaDescription *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLSchemaDescription_setLocationHints(self,XMLCh const *const);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLSchemaDescription_setLocationHints" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLSchemaDescription *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLSchemaDescription * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setLocationHints((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLSchemaDescription_setTriggeringComponent) {
  {
    XERCES_CPP_NAMESPACE::XMLSchemaDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLSchemaDescription *) 0 ;
    XERCES_CPP_NAMESPACE::QName *arg2 = (XERCES_CPP_NAMESPACE::QName *) (XERCES_CPP_NAMESPACE::QName *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLSchemaDescription_setTriggeringComponent(self,XERCES_CPP_NAMESPACE::QName *const);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLSchemaDescription_setTriggeringComponent" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLSchemaDescription *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLSchemaDescription * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLSchemaDescription_setTriggeringComponent" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::QName *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp2);
    {
      try 
      {
        (arg1)->setTriggeringComponent(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLSchemaDescription_setEnclosingElementName) {
  {
    XERCES_CPP_NAMESPACE::XMLSchemaDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLSchemaDescription *) 0 ;
    XERCES_CPP_NAMESPACE::QName *arg2 = (XERCES_CPP_NAMESPACE::QName *) (XERCES_CPP_NAMESPACE::QName *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLSchemaDescription_setEnclosingElementName(self,XERCES_CPP_NAMESPACE::QName *const);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLSchemaDescription_setEnclosingElementName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLSchemaDescription *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLSchemaDescription * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLSchemaDescription_setEnclosingElementName" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::QName *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::QName * >(argp2);
    {
      try 
      {
        (arg1)->setEnclosingElementName(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLSchemaDescription_setAttributes) {
  {
    XERCES_CPP_NAMESPACE::XMLSchemaDescription *arg1 = (XERCES_CPP_NAMESPACE::XMLSchemaDescription *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef *arg2 = (XERCES_CPP_NAMESPACE::XMLAttDef *) (XERCES_CPP_NAMESPACE::XMLAttDef *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLSchemaDescription_setAttributes(self,XERCES_CPP_NAMESPACE::XMLAttDef *const);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLSchemaDescription_setAttributes" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLSchemaDescription *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLSchemaDescription * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLSchemaDescription_setAttributes" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttDef * >(argp2);
    {
      try 
      {
        (arg1)->setAttributes(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_DTDElementDecl) {
  {
    XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_DTDElementDecl(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DTDElementDecl" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDElementDecl * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDecl_getAttDefList) {
  {
    XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttDefList *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDElementDecl_getAttDefList(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDecl_getAttDefList" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDElementDecl * >(argp1);
    {
      try 
      {
        {
          XERCES_CPP_NAMESPACE::XMLAttDefList &_result_ref = ((XERCES_CPP_NAMESPACE::DTDElementDecl const *)arg1)->getAttDefList();
          result = (XERCES_CPP_NAMESPACE::XMLAttDefList *) &_result_ref;
        }
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDecl_getCharDataOpts) {
  {
    XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::XMLElementDecl::CharDataOpts result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDElementDecl_getCharDataOpts(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDecl_getCharDataOpts" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLElementDecl::CharDataOpts)((XERCES_CPP_NAMESPACE::DTDElementDecl const *)arg1)->getCharDataOpts();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDecl_hasAttDefs) {
  {
    XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDElementDecl_hasAttDefs(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDecl_hasAttDefs" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDElementDecl * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::DTDElementDecl const *)arg1)->hasAttDefs();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDecl_getContentSpec) {
  {
    XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::ContentSpecNode *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDElementDecl_getContentSpec(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDecl_getContentSpec" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::ContentSpecNode *)(arg1)->getContentSpec();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentSpecNode, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDecl_setContentSpec) {
  {
    XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::ContentSpecNode *arg2 = (XERCES_CPP_NAMESPACE::ContentSpecNode *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DTDElementDecl_setContentSpec(self,toAdopt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDecl_setContentSpec" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDElementDecl * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentSpecNode, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTDElementDecl_setContentSpec" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::ContentSpecNode *""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::ContentSpecNode * >(argp2);
    {
      try 
      {
        (arg1)->setContentSpec(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDecl_getContentModel) {
  {
    XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::XMLContentModel *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDElementDecl_getContentModel(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDecl_getContentModel" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLContentModel *)(arg1)->getContentModel();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLContentModel, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDecl_setContentModel) {
  {
    XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::XMLContentModel *arg2 = (XERCES_CPP_NAMESPACE::XMLContentModel *) (XERCES_CPP_NAMESPACE::XMLContentModel *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DTDElementDecl_setContentModel(self,newModelToAdopt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDecl_setContentModel" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDElementDecl * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLContentModel, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTDElementDecl_setContentModel" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLContentModel *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLContentModel * >(argp2);
    {
      try 
      {
        (arg1)->setContentModel(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDecl_getFormattedContentModel) {
  {
    XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDElementDecl_getFormattedContentModel(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDecl_getFormattedContentModel" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDElementDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::DTDElementDecl const *)arg1)->getFormattedContentModel();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDecl_getKey) {
  {
    XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDElementDecl_getKey(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDecl_getKey" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDElementDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::DTDElementDecl const *)arg1)->getKey();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDecl_getAttDef) {
  {
    XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    DTDAttDef *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DTDElementDecl_getAttDef(self,attName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDecl_getAttDef" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDElementDecl * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        result = (DTDAttDef *)(arg1)->getAttDef((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef, 0 | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDecl_getModelType) {
  {
    XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::DTDElementDecl::ModelTypes result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDElementDecl_getModelType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDecl_getModelType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::DTDElementDecl::ModelTypes)((XERCES_CPP_NAMESPACE::DTDElementDecl const *)arg1)->getModelType();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDecl_addAttDef) {
  {
    XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
    DTDAttDef *arg2 = (DTDAttDef *) (DTDAttDef *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DTDElementDecl_addAttDef(self,toAdd);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDecl_addAttDef" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDElementDecl * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTDElementDecl_addAttDef" "', argument " "2"" of type '" "DTDAttDef *const""'"); 
    }
    arg2 = reinterpret_cast< DTDAttDef * >(argp2);
    {
      try 
      {
        (arg1)->addAttDef(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDecl_setModelType) {
  {
    XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::DTDElementDecl::ModelTypes arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DTDElementDecl_setModelType(self,toSet);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDecl_setModelType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDElementDecl * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTDElementDecl_setModelType" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::DTDElementDecl::ModelTypes""'");
    } 
    arg2 = static_cast< XERCES_CPP_NAMESPACE::DTDElementDecl::ModelTypes >(val2);
    {
      try 
      {
        (arg1)->setModelType(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDecl_getObjectType) {
  {
    XERCES_CPP_NAMESPACE::DTDElementDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::XMLElementDecl::objectType result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDElementDecl_getObjectType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDecl_getObjectType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLElementDecl::objectType)((XERCES_CPP_NAMESPACE::DTDElementDecl const *)arg1)->getObjectType();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DTDElementDeclEnumerator__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDElementDecl > *) (XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDElementDecl > *)0 ;
    XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    arg2 = XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager;
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: new_DTDElementDeclEnumerator(toEnum,manager);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DTDElementDeclEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDElementDecl > *const""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDElementDecl > * >(argp1);
    if (items > 1) {
      res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DTDElementDeclEnumerator" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
      }
      arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp2);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *)new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl >(arg1,arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DTDElementDeclEnumerator__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDElementDecl > *) (XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDElementDecl > *)0 ;
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_DTDElementDeclEnumerator(toEnum);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DTDElementDeclEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDElementDecl > *const""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDElementDecl > * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *)new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl >(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DTDElementDeclEnumerator__SWIG_2) {
  {
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *arg1 = 0 ;
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *result = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_DTDElementDeclEnumerator(toCopy);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DTDElementDeclEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DTDElementDeclEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > const &""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *)new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl >((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > const &)*arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DTDElementDeclEnumerator) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((items >= 1) && (items <= 2)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 1) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_DTDElementDeclEnumerator__SWIG_0); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_DTDElementDeclEnumerator__SWIG_1); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_DTDElementDeclEnumerator__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_DTDElementDeclEnumerator'");
  XSRETURN(0);
}


XS(_wrap_delete_DTDElementDeclEnumerator) {
  {
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_DTDElementDeclEnumerator(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DTDElementDeclEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDeclEnumerator_hasMoreElements) {
  {
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDElementDeclEnumerator_hasMoreElements(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDeclEnumerator_hasMoreElements" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > const *)arg1)->hasMoreElements();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDeclEnumerator_nextElement) {
  {
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *) 0 ;
    XERCES_CPP_NAMESPACE::DTDElementDecl *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDElementDeclEnumerator_nextElement(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDeclEnumerator_nextElement" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > * >(argp1);
    {
      try 
      {
        {
          XERCES_CPP_NAMESPACE::DTDElementDecl &_result_ref = (arg1)->nextElement();
          result = (XERCES_CPP_NAMESPACE::DTDElementDecl *) &_result_ref;
        }
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDeclEnumerator_Reset) {
  {
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDElementDeclEnumerator_Reset(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDeclEnumerator_Reset" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > * >(argp1);
    {
      try 
      {
        (arg1)->Reset();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDElementDeclEnumerator_size) {
  {
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *) 0 ;
    int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDElementDeclEnumerator_size(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDElementDeclEnumerator_size" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > * >(argp1);
    {
      try 
      {
        result = (int)((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > const *)arg1)->size();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_DTDEntityDecl) {
  {
    XERCES_CPP_NAMESPACE::DTDEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_DTDEntityDecl(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DTDEntityDecl" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDEntityDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDEntityDecl * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDEntityDecl_getDeclaredInIntSubset) {
  {
    XERCES_CPP_NAMESPACE::DTDEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDEntityDecl_getDeclaredInIntSubset(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDEntityDecl_getDeclaredInIntSubset" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDEntityDecl * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::DTDEntityDecl const *)arg1)->getDeclaredInIntSubset();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDEntityDecl_getIsParameter) {
  {
    XERCES_CPP_NAMESPACE::DTDEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDEntityDecl_getIsParameter(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDEntityDecl_getIsParameter" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDEntityDecl * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::DTDEntityDecl const *)arg1)->getIsParameter();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDEntityDecl_getIsSpecialChar) {
  {
    XERCES_CPP_NAMESPACE::DTDEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDEntityDecl_getIsSpecialChar(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDEntityDecl_getIsSpecialChar" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDEntityDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDEntityDecl * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::DTDEntityDecl const *)arg1)->getIsSpecialChar();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDEntityDecl_setDeclaredInIntSubset) {
  {
    XERCES_CPP_NAMESPACE::DTDEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DTDEntityDecl_setDeclaredInIntSubset(self,newValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDEntityDecl_setDeclaredInIntSubset" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDEntityDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDEntityDecl * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTDEntityDecl_setDeclaredInIntSubset" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    {
      try 
      {
        (arg1)->setDeclaredInIntSubset(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDEntityDecl_setIsParameter) {
  {
    XERCES_CPP_NAMESPACE::DTDEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DTDEntityDecl_setIsParameter(self,newValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDEntityDecl_setIsParameter" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDEntityDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDEntityDecl * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTDEntityDecl_setIsParameter" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    {
      try 
      {
        (arg1)->setIsParameter(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDEntityDecl_setIsSpecialChar) {
  {
    XERCES_CPP_NAMESPACE::DTDEntityDecl *arg1 = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DTDEntityDecl_setIsSpecialChar(self,newValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDEntityDecl_setIsSpecialChar" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDEntityDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDEntityDecl * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTDEntityDecl_setIsSpecialChar" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    {
      try 
      {
        (arg1)->setIsSpecialChar(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DTDEntityDeclEnumerator__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) (XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *)0 ;
    XERCES_CPP_NAMESPACE::MemoryManager *arg2 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    arg2 = XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager;
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: new_DTDEntityDeclEnumerator(toEnum,manager);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DTDEntityDeclEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *const""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > * >(argp1);
    if (items > 1) {
      res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DTDEntityDeclEnumerator" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
      }
      arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp2);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *)new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl >(arg1,arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DTDEntityDeclEnumerator__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) (XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *)0 ;
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_DTDEntityDeclEnumerator(toEnum);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DTDEntityDeclEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *const""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *)new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl >(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DTDEntityDeclEnumerator__SWIG_2) {
  {
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *arg1 = 0 ;
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *result = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_DTDEntityDeclEnumerator(toCopy);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DTDEntityDeclEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DTDEntityDeclEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > const &""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *)new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl >((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > const &)*arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DTDEntityDeclEnumerator) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((items >= 1) && (items <= 2)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 1) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_DTDEntityDeclEnumerator__SWIG_0); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_DTDEntityDeclEnumerator__SWIG_1); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_DTDEntityDeclEnumerator__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_DTDEntityDeclEnumerator'");
  XSRETURN(0);
}


XS(_wrap_delete_DTDEntityDeclEnumerator) {
  {
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_DTDEntityDeclEnumerator(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DTDEntityDeclEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDEntityDeclEnumerator_hasMoreElements) {
  {
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDEntityDeclEnumerator_hasMoreElements(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDEntityDeclEnumerator_hasMoreElements" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > const *)arg1)->hasMoreElements();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDEntityDeclEnumerator_nextElement) {
  {
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) 0 ;
    XERCES_CPP_NAMESPACE::DTDEntityDecl *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDEntityDeclEnumerator_nextElement(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDEntityDeclEnumerator_nextElement" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > * >(argp1);
    {
      try 
      {
        {
          XERCES_CPP_NAMESPACE::DTDEntityDecl &_result_ref = (arg1)->nextElement();
          result = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) &_result_ref;
        }
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDEntityDeclEnumerator_Reset) {
  {
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDEntityDeclEnumerator_Reset(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDEntityDeclEnumerator_Reset" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > * >(argp1);
    {
      try 
      {
        (arg1)->Reset();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDEntityDeclEnumerator_size) {
  {
    XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *arg1 = (XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) 0 ;
    int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDEntityDeclEnumerator_size(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDEntityDeclEnumerator_size" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > * >(argp1);
    {
      try 
      {
        result = (int)((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > const *)arg1)->size();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_DTDAttDefList) {
  {
    XERCES_CPP_NAMESPACE::DTDAttDefList *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDefList *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_DTDAttDefList(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DTDAttDefList" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDAttDefList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDAttDefList * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDAttDefList_isEmpty) {
  {
    XERCES_CPP_NAMESPACE::DTDAttDefList *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDefList *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDAttDefList_isEmpty(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDAttDefList_isEmpty" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDAttDefList const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDAttDefList * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::DTDAttDefList const *)arg1)->isEmpty();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDAttDefList_findAttDef__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::DTDAttDefList *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDefList *) 0 ;
    unsigned long arg2 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: DTDAttDefList_findAttDef(self,uriID,attName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDAttDefList_findAttDef" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDAttDefList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDAttDefList * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTDAttDefList_findAttDef" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttDef *)(arg1)->findAttDef(arg2,(XMLCh const *)arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 | SWIG_SHADOW); argvi++ ;
    
    
    
    delete[] arg3;
    
    XSRETURN(argvi);
  fail:
    
    
    
    delete[] arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDAttDefList_findAttDef__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::DTDAttDefList *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDefList *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: DTDAttDefList_findAttDef(self,attURI,attName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDAttDefList_findAttDef" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDAttDefList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDAttDefList * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttDef *)(arg1)->findAttDef((XMLCh const *)arg2,(XMLCh const *)arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDAttDefList_findAttDef) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_DTDAttDefList_findAttDef__SWIG_0); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_DTDAttDefList_findAttDef__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'DTDAttDefList_findAttDef'");
  XSRETURN(0);
}


XS(_wrap_DTDAttDefList_getAttDefCount) {
  {
    XERCES_CPP_NAMESPACE::DTDAttDefList *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDefList *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDAttDefList_getAttDefCount(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDAttDefList_getAttDefCount" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDAttDefList const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDAttDefList * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::DTDAttDefList const *)arg1)->getAttDefCount();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDAttDefList_getAttDef) {
  {
    XERCES_CPP_NAMESPACE::DTDAttDefList *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDefList *) 0 ;
    unsigned int arg2 ;
    XERCES_CPP_NAMESPACE::XMLAttDef *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DTDAttDefList_getAttDef(self,index);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDAttDefList_getAttDef" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDAttDefList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDAttDefList * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTDAttDefList_getAttDef" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        {
          XERCES_CPP_NAMESPACE::XMLAttDef &_result_ref = (arg1)->getAttDef(arg2);
          result = (XERCES_CPP_NAMESPACE::XMLAttDef *) &_result_ref;
        }
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_DTDAttDef) {
  {
    XERCES_CPP_NAMESPACE::DTDAttDef *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDef *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_DTDAttDef(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DTDAttDef" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDAttDef * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDAttDef_getFullName) {
  {
    XERCES_CPP_NAMESPACE::DTDAttDef *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDef *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDAttDef_getFullName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDAttDef_getFullName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDAttDef const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDAttDef * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::DTDAttDef const *)arg1)->getFullName();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDAttDef_reset) {
  {
    XERCES_CPP_NAMESPACE::DTDAttDef *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDef *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDAttDef_reset(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDAttDef_reset" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDAttDef * >(argp1);
    {
      try 
      {
        (arg1)->reset();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDAttDef_getElemId) {
  {
    XERCES_CPP_NAMESPACE::DTDAttDef *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDef *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDAttDef_getElemId(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDAttDef_getElemId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDAttDef const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDAttDef * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::DTDAttDef const *)arg1)->getElemId();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDAttDef_setElemId) {
  {
    XERCES_CPP_NAMESPACE::DTDAttDef *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDef *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DTDAttDef_setElemId(self,newId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDAttDef_setElemId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDAttDef * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTDAttDef_setElemId" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        (arg1)->setElemId(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDAttDef_setName) {
  {
    XERCES_CPP_NAMESPACE::DTDAttDef *arg1 = (XERCES_CPP_NAMESPACE::DTDAttDef *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DTDAttDef_setName(self,newName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDAttDef_setName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDAttDef * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setName((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DTDGrammar) {
  {
    XERCES_CPP_NAMESPACE::DTDGrammar *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_DTDGrammar();");
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::DTDGrammar *)new XERCES_CPP_NAMESPACE::DTDGrammar();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_DTDGrammar) {
  {
    XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_DTDGrammar(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DTDGrammar" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDGrammar * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDGrammar_getGrammarType) {
  {
    XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
    XERCES_CPP_NAMESPACE::Grammar::GrammarType result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDGrammar_getGrammarType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDGrammar_getGrammarType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDGrammar * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::Grammar::GrammarType)((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->getGrammarType();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDGrammar_getTargetNamespace) {
  {
    XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDGrammar_getTargetNamespace(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDGrammar_getTargetNamespace" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDGrammar * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->getTargetNamespace();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDGrammar_getValidated) {
  {
    XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDGrammar_getValidated(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDGrammar_getValidated" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDGrammar * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->getValidated();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDGrammar_getEntityDecl) {
  {
    XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::DTDEntityDecl *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DTDGrammar_getEntityDecl(self,entName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDGrammar_getEntityDecl" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDGrammar * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::DTDEntityDecl *)(arg1)->getEntityDecl((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, 0 | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDGrammar_getEntityDeclPool) {
  {
    XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
    XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDGrammar_getEntityDeclPool(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDGrammar_getEntityDeclPool" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDGrammar * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *)(arg1)->getEntityDeclPool();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDGrammar_getElemEnumerator) {
  {
    XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
    SwigValueWrapper<XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > > result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDGrammar_getElemEnumerator(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDGrammar_getElemEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDGrammar * >(argp1);
    {
      try 
      {
        result = ((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->getElemEnumerator();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj((new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl >(static_cast< const XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl >& >(result))), SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDGrammar_getEntityEnumerator) {
  {
    XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
    SwigValueWrapper<XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > > result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDGrammar_getEntityEnumerator(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDGrammar_getEntityEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDGrammar * >(argp1);
    {
      try 
      {
        result = ((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->getEntityEnumerator();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj((new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl >(static_cast< const XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl >& >(result))), SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDGrammar_getNotationEnumerator) {
  {
    XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
    SwigValueWrapper<XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::XMLNotationDecl > > result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDGrammar_getNotationEnumerator(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDGrammar_getNotationEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDGrammar * >(argp1);
    {
      try 
      {
        result = ((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->getNotationEnumerator();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj((new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::XMLNotationDecl >(static_cast< const XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::XMLNotationDecl >& >(result))), SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__XMLNotationDecl_t, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDGrammar_setGrammarDescription) {
  {
    XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
    XERCES_CPP_NAMESPACE::XMLGrammarDescription *arg2 = (XERCES_CPP_NAMESPACE::XMLGrammarDescription *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DTDGrammar_setGrammarDescription(self,XERCES_CPP_NAMESPACE::XMLGrammarDescription *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDGrammar_setGrammarDescription" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDGrammar * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTDGrammar_setGrammarDescription" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLGrammarDescription *""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLGrammarDescription * >(argp2);
    {
      try 
      {
        (arg1)->setGrammarDescription(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDGrammar_getGrammarDescription) {
  {
    XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
    XERCES_CPP_NAMESPACE::XMLGrammarDescription *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDGrammar_getGrammarDescription(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDGrammar_getGrammarDescription" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDGrammar * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLGrammarDescription *)((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->getGrammarDescription();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, SWIG_as_voidptrptr(&result)), 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDGrammar_putEntityDecl) {
  {
    XERCES_CPP_NAMESPACE::DTDGrammar *arg1 = (XERCES_CPP_NAMESPACE::DTDGrammar *) 0 ;
    XERCES_CPP_NAMESPACE::DTDEntityDecl *arg2 = (XERCES_CPP_NAMESPACE::DTDEntityDecl *) (XERCES_CPP_NAMESPACE::DTDEntityDecl *)0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DTDGrammar_putEntityDecl(self,entityDecl);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDGrammar_putEntityDecl" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDGrammar * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTDGrammar_putEntityDecl" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::DTDEntityDecl *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDEntityDecl * >(argp2);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::DTDGrammar const *)arg1)->putEntityDecl(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDGrammar_reinitDfltEntities) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: DTDGrammar_reinitDfltEntities();");
    }
    {
      try 
      {
        XERCES_CPP_NAMESPACE::DTDGrammar::reinitDfltEntities();
      } 
      CATCH_XML_EXCEPTION
    }
    
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_DTDValidator__SWIG_0) {
  {
    XMLErrorReporter *arg1 = (XMLErrorReporter *) (XMLErrorReporter *)0 ;
    XERCES_CPP_NAMESPACE::DTDValidator *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_DTDValidator(errReporter);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XMLErrorReporter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DTDValidator" "', argument " "1"" of type '" "XMLErrorReporter *const""'"); 
    }
    arg1 = reinterpret_cast< XMLErrorReporter * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::DTDValidator *)new XERCES_CPP_NAMESPACE::DTDValidator(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DTDValidator__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::DTDValidator *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_DTDValidator();");
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::DTDValidator *)new XERCES_CPP_NAMESPACE::DTDValidator();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_DTDValidator) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XMLErrorReporter, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_DTDValidator__SWIG_1); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_DTDValidator__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_DTDValidator'");
  XSRETURN(0);
}


XS(_wrap_delete_DTDValidator) {
  {
    XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_DTDValidator(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DTDValidator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDValidator *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDValidator * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDValidator_requiresNamespaces) {
  {
    XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDValidator_requiresNamespaces(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDValidator_requiresNamespaces" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDValidator * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::DTDValidator const *)arg1)->requiresNamespaces();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDValidator_getGrammar) {
  {
    XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
    XERCES_CPP_NAMESPACE::Grammar *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDValidator_getGrammar(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDValidator_getGrammar" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDValidator * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::Grammar *)((XERCES_CPP_NAMESPACE::DTDValidator const *)arg1)->getGrammar();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, SWIG_as_voidptrptr(&result)), 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDValidator_setGrammar) {
  {
    XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
    XERCES_CPP_NAMESPACE::Grammar *arg2 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DTDValidator_setGrammar(self,aGrammar);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDValidator_setGrammar" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDValidator *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDValidator * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTDValidator_setGrammar" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::Grammar *""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::Grammar * >(argp2);
    {
      try 
      {
        (arg1)->setGrammar(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDValidator_handlesDTD) {
  {
    XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDValidator_handlesDTD(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDValidator_handlesDTD" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDValidator * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::DTDValidator const *)arg1)->handlesDTD();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DTDValidator_handlesSchema) {
  {
    XERCES_CPP_NAMESPACE::DTDValidator *arg1 = (XERCES_CPP_NAMESPACE::DTDValidator *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DTDValidator_handlesSchema(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTDValidator_handlesSchema" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DTDValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::DTDValidator * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::DTDValidator const *)arg1)->handlesSchema();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_SchemaElementDecl) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SchemaElementDecl(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SchemaElementDecl" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getAttDefList) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttDefList *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getAttDefList(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getAttDefList" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        {
          XERCES_CPP_NAMESPACE::XMLAttDefList &_result_ref = ((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getAttDefList();
          result = (XERCES_CPP_NAMESPACE::XMLAttDefList *) &_result_ref;
        }
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getCharDataOpts) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::XMLElementDecl::CharDataOpts result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getCharDataOpts(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getCharDataOpts" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLElementDecl::CharDataOpts)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getCharDataOpts();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_hasAttDefs) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_hasAttDefs(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_hasAttDefs" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->hasAttDefs();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getContentSpec) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::ContentSpecNode *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getContentSpec(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getContentSpec" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::ContentSpecNode *)(arg1)->getContentSpec();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentSpecNode, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_setContentSpec) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::ContentSpecNode *arg2 = (XERCES_CPP_NAMESPACE::ContentSpecNode *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaElementDecl_setContentSpec(self,toAdopt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_setContentSpec" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__ContentSpecNode, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaElementDecl_setContentSpec" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::ContentSpecNode *""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::ContentSpecNode * >(argp2);
    {
      try 
      {
        (arg1)->setContentSpec(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getContentModel) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::XMLContentModel *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getContentModel(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getContentModel" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLContentModel *)(arg1)->getContentModel();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLContentModel, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_setContentModel) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::XMLContentModel *arg2 = (XERCES_CPP_NAMESPACE::XMLContentModel *) (XERCES_CPP_NAMESPACE::XMLContentModel *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaElementDecl_setContentModel(self,newModelToAdopt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_setContentModel" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLContentModel, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaElementDecl_setContentModel" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLContentModel *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLContentModel * >(argp2);
    {
      try 
      {
        (arg1)->setContentModel(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getFormattedContentModel) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getFormattedContentModel(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getFormattedContentModel" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getFormattedContentModel();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getAttDef) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    int arg3 ;
    SchemaAttDef *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: SchemaElementDecl_getAttDef(self,baseName,uriId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getAttDef" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SchemaElementDecl_getAttDef" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try 
      {
        result = (SchemaAttDef *)(arg1)->getAttDef((XMLCh const *)arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getAttWildCard) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    SchemaAttDef *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getAttWildCard(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getAttWildCard" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (SchemaAttDef *)(arg1)->getAttWildCard();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getModelType) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::SchemaElementDecl::ModelTypes result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getModelType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getModelType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::SchemaElementDecl::ModelTypes)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getModelType();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getPSVIScope) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    PSVIDefs::PSVIScope result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getPSVIScope(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getPSVIScope" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = ((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getPSVIScope();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj((new PSVIDefs::PSVIScope(static_cast< const PSVIDefs::PSVIScope& >(result))), SWIGTYPE_p_PSVIDefs__PSVIScope, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getDatatypeValidator) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    DatatypeValidator *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getDatatypeValidator(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getDatatypeValidator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (DatatypeValidator *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getDatatypeValidator();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getEnclosingScope) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getEnclosingScope(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getEnclosingScope" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getEnclosingScope();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getFinalSet) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getFinalSet(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getFinalSet" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (int)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getFinalSet();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getBlockSet) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getBlockSet(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getBlockSet" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (int)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getBlockSet();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getMiscFlags) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getMiscFlags(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getMiscFlags" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (int)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getMiscFlags();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getDefaultValue) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getDefaultValue(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getDefaultValue" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getDefaultValue();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getComplexTypeInfo) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    ComplexTypeInfo *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getComplexTypeInfo(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getComplexTypeInfo" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (ComplexTypeInfo *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getComplexTypeInfo();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__ComplexTypeInfo, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_isGlobalDecl) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_isGlobalDecl(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_isGlobalDecl" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->isGlobalDecl();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getSubstitutionGroupElem) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::SchemaElementDecl *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getSubstitutionGroupElem(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getSubstitutionGroupElem" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::SchemaElementDecl *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getSubstitutionGroupElem();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_setModelType) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::SchemaElementDecl::ModelTypes arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaElementDecl_setModelType(self,toSet);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_setModelType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SchemaElementDecl_setModelType" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl::ModelTypes""'");
    } 
    arg2 = static_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl::ModelTypes >(val2);
    {
      try 
      {
        (arg1)->setModelType(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_setPSVIScope) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    PSVIDefs::PSVIScope arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaElementDecl_setPSVIScope(self,toSet);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_setPSVIScope" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_PSVIDefs__PSVIScope,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaElementDecl_setPSVIScope" "', argument " "2"" of type '" "PSVIDefs::PSVIScope const""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchemaElementDecl_setPSVIScope" "', argument " "2"" of type '" "PSVIDefs::PSVIScope const""'");
      } else {
        arg2 = *(reinterpret_cast< PSVIDefs::PSVIScope * >(argp2));
      }
    }
    {
      try 
      {
        (arg1)->setPSVIScope(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_setDatatypeValidator) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    DatatypeValidator *arg2 = (DatatypeValidator *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaElementDecl_setDatatypeValidator(self,newDatatypeValidator);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_setDatatypeValidator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaElementDecl_setDatatypeValidator" "', argument " "2"" of type '" "DatatypeValidator *""'"); 
    }
    arg2 = reinterpret_cast< DatatypeValidator * >(argp2);
    {
      try 
      {
        (arg1)->setDatatypeValidator(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_setEnclosingScope) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaElementDecl_setEnclosingScope(self,enclosingScope);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_setEnclosingScope" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SchemaElementDecl_setEnclosingScope" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        (arg1)->setEnclosingScope(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_setFinalSet) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaElementDecl_setFinalSet(self,finalSet);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_setFinalSet" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SchemaElementDecl_setFinalSet" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try 
      {
        (arg1)->setFinalSet(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_setBlockSet) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaElementDecl_setBlockSet(self,blockSet);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_setBlockSet" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SchemaElementDecl_setBlockSet" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try 
      {
        (arg1)->setBlockSet(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_setMiscFlags) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaElementDecl_setMiscFlags(self,flags);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_setMiscFlags" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SchemaElementDecl_setMiscFlags" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try 
      {
        (arg1)->setMiscFlags(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_setDefaultValue) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaElementDecl_setDefaultValue(self,value);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_setDefaultValue" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setDefaultValue((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_setComplexTypeInfo) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    ComplexTypeInfo *arg2 = (ComplexTypeInfo *) (ComplexTypeInfo *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaElementDecl_setComplexTypeInfo(self,typeInfo);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_setComplexTypeInfo" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__ComplexTypeInfo, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaElementDecl_setComplexTypeInfo" "', argument " "2"" of type '" "ComplexTypeInfo *const""'"); 
    }
    arg2 = reinterpret_cast< ComplexTypeInfo * >(argp2);
    {
      try 
      {
        (arg1)->setComplexTypeInfo(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_setAttWildCard) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    SchemaAttDef *arg2 = (SchemaAttDef *) (SchemaAttDef *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaElementDecl_setAttWildCard(self,attWildCard);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_setAttWildCard" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaElementDecl_setAttWildCard" "', argument " "2"" of type '" "SchemaAttDef *const""'"); 
    }
    arg2 = reinterpret_cast< SchemaAttDef * >(argp2);
    {
      try 
      {
        (arg1)->setAttWildCard(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_setSubstitutionGroupElem) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg2 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) (XERCES_CPP_NAMESPACE::SchemaElementDecl *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaElementDecl_setSubstitutionGroupElem(self,elemDecl);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_setSubstitutionGroupElem" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaElementDecl_setSubstitutionGroupElem" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp2);
    {
      try 
      {
        (arg1)->setSubstitutionGroupElem(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_addIdentityConstraint) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    IdentityConstraint *arg2 = (IdentityConstraint *) (IdentityConstraint *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaElementDecl_addIdentityConstraint(self,ic);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_addIdentityConstraint" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_IdentityConstraint, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaElementDecl_addIdentityConstraint" "', argument " "2"" of type '" "IdentityConstraint *const""'"); 
    }
    arg2 = reinterpret_cast< IdentityConstraint * >(argp2);
    {
      try 
      {
        (arg1)->addIdentityConstraint(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getIdentityConstraintCount) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getIdentityConstraintCount(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getIdentityConstraintCount" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getIdentityConstraintCount();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getIdentityConstraintAt) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    unsigned int arg2 ;
    IdentityConstraint *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaElementDecl_getIdentityConstraintAt(self,index);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getIdentityConstraintAt" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SchemaElementDecl_getIdentityConstraintAt" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        result = (IdentityConstraint *)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getIdentityConstraintAt(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IdentityConstraint, 0 | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDecl_getObjectType) {
  {
    XERCES_CPP_NAMESPACE::SchemaElementDecl *arg1 = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) 0 ;
    XERCES_CPP_NAMESPACE::XMLElementDecl::objectType result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDecl_getObjectType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDecl_getObjectType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaElementDecl const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaElementDecl * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLElementDecl::objectType)((XERCES_CPP_NAMESPACE::SchemaElementDecl const *)arg1)->getObjectType();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SchemaElementDeclEnumerator__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) (XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *)0 ;
    bool arg2 ;
    XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    arg3 = XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager;
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: new_SchemaElementDeclEnumerator(toEnum,adopt,manager);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SchemaElementDeclEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *const""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SchemaElementDeclEnumerator" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (items > 2) {
      res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SchemaElementDeclEnumerator" "', argument " "3"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
      }
      arg3 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp3);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *)new XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl >(arg1,arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SchemaElementDeclEnumerator__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) (XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *)0 ;
    bool arg2 ;
    XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_SchemaElementDeclEnumerator(toEnum,adopt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SchemaElementDeclEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *const""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SchemaElementDeclEnumerator" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *)new XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl >(arg1,arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SchemaElementDeclEnumerator__SWIG_2) {
  {
    XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) (XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *)0 ;
    XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_SchemaElementDeclEnumerator(toEnum);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SchemaElementDeclEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *const""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *)new XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl >(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_SchemaElementDeclEnumerator) {
  {
    XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SchemaElementDeclEnumerator(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SchemaElementDeclEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SchemaElementDeclEnumerator__SWIG_3) {
  {
    XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = 0 ;
    XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *result = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_SchemaElementDeclEnumerator(XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > const &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SchemaElementDeclEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SchemaElementDeclEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > const &""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *)new XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl >((XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > const &)*arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SchemaElementDeclEnumerator) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if ((items >= 2) && (items <= 3)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 2) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(ST(2), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_3;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_SchemaElementDeclEnumerator__SWIG_2); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_SchemaElementDeclEnumerator__SWIG_3); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_SchemaElementDeclEnumerator__SWIG_0); return;
    case 4:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_SchemaElementDeclEnumerator__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_SchemaElementDeclEnumerator'");
  XSRETURN(0);
}


XS(_wrap_SchemaElementDeclEnumerator_hasMoreElements) {
  {
    XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDeclEnumerator_hasMoreElements(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDeclEnumerator_hasMoreElements" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > const *)arg1)->hasMoreElements();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDeclEnumerator_nextElement) {
  {
    XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) 0 ;
    XERCES_CPP_NAMESPACE::SchemaElementDecl *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDeclEnumerator_nextElement(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDeclEnumerator_nextElement" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > * >(argp1);
    {
      try 
      {
        {
          XERCES_CPP_NAMESPACE::SchemaElementDecl &_result_ref = (arg1)->nextElement();
          result = (XERCES_CPP_NAMESPACE::SchemaElementDecl *) &_result_ref;
        }
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDeclEnumerator_Reset) {
  {
    XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDeclEnumerator_Reset(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDeclEnumerator_Reset" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > * >(argp1);
    {
      try 
      {
        (arg1)->Reset();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDeclEnumerator_size) {
  {
    XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) 0 ;
    int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDeclEnumerator_size(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDeclEnumerator_size" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > * >(argp1);
    {
      try 
      {
        result = (int)((XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > const *)arg1)->size();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDeclEnumerator_resetKey) {
  {
    XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDeclEnumerator_resetKey(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDeclEnumerator_resetKey" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > * >(argp1);
    {
      try 
      {
        (arg1)->resetKey();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDeclEnumerator_nextElementKey) {
  {
    XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) 0 ;
    void **arg2 = 0 ;
    int *arg3 = 0 ;
    int *arg4 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: SchemaElementDeclEnumerator_nextElementKey(self,void *&,int &,int &);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDeclEnumerator_nextElementKey" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_p_void,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaElementDeclEnumerator_nextElementKey" "', argument " "2"" of type '" "void *&""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchemaElementDeclEnumerator_nextElementKey" "', argument " "2"" of type '" "void *&""'"); 
    }
    arg2 = reinterpret_cast< void ** >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_int,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SchemaElementDeclEnumerator_nextElementKey" "', argument " "3"" of type '" "int &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchemaElementDeclEnumerator_nextElementKey" "', argument " "3"" of type '" "int &""'"); 
    }
    arg3 = reinterpret_cast< int * >(argp3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4, SWIGTYPE_p_int,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SchemaElementDeclEnumerator_nextElementKey" "', argument " "4"" of type '" "int &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchemaElementDeclEnumerator_nextElementKey" "', argument " "4"" of type '" "int &""'"); 
    }
    arg4 = reinterpret_cast< int * >(argp4);
    {
      try 
      {
        (arg1)->nextElementKey(*arg2,*arg3,*arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaElementDeclEnumerator_hasMoreKeys) {
  {
    XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *arg1 = (XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaElementDeclEnumerator_hasMoreKeys(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaElementDeclEnumerator_hasMoreKeys" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > const *)arg1)->hasMoreKeys();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SchemaGrammar) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_SchemaGrammar();");
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::SchemaGrammar *)new XERCES_CPP_NAMESPACE::SchemaGrammar();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_SchemaGrammar) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SchemaGrammar(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SchemaGrammar" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_getGrammarType) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    XERCES_CPP_NAMESPACE::Grammar::GrammarType result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaGrammar_getGrammarType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_getGrammarType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::Grammar::GrammarType)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getGrammarType();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_getTargetNamespace) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaGrammar_getTargetNamespace(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_getTargetNamespace" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getTargetNamespace();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_getValidated) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaGrammar_getValidated(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_getValidated" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getValidated();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_getElemEnumerator) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    SwigValueWrapper<XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > > result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaGrammar_getElemEnumerator(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_getElemEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      try 
      {
        result = ((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getElemEnumerator();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj((new XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl >(static_cast< const XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl >& >(result))), SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_getNotationEnumerator) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    SwigValueWrapper<XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::XMLNotationDecl > > result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaGrammar_getNotationEnumerator(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_getNotationEnumerator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      try 
      {
        result = ((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getNotationEnumerator();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj((new XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::XMLNotationDecl >(static_cast< const XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::XMLNotationDecl >& >(result))), SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__XMLNotationDecl_t, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_getAttributeDeclRegistry) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    RefHashTableOf<XERCES_CPP_NAMESPACE::XMLAttDef > *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaGrammar_getAttributeDeclRegistry(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_getAttributeDeclRegistry" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      try 
      {
        result = (RefHashTableOf<XERCES_CPP_NAMESPACE::XMLAttDef > *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getAttributeDeclRegistry();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XMLAttDef_t, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_getComplexTypeRegistry) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    RefHashTableOf<XERCES_CPP_NAMESPACE::ComplexTypeInfo > *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaGrammar_getComplexTypeRegistry(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_getComplexTypeRegistry" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      try 
      {
        result = (RefHashTableOf<XERCES_CPP_NAMESPACE::ComplexTypeInfo > *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getComplexTypeRegistry();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__ComplexTypeInfo_t, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_getGroupInfoRegistry) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    RefHashTableOf<XERCES_CPP_NAMESPACE::XercesGroupInfo > *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaGrammar_getGroupInfoRegistry(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_getGroupInfoRegistry" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      try 
      {
        result = (RefHashTableOf<XERCES_CPP_NAMESPACE::XercesGroupInfo > *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getGroupInfoRegistry();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesGroupInfo_t, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_getAttGroupInfoRegistry) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    RefHashTableOf<XERCES_CPP_NAMESPACE::XercesAttGroupInfo > *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaGrammar_getAttGroupInfoRegistry(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_getAttGroupInfoRegistry" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      try 
      {
        result = (RefHashTableOf<XERCES_CPP_NAMESPACE::XercesAttGroupInfo > *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getAttGroupInfoRegistry();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesAttGroupInfo_t, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_getDatatypeRegistry) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    DatatypeValidatorFactory *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaGrammar_getDatatypeRegistry(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_getDatatypeRegistry" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      try 
      {
        result = (DatatypeValidatorFactory *)(arg1)->getDatatypeRegistry();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DatatypeValidatorFactory, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_getNamespaceScope) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    XERCES_CPP_NAMESPACE::NamespaceScope *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaGrammar_getNamespaceScope(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_getNamespaceScope" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::NamespaceScope *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getNamespaceScope();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__NamespaceScope, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_getValidSubstitutionGroups) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    RefHash2KeysTableOf<XERCES_CPP_NAMESPACE::ElemVector > *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaGrammar_getValidSubstitutionGroups(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_getValidSubstitutionGroups" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      try 
      {
        result = (RefHash2KeysTableOf<XERCES_CPP_NAMESPACE::ElemVector > *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getValidSubstitutionGroups();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RefHash2KeysTableOfTValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t_t, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_getValidationContext) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    ValidationContext *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaGrammar_getValidationContext(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_getValidationContext" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      try 
      {
        result = (ValidationContext *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getValidationContext();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ValidationContext, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_setTargetNamespace) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaGrammar_setTargetNamespace(self,targetNamespace);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_setTargetNamespace" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setTargetNamespace((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_setAttributeDeclRegistry) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    RefHashTableOf<XERCES_CPP_NAMESPACE::XMLAttDef > *arg2 = (RefHashTableOf<XERCES_CPP_NAMESPACE::XMLAttDef > *) (RefHashTableOf<XERCES_CPP_NAMESPACE::XMLAttDef > *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaGrammar_setAttributeDeclRegistry(self,attReg);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_setAttributeDeclRegistry" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XMLAttDef_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaGrammar_setAttributeDeclRegistry" "', argument " "2"" of type '" "RefHashTableOf<XERCES_CPP_NAMESPACE::XMLAttDef > *const""'"); 
    }
    arg2 = reinterpret_cast< RefHashTableOf<XERCES_CPP_NAMESPACE::XMLAttDef > * >(argp2);
    {
      try 
      {
        (arg1)->setAttributeDeclRegistry(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_setComplexTypeRegistry) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    RefHashTableOf<XERCES_CPP_NAMESPACE::ComplexTypeInfo > *arg2 = (RefHashTableOf<XERCES_CPP_NAMESPACE::ComplexTypeInfo > *) (RefHashTableOf<XERCES_CPP_NAMESPACE::ComplexTypeInfo > *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaGrammar_setComplexTypeRegistry(self,other);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_setComplexTypeRegistry" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__ComplexTypeInfo_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaGrammar_setComplexTypeRegistry" "', argument " "2"" of type '" "RefHashTableOf<XERCES_CPP_NAMESPACE::ComplexTypeInfo > *const""'"); 
    }
    arg2 = reinterpret_cast< RefHashTableOf<XERCES_CPP_NAMESPACE::ComplexTypeInfo > * >(argp2);
    {
      try 
      {
        (arg1)->setComplexTypeRegistry(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_setGroupInfoRegistry) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    RefHashTableOf<XERCES_CPP_NAMESPACE::XercesGroupInfo > *arg2 = (RefHashTableOf<XERCES_CPP_NAMESPACE::XercesGroupInfo > *) (RefHashTableOf<XERCES_CPP_NAMESPACE::XercesGroupInfo > *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaGrammar_setGroupInfoRegistry(self,other);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_setGroupInfoRegistry" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesGroupInfo_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaGrammar_setGroupInfoRegistry" "', argument " "2"" of type '" "RefHashTableOf<XERCES_CPP_NAMESPACE::XercesGroupInfo > *const""'"); 
    }
    arg2 = reinterpret_cast< RefHashTableOf<XERCES_CPP_NAMESPACE::XercesGroupInfo > * >(argp2);
    {
      try 
      {
        (arg1)->setGroupInfoRegistry(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_setAttGroupInfoRegistry) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    RefHashTableOf<XERCES_CPP_NAMESPACE::XercesAttGroupInfo > *arg2 = (RefHashTableOf<XERCES_CPP_NAMESPACE::XercesAttGroupInfo > *) (RefHashTableOf<XERCES_CPP_NAMESPACE::XercesAttGroupInfo > *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaGrammar_setAttGroupInfoRegistry(self,other);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_setAttGroupInfoRegistry" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesAttGroupInfo_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaGrammar_setAttGroupInfoRegistry" "', argument " "2"" of type '" "RefHashTableOf<XERCES_CPP_NAMESPACE::XercesAttGroupInfo > *const""'"); 
    }
    arg2 = reinterpret_cast< RefHashTableOf<XERCES_CPP_NAMESPACE::XercesAttGroupInfo > * >(argp2);
    {
      try 
      {
        (arg1)->setAttGroupInfoRegistry(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_setNamespaceScope) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    XERCES_CPP_NAMESPACE::NamespaceScope *arg2 = (XERCES_CPP_NAMESPACE::NamespaceScope *) (XERCES_CPP_NAMESPACE::NamespaceScope *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaGrammar_setNamespaceScope(self,nsScope);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_setNamespaceScope" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__NamespaceScope, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaGrammar_setNamespaceScope" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::NamespaceScope *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::NamespaceScope * >(argp2);
    {
      try 
      {
        (arg1)->setNamespaceScope(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_setValidSubstitutionGroups) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    RefHash2KeysTableOf<XERCES_CPP_NAMESPACE::ElemVector > *arg2 = (RefHash2KeysTableOf<XERCES_CPP_NAMESPACE::ElemVector > *) (RefHash2KeysTableOf<XERCES_CPP_NAMESPACE::ElemVector > *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaGrammar_setValidSubstitutionGroups(self,RefHash2KeysTableOf<XERCES_CPP_NAMESPACE::ElemVector > *const);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_setValidSubstitutionGroups" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_RefHash2KeysTableOfTValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaGrammar_setValidSubstitutionGroups" "', argument " "2"" of type '" "RefHash2KeysTableOf<XERCES_CPP_NAMESPACE::ElemVector > *const""'"); 
    }
    arg2 = reinterpret_cast< RefHash2KeysTableOf<XERCES_CPP_NAMESPACE::ElemVector > * >(argp2);
    {
      try 
      {
        (arg1)->setValidSubstitutionGroups(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_setGrammarDescription) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    XERCES_CPP_NAMESPACE::XMLGrammarDescription *arg2 = (XERCES_CPP_NAMESPACE::XMLGrammarDescription *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaGrammar_setGrammarDescription(self,XERCES_CPP_NAMESPACE::XMLGrammarDescription *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_setGrammarDescription" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaGrammar_setGrammarDescription" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLGrammarDescription *""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLGrammarDescription * >(argp2);
    {
      try 
      {
        (arg1)->setGrammarDescription(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_getGrammarDescription) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    XERCES_CPP_NAMESPACE::XMLGrammarDescription *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaGrammar_getGrammarDescription(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_getGrammarDescription" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLGrammarDescription *)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->getGrammarDescription();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, SWIG_as_voidptrptr(&result)), 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_putGroupElemDecl) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg2 = (XERCES_CPP_NAMESPACE::XMLElementDecl *) (XERCES_CPP_NAMESPACE::XMLElementDecl *)0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaGrammar_putGroupElemDecl(self,elemDecl);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_putGroupElemDecl" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaGrammar_putGroupElemDecl" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp2);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::SchemaGrammar const *)arg1)->putGroupElemDecl(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_putAnnotation) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    void *arg2 = (void *) 0 ;
    XERCES_CPP_NAMESPACE::XSAnnotation *arg3 = (XERCES_CPP_NAMESPACE::XSAnnotation *) (XERCES_CPP_NAMESPACE::XSAnnotation *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: SchemaGrammar_putAnnotation(self,key,annotation);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_putAnnotation" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      arg2 = (void*) ST(1);
    }
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSAnnotation, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SchemaGrammar_putAnnotation" "', argument " "3"" of type '" "XERCES_CPP_NAMESPACE::XSAnnotation *const""'"); 
    }
    arg3 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSAnnotation * >(argp3);
    {
      try 
      {
        (arg1)->putAnnotation(arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_addAnnotation) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    XERCES_CPP_NAMESPACE::XSAnnotation *arg2 = (XERCES_CPP_NAMESPACE::XSAnnotation *) (XERCES_CPP_NAMESPACE::XSAnnotation *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaGrammar_addAnnotation(self,annotation);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_addAnnotation" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSAnnotation, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaGrammar_addAnnotation" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XSAnnotation *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSAnnotation * >(argp2);
    {
      try 
      {
        (arg1)->addAnnotation(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_getAnnotation__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    void *arg2 = (void *) (void *)0 ;
    XERCES_CPP_NAMESPACE::XSAnnotation *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaGrammar_getAnnotation(self,key);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_getAnnotation" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      arg2 = (void*) ST(1);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XSAnnotation *)(arg1)->getAnnotation((void const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSAnnotation, 0 | 0); argvi++ ;
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_getAnnotation__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    XERCES_CPP_NAMESPACE::XSAnnotation *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaGrammar_getAnnotation(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_getAnnotation" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XSAnnotation *)(arg1)->getAnnotation();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSAnnotation, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaGrammar_getAnnotation) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &ptr, 0, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_SchemaGrammar_getAnnotation__SWIG_1); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_SchemaGrammar_getAnnotation__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'SchemaGrammar_getAnnotation'");
  XSRETURN(0);
}


XS(_wrap_SchemaGrammar_getAnnotations) {
  {
    XERCES_CPP_NAMESPACE::SchemaGrammar *arg1 = (XERCES_CPP_NAMESPACE::SchemaGrammar *) 0 ;
    RefHashTableOf<XERCES_CPP_NAMESPACE::XSAnnotation > *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaGrammar_getAnnotations(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaGrammar_getAnnotations" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaGrammar *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaGrammar * >(argp1);
    {
      try 
      {
        result = (RefHashTableOf<XERCES_CPP_NAMESPACE::XSAnnotation > *)(arg1)->getAnnotations();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XSAnnotation_t, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SchemaValidator__SWIG_0) {
  {
    XMLErrorReporter *arg1 = (XMLErrorReporter *) (XMLErrorReporter *)0 ;
    XERCES_CPP_NAMESPACE::SchemaValidator *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_SchemaValidator(errReporter);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XMLErrorReporter, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SchemaValidator" "', argument " "1"" of type '" "XMLErrorReporter *const""'"); 
    }
    arg1 = reinterpret_cast< XMLErrorReporter * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::SchemaValidator *)new XERCES_CPP_NAMESPACE::SchemaValidator(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SchemaValidator__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_SchemaValidator();");
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::SchemaValidator *)new XERCES_CPP_NAMESPACE::SchemaValidator();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_SchemaValidator) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XMLErrorReporter, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_SchemaValidator__SWIG_1); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_SchemaValidator__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_SchemaValidator'");
  XSRETURN(0);
}


XS(_wrap_delete_SchemaValidator) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SchemaValidator(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SchemaValidator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_requiresNamespaces) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaValidator_requiresNamespaces(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_requiresNamespaces" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->requiresNamespaces();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_getGrammar) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    XERCES_CPP_NAMESPACE::Grammar *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaValidator_getGrammar(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_getGrammar" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::Grammar *)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->getGrammar();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, SWIG_as_voidptrptr(&result)), 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_setGrammar) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    XERCES_CPP_NAMESPACE::Grammar *arg2 = (XERCES_CPP_NAMESPACE::Grammar *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaValidator_setGrammar(self,aGrammar);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_setGrammar" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaValidator_setGrammar" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::Grammar *""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::Grammar * >(argp2);
    {
      try 
      {
        (arg1)->setGrammar(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_handlesDTD) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaValidator_handlesDTD(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_handlesDTD" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->handlesDTD();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_handlesSchema) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaValidator_handlesSchema(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_handlesSchema" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->handlesSchema();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_normalizeWhiteSpace) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    XERCES_CPP_NAMESPACE::DatatypeValidator *arg2 = (XERCES_CPP_NAMESPACE::DatatypeValidator *) 0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLBuffer *arg4 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: SchemaValidator_normalizeWhiteSpace(self,dV,value,toFill);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_normalizeWhiteSpace" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaValidator_normalizeWhiteSpace" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::DatatypeValidator *""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::DatatypeValidator * >(argp2);
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    res4 = SWIG_ConvertPtr(ST(3), &argp4, SWIGTYPE_p_XMLBuffer,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SchemaValidator_normalizeWhiteSpace" "', argument " "4"" of type '" "XMLBuffer &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchemaValidator_normalizeWhiteSpace" "', argument " "4"" of type '" "XMLBuffer &""'"); 
    }
    arg4 = reinterpret_cast< XMLBuffer * >(argp4);
    {
      try 
      {
        (arg1)->normalizeWhiteSpace(arg2,(XMLCh const *)arg3,*arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    delete[] arg3;
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    delete[] arg3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_setGrammarResolver) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    XERCES_CPP_NAMESPACE::GrammarResolver *arg2 = (XERCES_CPP_NAMESPACE::GrammarResolver *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaValidator_setGrammarResolver(self,grammarResolver);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_setGrammarResolver" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__GrammarResolver, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaValidator_setGrammarResolver" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::GrammarResolver *""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::GrammarResolver * >(argp2);
    {
      try 
      {
        (arg1)->setGrammarResolver(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_setXsiType) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    unsigned int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: SchemaValidator_setXsiType(self,prefix,localPart,uriId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_setXsiType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SchemaValidator_setXsiType" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    {
      try 
      {
        (arg1)->setXsiType((XMLCh const *)arg2,(XMLCh const *)arg3,arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_setNillable) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaValidator_setNillable(self,isNil);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_setNillable" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SchemaValidator_setNillable" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    {
      try 
      {
        (arg1)->setNillable(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_setExitOnFirstFatal) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaValidator_setExitOnFirstFatal(self,newValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_setExitOnFirstFatal" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SchemaValidator_setExitOnFirstFatal" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    {
      try 
      {
        (arg1)->setExitOnFirstFatal(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_setDatatypeBuffer) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaValidator_setDatatypeBuffer(self,value);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_setDatatypeBuffer" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setDatatypeBuffer((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_clearDatatypeBuffer) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaValidator_clearDatatypeBuffer(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_clearDatatypeBuffer" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    {
      try 
      {
        (arg1)->clearDatatypeBuffer();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_getCurrentTypeInfo) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    XERCES_CPP_NAMESPACE::ComplexTypeInfo *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaValidator_getCurrentTypeInfo(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_getCurrentTypeInfo" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::ComplexTypeInfo *)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->getCurrentTypeInfo();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__ComplexTypeInfo, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_getCurrentDatatypeValidator) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    XERCES_CPP_NAMESPACE::DatatypeValidator *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaValidator_getCurrentDatatypeValidator(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_getCurrentDatatypeValidator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::DatatypeValidator *)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->getCurrentDatatypeValidator();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_getMostRecentAttrValidator) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    XERCES_CPP_NAMESPACE::DatatypeValidator *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaValidator_getMostRecentAttrValidator(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_getMostRecentAttrValidator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::DatatypeValidator *)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->getMostRecentAttrValidator();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_getErrorOccurred) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaValidator_getErrorOccurred(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_getErrorOccurred" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->getErrorOccurred();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_getIsElemSpecified) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaValidator_getIsElemSpecified(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_getIsElemSpecified" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->getIsElemSpecified();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaValidator_getNormalizedValue) {
  {
    XERCES_CPP_NAMESPACE::SchemaValidator *arg1 = (XERCES_CPP_NAMESPACE::SchemaValidator *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaValidator_getNormalizedValue(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaValidator_getNormalizedValue" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaValidator const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaValidator * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaValidator const *)arg1)->getNormalizedValue();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_SchemaAttDefList) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDefList *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDefList *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SchemaAttDefList(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SchemaAttDefList" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDefList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDefList * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDefList_isEmpty) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDefList *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDefList *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaAttDefList_isEmpty(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDefList_isEmpty" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDefList const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDefList * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::SchemaAttDefList const *)arg1)->isEmpty();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDefList_findAttDef__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDefList *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDefList *) 0 ;
    unsigned long arg2 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: SchemaAttDefList_findAttDef(self,uriID,attName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDefList_findAttDef" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDefList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDefList * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SchemaAttDefList_findAttDef" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttDef *)(arg1)->findAttDef(arg2,(XMLCh const *)arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 | SWIG_SHADOW); argvi++ ;
    
    
    
    delete[] arg3;
    
    XSRETURN(argvi);
  fail:
    
    
    
    delete[] arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDefList_findAttDef__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDefList *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDefList *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: SchemaAttDefList_findAttDef(self,attURI,attName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDefList_findAttDef" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDefList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDefList * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttDef *)(arg1)->findAttDef((XMLCh const *)arg2,(XMLCh const *)arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDefList_findAttDef) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_SchemaAttDefList_findAttDef__SWIG_0); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_SchemaAttDefList_findAttDef__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'SchemaAttDefList_findAttDef'");
  XSRETURN(0);
}


XS(_wrap_SchemaAttDefList_findAttDefLocalPart) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDefList *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDefList *) 0 ;
    unsigned long arg2 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned long val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: SchemaAttDefList_findAttDefLocalPart(self,uriID,attLocalPart);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDefList_findAttDefLocalPart" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDefList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDefList * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SchemaAttDefList_findAttDefLocalPart" "', argument " "2"" of type '" "unsigned long""'");
    } 
    arg2 = static_cast< unsigned long >(val2);
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttDef *)(arg1)->findAttDefLocalPart(arg2,(XMLCh const *)arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 | SWIG_SHADOW); argvi++ ;
    
    
    
    delete[] arg3;
    
    XSRETURN(argvi);
  fail:
    
    
    
    delete[] arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDefList_getAttDefCount) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDefList *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDefList *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaAttDefList_getAttDefCount(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDefList_getAttDefCount" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDefList const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDefList * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::SchemaAttDefList const *)arg1)->getAttDefCount();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDefList_getAttDef) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDefList *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDefList *) 0 ;
    unsigned int arg2 ;
    XERCES_CPP_NAMESPACE::XMLAttDef *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaAttDefList_getAttDef(self,index);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDefList_getAttDef" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDefList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDefList * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SchemaAttDefList_getAttDef" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        {
          XERCES_CPP_NAMESPACE::XMLAttDef &_result_ref = (arg1)->getAttDef(arg2);
          result = (XERCES_CPP_NAMESPACE::XMLAttDef *) &_result_ref;
        }
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_SchemaAttDef) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SchemaAttDef(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SchemaAttDef" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDef_getFullName) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaAttDef_getFullName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDef_getFullName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getFullName();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDef_reset) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaAttDef_reset(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDef_reset" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    {
      try 
      {
        (arg1)->reset();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDef_getElemId) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaAttDef_getElemId(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDef_getElemId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getElemId();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDef_getAttName) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    XERCES_CPP_NAMESPACE::QName *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaAttDef_getAttName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDef_getAttName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::QName *)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getAttName();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDef_getDatatypeValidator) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    XERCES_CPP_NAMESPACE::DatatypeValidator *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaAttDef_getDatatypeValidator(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDef_getDatatypeValidator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::DatatypeValidator *)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getDatatypeValidator();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDef_getNamespaceList) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    ValueVectorOf<unsigned int > *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaAttDef_getNamespaceList(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDef_getNamespaceList" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    {
      try 
      {
        result = (ValueVectorOf<unsigned int > *)((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getNamespaceList();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ValueVectorOfTunsigned_int_t, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDef_getBaseAttDecl) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    XERCES_CPP_NAMESPACE::SchemaAttDef *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaAttDef_getBaseAttDecl(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDef_getBaseAttDecl" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::SchemaAttDef *)(arg1)->getBaseAttDecl();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDef_getPSVIScope) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    PSVIDefs::PSVIScope result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaAttDef_getPSVIScope(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDef_getPSVIScope" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    {
      try 
      {
        result = ((XERCES_CPP_NAMESPACE::SchemaAttDef const *)arg1)->getPSVIScope();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj((new PSVIDefs::PSVIScope(static_cast< const PSVIDefs::PSVIScope& >(result))), SWIGTYPE_p_PSVIDefs__PSVIScope, SWIG_POINTER_OWN | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDef_setElemId) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaAttDef_setElemId(self,newId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDef_setElemId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SchemaAttDef_setElemId" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        (arg1)->setElemId(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDef_setAttName__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: SchemaAttDef_setAttName(self,prefix,localPart,uriId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDef_setAttName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SchemaAttDef_setAttName" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try 
      {
        (arg1)->setAttName((XMLCh const *)arg2,(XMLCh const *)arg3,arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDef_setAttName__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: SchemaAttDef_setAttName(self,prefix,localPart);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDef_setAttName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    {
      try 
      {
        (arg1)->setAttName((XMLCh const *)arg2,(XMLCh const *)arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDef_setAttName) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_SchemaAttDef_setAttName__SWIG_1); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_SchemaAttDef_setAttName__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'SchemaAttDef_setAttName'");
  XSRETURN(0);
}


XS(_wrap_SchemaAttDef_setDatatypeValidator) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    XERCES_CPP_NAMESPACE::DatatypeValidator *arg2 = (XERCES_CPP_NAMESPACE::DatatypeValidator *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaAttDef_setDatatypeValidator(self,newDatatypeValidator);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDef_setDatatypeValidator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaAttDef_setDatatypeValidator" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::DatatypeValidator *""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::DatatypeValidator * >(argp2);
    {
      try 
      {
        (arg1)->setDatatypeValidator(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDef_setBaseAttDecl) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg2 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) (XERCES_CPP_NAMESPACE::SchemaAttDef *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaAttDef_setBaseAttDecl(self,attDef);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDef_setBaseAttDecl" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaAttDef_setBaseAttDecl" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp2);
    {
      try 
      {
        (arg1)->setBaseAttDecl(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDef_setPSVIScope) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    PSVIDefs::PSVIScope arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaAttDef_setPSVIScope(self,toSet);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDef_setPSVIScope" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    {
      res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_PSVIDefs__PSVIScope,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaAttDef_setPSVIScope" "', argument " "2"" of type '" "PSVIDefs::PSVIScope const""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchemaAttDef_setPSVIScope" "', argument " "2"" of type '" "PSVIDefs::PSVIScope const""'");
      } else {
        arg2 = *(reinterpret_cast< PSVIDefs::PSVIScope * >(argp2));
      }
    }
    {
      try 
      {
        (arg1)->setPSVIScope(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDef_setNamespaceList) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    ValueVectorOf<unsigned int > *arg2 = (ValueVectorOf<unsigned int > *) (ValueVectorOf<unsigned int > *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaAttDef_setNamespaceList(self,toSet);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDef_setNamespaceList" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_ValueVectorOfTunsigned_int_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaAttDef_setNamespaceList" "', argument " "2"" of type '" "ValueVectorOf<unsigned int > const *const""'"); 
    }
    arg2 = reinterpret_cast< ValueVectorOf<unsigned int > * >(argp2);
    {
      try 
      {
        (arg1)->setNamespaceList((ValueVectorOf<unsigned int > const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDef_resetNamespaceList) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SchemaAttDef_resetNamespaceList(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDef_resetNamespaceList" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    {
      try 
      {
        (arg1)->resetNamespaceList();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SchemaAttDef_setEnclosingCT) {
  {
    XERCES_CPP_NAMESPACE::SchemaAttDef *arg1 = (XERCES_CPP_NAMESPACE::SchemaAttDef *) 0 ;
    XERCES_CPP_NAMESPACE::ComplexTypeInfo *arg2 = (XERCES_CPP_NAMESPACE::ComplexTypeInfo *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SchemaAttDef_setEnclosingCT(self,complexTypeInfo);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchemaAttDef_setEnclosingCT" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SchemaAttDef *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SchemaAttDef * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__ComplexTypeInfo, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchemaAttDef_setEnclosingCT" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::ComplexTypeInfo *""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::ComplexTypeInfo * >(argp2);
    {
      try 
      {
        (arg1)->setEnclosingCT(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_SAXException) {
  {
    XERCES_CPP_NAMESPACE::SAXException *arg1 = (XERCES_CPP_NAMESPACE::SAXException *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SAXException(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SAXException" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SAXException *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SAXException * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SAXException_getMessage) {
  {
    XERCES_CPP_NAMESPACE::SAXException *arg1 = (XERCES_CPP_NAMESPACE::SAXException *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SAXException_getMessage(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAXException_getMessage" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SAXException const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SAXException * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::SAXException const *)arg1)->getMessage();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SAXNotSupportedException) {
  {
    XERCES_CPP_NAMESPACE::SAXException *arg1 = 0 ;
    XERCES_CPP_NAMESPACE::SAXNotSupportedException *result = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_SAXNotSupportedException(toCopy);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SAXNotSupportedException" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SAXException const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SAXNotSupportedException" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SAXException const &""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SAXException * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::SAXNotSupportedException *)new XERCES_CPP_NAMESPACE::SAXNotSupportedException((XERCES_CPP_NAMESPACE::SAXException const &)*arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotSupportedException, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_SAXNotSupportedException) {
  {
    XERCES_CPP_NAMESPACE::SAXNotSupportedException *arg1 = (XERCES_CPP_NAMESPACE::SAXNotSupportedException *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SAXNotSupportedException(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotSupportedException, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SAXNotSupportedException" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SAXNotSupportedException *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SAXNotSupportedException * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SAXNotRecognizedException) {
  {
    XERCES_CPP_NAMESPACE::SAXException *arg1 = 0 ;
    XERCES_CPP_NAMESPACE::SAXNotRecognizedException *result = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_SAXNotRecognizedException(toCopy);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SAXNotRecognizedException" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SAXException const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SAXNotRecognizedException" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SAXException const &""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SAXException * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::SAXNotRecognizedException *)new XERCES_CPP_NAMESPACE::SAXNotRecognizedException((XERCES_CPP_NAMESPACE::SAXException const &)*arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_SAXNotRecognizedException) {
  {
    XERCES_CPP_NAMESPACE::SAXNotRecognizedException *arg1 = (XERCES_CPP_NAMESPACE::SAXNotRecognizedException *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SAXNotRecognizedException(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SAXNotRecognizedException" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SAXNotRecognizedException *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SAXNotRecognizedException * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_SAXParseException) {
  {
    XERCES_CPP_NAMESPACE::SAXParseException *arg1 = (XERCES_CPP_NAMESPACE::SAXParseException *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SAXParseException(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SAXParseException" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SAXParseException *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SAXParseException * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SAXParseException_getColumnNumber) {
  {
    XERCES_CPP_NAMESPACE::SAXParseException *arg1 = (XERCES_CPP_NAMESPACE::SAXParseException *) 0 ;
    XMLSSize_t result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SAXParseException_getColumnNumber(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAXParseException_getColumnNumber" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SAXParseException const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SAXParseException * >(argp1);
    {
      try 
      {
        result = ((XERCES_CPP_NAMESPACE::SAXParseException const *)arg1)->getColumnNumber();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SAXParseException_getLineNumber) {
  {
    XERCES_CPP_NAMESPACE::SAXParseException *arg1 = (XERCES_CPP_NAMESPACE::SAXParseException *) 0 ;
    XMLSSize_t result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SAXParseException_getLineNumber(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAXParseException_getLineNumber" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SAXParseException const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SAXParseException * >(argp1);
    {
      try 
      {
        result = ((XERCES_CPP_NAMESPACE::SAXParseException const *)arg1)->getLineNumber();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_size_t  SWIG_PERL_CALL_ARGS_1(static_cast< size_t >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SAXParseException_getPublicId) {
  {
    XERCES_CPP_NAMESPACE::SAXParseException *arg1 = (XERCES_CPP_NAMESPACE::SAXParseException *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SAXParseException_getPublicId(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAXParseException_getPublicId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SAXParseException const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SAXParseException * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::SAXParseException const *)arg1)->getPublicId();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SAXParseException_getSystemId) {
  {
    XERCES_CPP_NAMESPACE::SAXParseException *arg1 = (XERCES_CPP_NAMESPACE::SAXParseException *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SAXParseException_getSystemId(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAXParseException_getSystemId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::SAXParseException const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::SAXParseException * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::SAXParseException const *)arg1)->getSystemId();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLPScanToken__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::XMLPScanToken *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_XMLPScanToken();");
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLPScanToken *)new XERCES_CPP_NAMESPACE::XMLPScanToken();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLPScanToken__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::XMLPScanToken *arg1 = 0 ;
    XERCES_CPP_NAMESPACE::XMLPScanToken *result = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_XMLPScanToken(toCopy);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_XMLPScanToken" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLPScanToken const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_XMLPScanToken" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLPScanToken const &""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLPScanToken * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLPScanToken *)new XERCES_CPP_NAMESPACE::XMLPScanToken((XERCES_CPP_NAMESPACE::XMLPScanToken const &)*arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLPScanToken) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLPScanToken__SWIG_0); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLPScanToken__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_XMLPScanToken'");
  XSRETURN(0);
}


XS(_wrap_delete_XMLPScanToken) {
  {
    XERCES_CPP_NAMESPACE::XMLPScanToken *arg1 = (XERCES_CPP_NAMESPACE::XMLPScanToken *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLPScanToken(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLPScanToken" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLPScanToken *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLPScanToken * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_BaseXMLAttrVector__SWIG_0) {
  {
    unsigned int arg1 ;
    bool arg2 ;
    XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    arg3 = XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager;
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: new_BaseXMLAttrVector(maxElems,adoptElems,manager);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BaseXMLAttrVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BaseXMLAttrVector" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (items > 2) {
      res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_BaseXMLAttrVector" "', argument " "3"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
      }
      arg3 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp3);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *)new XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr >(arg1,arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_BaseXMLAttrVector__SWIG_1) {
  {
    unsigned int arg1 ;
    bool arg2 ;
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_BaseXMLAttrVector(maxElems,adoptElems);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BaseXMLAttrVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BaseXMLAttrVector" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *)new XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr >(arg1,arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_BaseXMLAttrVector__SWIG_2) {
  {
    unsigned int arg1 ;
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_BaseXMLAttrVector(maxElems);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BaseXMLAttrVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *)new XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr >(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_BaseXMLAttrVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if ((items >= 2) && (items <= 3)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 2) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(ST(2), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_3;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_BaseXMLAttrVector__SWIG_2); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_BaseXMLAttrVector__SWIG_1); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_BaseXMLAttrVector__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_BaseXMLAttrVector'");
  XSRETURN(0);
}


XS(_wrap_delete_BaseXMLAttrVector) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_BaseXMLAttrVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BaseXMLAttrVector" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLAttrVector_addElement) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttr *arg2 = (XERCES_CPP_NAMESPACE::XMLAttr *) (XERCES_CPP_NAMESPACE::XMLAttr *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: BaseXMLAttrVector_addElement(self,toAdd);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLAttrVector_addElement" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseXMLAttrVector_addElement" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp2);
    {
      try 
      {
        (arg1)->addElement(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLAttrVector_setElementAt) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttr *arg2 = (XERCES_CPP_NAMESPACE::XMLAttr *) (XERCES_CPP_NAMESPACE::XMLAttr *)0 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: BaseXMLAttrVector_setElementAt(self,toSet,setAt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLAttrVector_setElementAt" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseXMLAttrVector_setElementAt" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseXMLAttrVector_setElementAt" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try 
      {
        (arg1)->setElementAt(arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLAttrVector_insertElementAt) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttr *arg2 = (XERCES_CPP_NAMESPACE::XMLAttr *) (XERCES_CPP_NAMESPACE::XMLAttr *)0 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: BaseXMLAttrVector_insertElementAt(self,toInsert,insertAt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLAttrVector_insertElementAt" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseXMLAttrVector_insertElementAt" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseXMLAttrVector_insertElementAt" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try 
      {
        (arg1)->insertElementAt(arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLAttrVector_orphanElementAt) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    unsigned int arg2 ;
    XERCES_CPP_NAMESPACE::XMLAttr *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: BaseXMLAttrVector_orphanElementAt(self,orphanAt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLAttrVector_orphanElementAt" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseXMLAttrVector_orphanElementAt" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttr *)(arg1)->orphanElementAt(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLAttrVector_removeAllElements) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: BaseXMLAttrVector_removeAllElements(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLAttrVector_removeAllElements" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    {
      try 
      {
        (arg1)->removeAllElements();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLAttrVector_removeElementAt) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: BaseXMLAttrVector_removeElementAt(self,removeAt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLAttrVector_removeElementAt" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseXMLAttrVector_removeElementAt" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        (arg1)->removeElementAt(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLAttrVector_removeLastElement) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: BaseXMLAttrVector_removeLastElement(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLAttrVector_removeLastElement" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    {
      try 
      {
        (arg1)->removeLastElement();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLAttrVector_containsElement) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttr *arg2 = (XERCES_CPP_NAMESPACE::XMLAttr *) (XERCES_CPP_NAMESPACE::XMLAttr *)0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: BaseXMLAttrVector_containsElement(self,toCheck);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLAttrVector_containsElement" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseXMLAttrVector_containsElement" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr const *const""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp2);
    {
      try 
      {
        result = (bool)(arg1)->containsElement((XERCES_CPP_NAMESPACE::XMLAttr const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLAttrVector_cleanup) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: BaseXMLAttrVector_cleanup(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLAttrVector_cleanup" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    {
      try 
      {
        (arg1)->cleanup();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLAttrVector_reinitialize) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: BaseXMLAttrVector_reinitialize(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLAttrVector_reinitialize" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    {
      try 
      {
        (arg1)->reinitialize();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLAttrVector_curCapacity) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: BaseXMLAttrVector_curCapacity(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLAttrVector_curCapacity" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > const *)arg1)->curCapacity();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLAttrVector_elementAt__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    unsigned int arg2 ;
    XERCES_CPP_NAMESPACE::XMLAttr *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: BaseXMLAttrVector_elementAt(self,getAt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLAttrVector_elementAt" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseXMLAttrVector_elementAt" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttr *)((XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > const *)arg1)->elementAt(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLAttrVector_elementAt__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    unsigned int arg2 ;
    XERCES_CPP_NAMESPACE::XMLAttr *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: BaseXMLAttrVector_elementAt(self,getAt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLAttrVector_elementAt" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseXMLAttrVector_elementAt" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttr *)(arg1)->elementAt(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLAttrVector_elementAt) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_BaseXMLAttrVector_elementAt__SWIG_1); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_BaseXMLAttrVector_elementAt__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'BaseXMLAttrVector_elementAt'");
  XSRETURN(0);
}


XS(_wrap_BaseXMLAttrVector_size) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: BaseXMLAttrVector_size(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLAttrVector_size" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > const *)arg1)->size();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLAttrVector_getMemoryManager) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    XERCES_CPP_NAMESPACE::MemoryManager *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: BaseXMLAttrVector_getMemoryManager(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLAttrVector_getMemoryManager" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::MemoryManager *)((XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > const *)arg1)->getMemoryManager();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_BaseXMLAttrVector_ensureExtraCapacity) {
  {
    XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: BaseXMLAttrVector_ensureExtraCapacity(self,length);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseXMLAttrVector_ensureExtraCapacity" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseXMLAttrVector_ensureExtraCapacity" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        (arg1)->ensureExtraCapacity(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttrVector__SWIG_0) {
  {
    unsigned int arg1 ;
    bool arg2 ;
    XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    arg3 = XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager;
    if ((items < 2) || (items > 3)) {
      SWIG_croak("Usage: new_XMLAttrVector(maxElems,adoptElems,manager);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLAttrVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_XMLAttrVector" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    if (items > 2) {
      res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_XMLAttrVector" "', argument " "3"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
      }
      arg3 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp3);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *)new XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr >(arg1,arg2,arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttrVector__SWIG_1) {
  {
    unsigned int arg1 ;
    bool arg2 ;
    XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_XMLAttrVector(maxElems,adoptElems);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLAttrVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_XMLAttrVector" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *)new XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr >(arg1,arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttrVector__SWIG_2) {
  {
    unsigned int arg1 ;
    XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_XMLAttrVector(maxElems);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLAttrVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *)new XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr >(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttrVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if ((items >= 2) && (items <= 3)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 2) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(ST(2), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_3;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLAttrVector__SWIG_2); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLAttrVector__SWIG_1); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLAttrVector__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_XMLAttrVector'");
  XSRETURN(0);
}


XS(_wrap_delete_XMLAttrVector) {
  {
    XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg1 = (XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLAttrVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLAttrVector" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttr__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttr *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    arg1 = XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager;
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: new_XMLAttr(manager);");
    }
    if (items > 0) {
      res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_XMLAttr" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
      }
      arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp1);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttr *)new XERCES_CPP_NAMESPACE::XMLAttr(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttr__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_XMLAttr();");
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttr *)new XERCES_CPP_NAMESPACE::XMLAttr();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttr__SWIG_2) {
  {
    unsigned int arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg5 ;
    bool arg6 ;
    XERCES_CPP_NAMESPACE::MemoryManager *arg7 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    XERCES_CPP_NAMESPACE::DatatypeValidator *arg8 = (XERCES_CPP_NAMESPACE::DatatypeValidator *) 0 ;
    bool arg9 ;
    XERCES_CPP_NAMESPACE::XMLAttr *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    bool val6 ;
    int ecode6 = 0 ;
    void *argp7 = 0 ;
    int res7 = 0 ;
    void *argp8 = 0 ;
    int res8 = 0 ;
    bool val9 ;
    int ecode9 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    arg7 = XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager;
    if ((items < 6) || (items > 9)) {
      SWIG_croak("Usage: new_XMLAttr(uriId,attrName,attrPrefix,attrValue,type,specified,manager,datatypeValidator,isSchema);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLAttr" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_XMLAttr" "', argument " "5"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg5 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val5);
    ecode6 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_XMLAttr" "', argument " "6"" of type '" "bool""'");
    } 
    arg6 = static_cast< bool >(val6);
    if (items > 6) {
      res7 = SWIG_ConvertPtr(ST(6), &argp7,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
      if (!SWIG_IsOK(res7)) {
        SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_XMLAttr" "', argument " "7"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
      }
      arg7 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp7);
    }
    if (items > 7) {
      res8 = SWIG_ConvertPtr(ST(7), &argp8,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0 |  0 );
      if (!SWIG_IsOK(res8)) {
        SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_XMLAttr" "', argument " "8"" of type '" "XERCES_CPP_NAMESPACE::DatatypeValidator *""'"); 
      }
      arg8 = reinterpret_cast< XERCES_CPP_NAMESPACE::DatatypeValidator * >(argp8);
    }
    if (items > 8) {
      ecode9 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
      if (!SWIG_IsOK(ecode9)) {
        SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_XMLAttr" "', argument " "9"" of type '" "bool""'");
      } 
      arg9 = static_cast< bool >(val9);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttr *)new XERCES_CPP_NAMESPACE::XMLAttr(arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,arg5,arg6,arg7,arg8,arg9);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttr__SWIG_3) {
  {
    unsigned int arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg5 ;
    bool arg6 ;
    XERCES_CPP_NAMESPACE::MemoryManager *arg7 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    XERCES_CPP_NAMESPACE::DatatypeValidator *arg8 = (XERCES_CPP_NAMESPACE::DatatypeValidator *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttr *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    bool val6 ;
    int ecode6 = 0 ;
    void *argp7 = 0 ;
    int res7 = 0 ;
    void *argp8 = 0 ;
    int res8 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    arg7 = XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager;
    if ((items < 6) || (items > 8)) {
      SWIG_croak("Usage: new_XMLAttr(uriId,attrName,attrPrefix,attrValue,type,specified,manager,datatypeValidator);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLAttr" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_XMLAttr" "', argument " "5"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg5 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val5);
    ecode6 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_XMLAttr" "', argument " "6"" of type '" "bool""'");
    } 
    arg6 = static_cast< bool >(val6);
    if (items > 6) {
      res7 = SWIG_ConvertPtr(ST(6), &argp7,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
      if (!SWIG_IsOK(res7)) {
        SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_XMLAttr" "', argument " "7"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
      }
      arg7 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp7);
    }
    if (items > 7) {
      res8 = SWIG_ConvertPtr(ST(7), &argp8,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0 |  0 );
      if (!SWIG_IsOK(res8)) {
        SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "new_XMLAttr" "', argument " "8"" of type '" "XERCES_CPP_NAMESPACE::DatatypeValidator *""'"); 
      }
      arg8 = reinterpret_cast< XERCES_CPP_NAMESPACE::DatatypeValidator * >(argp8);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttr *)new XERCES_CPP_NAMESPACE::XMLAttr(arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,arg5,arg6,arg7,arg8);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttr__SWIG_4) {
  {
    unsigned int arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg5 ;
    bool arg6 ;
    XERCES_CPP_NAMESPACE::MemoryManager *arg7 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttr *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    bool val6 ;
    int ecode6 = 0 ;
    void *argp7 = 0 ;
    int res7 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    arg7 = XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager;
    if ((items < 6) || (items > 7)) {
      SWIG_croak("Usage: new_XMLAttr(uriId,attrName,attrPrefix,attrValue,type,specified,manager);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLAttr" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_XMLAttr" "', argument " "5"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg5 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val5);
    ecode6 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_XMLAttr" "', argument " "6"" of type '" "bool""'");
    } 
    arg6 = static_cast< bool >(val6);
    if (items > 6) {
      res7 = SWIG_ConvertPtr(ST(6), &argp7,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
      if (!SWIG_IsOK(res7)) {
        SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_XMLAttr" "', argument " "7"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
      }
      arg7 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp7);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttr *)new XERCES_CPP_NAMESPACE::XMLAttr(arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,arg5,arg6,arg7);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttr__SWIG_5) {
  {
    unsigned int arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg5 ;
    bool arg6 ;
    XERCES_CPP_NAMESPACE::XMLAttr *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    bool val6 ;
    int ecode6 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: new_XMLAttr(uriId,attrName,attrPrefix,attrValue,type,specified);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLAttr" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_XMLAttr" "', argument " "5"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg5 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val5);
    ecode6 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_XMLAttr" "', argument " "6"" of type '" "bool""'");
    } 
    arg6 = static_cast< bool >(val6);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttr *)new XERCES_CPP_NAMESPACE::XMLAttr(arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,arg5,arg6);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttr__SWIG_6) {
  {
    unsigned int arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg5 ;
    XERCES_CPP_NAMESPACE::XMLAttr *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: new_XMLAttr(uriId,attrName,attrPrefix,attrValue,type);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLAttr" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_XMLAttr" "', argument " "5"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg5 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val5);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttr *)new XERCES_CPP_NAMESPACE::XMLAttr(arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,arg5);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttr__SWIG_7) {
  {
    unsigned int arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttr *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: new_XMLAttr(uriId,attrName,attrPrefix,attrValue);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLAttr" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttr *)new XERCES_CPP_NAMESPACE::XMLAttr(arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttr__SWIG_8) {
  {
    unsigned int arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg4 ;
    bool arg5 ;
    XERCES_CPP_NAMESPACE::MemoryManager *arg6 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    XERCES_CPP_NAMESPACE::DatatypeValidator *arg7 = (XERCES_CPP_NAMESPACE::DatatypeValidator *) 0 ;
    bool arg8 ;
    XERCES_CPP_NAMESPACE::XMLAttr *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    bool val5 ;
    int ecode5 = 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    void *argp7 = 0 ;
    int res7 = 0 ;
    bool val8 ;
    int ecode8 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    arg6 = XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager;
    if ((items < 5) || (items > 8)) {
      SWIG_croak("Usage: new_XMLAttr(uriId,rawName,attrValue,type,specified,manager,datatypeValidator,isSchema);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLAttr" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_XMLAttr" "', argument " "4"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg4 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val4);
    ecode5 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_XMLAttr" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    if (items > 5) {
      res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
      if (!SWIG_IsOK(res6)) {
        SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_XMLAttr" "', argument " "6"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
      }
      arg6 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp6);
    }
    if (items > 6) {
      res7 = SWIG_ConvertPtr(ST(6), &argp7,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0 |  0 );
      if (!SWIG_IsOK(res7)) {
        SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_XMLAttr" "', argument " "7"" of type '" "XERCES_CPP_NAMESPACE::DatatypeValidator *""'"); 
      }
      arg7 = reinterpret_cast< XERCES_CPP_NAMESPACE::DatatypeValidator * >(argp7);
    }
    if (items > 7) {
      ecode8 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
      if (!SWIG_IsOK(ecode8)) {
        SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_XMLAttr" "', argument " "8"" of type '" "bool""'");
      } 
      arg8 = static_cast< bool >(val8);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttr *)new XERCES_CPP_NAMESPACE::XMLAttr(arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,arg4,arg5,arg6,arg7,arg8);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttr__SWIG_9) {
  {
    unsigned int arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg4 ;
    bool arg5 ;
    XERCES_CPP_NAMESPACE::MemoryManager *arg6 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    XERCES_CPP_NAMESPACE::DatatypeValidator *arg7 = (XERCES_CPP_NAMESPACE::DatatypeValidator *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttr *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    bool val5 ;
    int ecode5 = 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    void *argp7 = 0 ;
    int res7 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    arg6 = XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager;
    if ((items < 5) || (items > 7)) {
      SWIG_croak("Usage: new_XMLAttr(uriId,rawName,attrValue,type,specified,manager,datatypeValidator);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLAttr" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_XMLAttr" "', argument " "4"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg4 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val4);
    ecode5 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_XMLAttr" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    if (items > 5) {
      res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
      if (!SWIG_IsOK(res6)) {
        SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_XMLAttr" "', argument " "6"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
      }
      arg6 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp6);
    }
    if (items > 6) {
      res7 = SWIG_ConvertPtr(ST(6), &argp7,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0 |  0 );
      if (!SWIG_IsOK(res7)) {
        SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_XMLAttr" "', argument " "7"" of type '" "XERCES_CPP_NAMESPACE::DatatypeValidator *""'"); 
      }
      arg7 = reinterpret_cast< XERCES_CPP_NAMESPACE::DatatypeValidator * >(argp7);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttr *)new XERCES_CPP_NAMESPACE::XMLAttr(arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,arg4,arg5,arg6,arg7);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttr__SWIG_10) {
  {
    unsigned int arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg4 ;
    bool arg5 ;
    XERCES_CPP_NAMESPACE::MemoryManager *arg6 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttr *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    bool val5 ;
    int ecode5 = 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    arg6 = XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager;
    if ((items < 5) || (items > 6)) {
      SWIG_croak("Usage: new_XMLAttr(uriId,rawName,attrValue,type,specified,manager);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLAttr" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_XMLAttr" "', argument " "4"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg4 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val4);
    ecode5 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_XMLAttr" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    if (items > 5) {
      res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
      if (!SWIG_IsOK(res6)) {
        SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_XMLAttr" "', argument " "6"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
      }
      arg6 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp6);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttr *)new XERCES_CPP_NAMESPACE::XMLAttr(arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,arg4,arg5,arg6);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttr__SWIG_11) {
  {
    unsigned int arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg4 ;
    bool arg5 ;
    XERCES_CPP_NAMESPACE::XMLAttr *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    bool val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: new_XMLAttr(uriId,rawName,attrValue,type,specified);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLAttr" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_XMLAttr" "', argument " "4"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg4 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val4);
    ecode5 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_XMLAttr" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttr *)new XERCES_CPP_NAMESPACE::XMLAttr(arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,arg4,arg5);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttr__SWIG_12) {
  {
    unsigned int arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg4 ;
    XERCES_CPP_NAMESPACE::XMLAttr *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: new_XMLAttr(uriId,rawName,attrValue,type);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLAttr" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_XMLAttr" "', argument " "4"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg4 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val4);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttr *)new XERCES_CPP_NAMESPACE::XMLAttr(arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttr__SWIG_13) {
  {
    unsigned int arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttr *result = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: new_XMLAttr(uriId,rawName,attrValue);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLAttr" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttr *)new XERCES_CPP_NAMESPACE::XMLAttr(arg1,(XMLCh const *)arg2,(XMLCh const *)arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLAttr) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((items >= 0) && (items <= 1)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      if (items > 0) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if ((items >= 5) && (items <= 7)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 5) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(ST(5), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_6;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (items > 6) {
          {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(ST(6), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0);
            _v = SWIG_CheckState(res);
          }
          if (!_v) goto check_6;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
    if ((items >= 5) && (items <= 6)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 5) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(ST(5), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_7;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 7;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_7:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 8;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_8:
    
    if ((items >= 5) && (items <= 8)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 5) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(ST(5), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_9;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (items > 6) {
          {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(ST(6), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0);
            _v = SWIG_CheckState(res);
          }
          if (!_v) goto check_9;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
          if (items > 7) {
            {
              {
                int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
                _v = SWIG_CheckState(res);
              }
            }
            if (!_v) goto check_9;
            _ranki += _v*_pi;
            _rankm += _pi;
            _pi *= SWIG_MAXCASTRANK;
          }
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 9;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_9:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 10;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_10:
    
    if ((items >= 6) && (items <= 9)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 6) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(ST(6), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_11;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (items > 7) {
          {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(ST(7), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0);
            _v = SWIG_CheckState(res);
          }
          if (!_v) goto check_11;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
          if (items > 8) {
            {
              {
                int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(8), NULL);
                _v = SWIG_CheckState(res);
              }
            }
            if (!_v) goto check_11;
            _ranki += _v*_pi;
            _rankm += _pi;
            _pi *= SWIG_MAXCASTRANK;
          }
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 11;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_11:
    
    if ((items >= 6) && (items <= 8)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 6) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(ST(6), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_12;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
        if (items > 7) {
          {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(ST(7), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0);
            _v = SWIG_CheckState(res);
          }
          if (!_v) goto check_12;
          _ranki += _v*_pi;
          _rankm += _pi;
          _pi *= SWIG_MAXCASTRANK;
        }
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 12;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_12:
    
    if ((items >= 6) && (items <= 7)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (items > 6) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(ST(6), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_13;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 13;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_13:
    
    if (items == 6) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 14;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_14:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLAttr__SWIG_0); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLAttr__SWIG_1); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLAttr__SWIG_13); return;
    case 4:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLAttr__SWIG_12); return;
    case 5:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLAttr__SWIG_7); return;
    case 6:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLAttr__SWIG_9); return;
    case 7:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLAttr__SWIG_10); return;
    case 8:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLAttr__SWIG_11); return;
    case 9:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLAttr__SWIG_8); return;
    case 10:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLAttr__SWIG_6); return;
    case 11:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLAttr__SWIG_2); return;
    case 12:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLAttr__SWIG_3); return;
    case 13:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLAttr__SWIG_4); return;
    case 14:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLAttr__SWIG_5); return;
    }
  }
  
  croak("No matching function for overloaded 'new_XMLAttr'");
  XSRETURN(0);
}


XS(_wrap_delete_XMLAttr) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLAttr(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLAttr" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_getAttName) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    XERCES_CPP_NAMESPACE::QName *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttr_getAttName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_getAttName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::QName *)((XERCES_CPP_NAMESPACE::XMLAttr const *)arg1)->getAttName();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_getName) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttr_getName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_getName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLAttr const *)arg1)->getName();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_getQName) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttr_getQName(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_getQName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLAttr const *)arg1)->getQName();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_getSpecified) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttr_getSpecified(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_getSpecified" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::XMLAttr const *)arg1)->getSpecified();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_getType) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttr_getType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_getType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes)((XERCES_CPP_NAMESPACE::XMLAttr const *)arg1)->getType();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_getValue) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttr_getValue(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_getValue" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLAttr const *)arg1)->getValue();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_getURIId) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLAttr_getURIId(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_getURIId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::XMLAttr const *)arg1)->getURIId();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_set__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    unsigned int arg2 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg6 ;
    XERCES_CPP_NAMESPACE::DatatypeValidator *arg7 = (XERCES_CPP_NAMESPACE::DatatypeValidator *) 0 ;
    bool arg8 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    void *argp7 = 0 ;
    int res7 = 0 ;
    bool val8 ;
    int ecode8 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 8) || (items > 8)) {
      SWIG_croak("Usage: XMLAttr_set(self,uriId,attrName,attrPrefix,attrValue,type,datatypeValidator,isSchema);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_set" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttr_set" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    
    // we convert *everything* into a string *including* undef
    arg5 = UTF8_TRANSCODER->Local2XMLString(ST(4));
    
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "XMLAttr_set" "', argument " "6"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg6 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val6);
    res7 = SWIG_ConvertPtr(ST(6), &argp7,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0 |  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "XMLAttr_set" "', argument " "7"" of type '" "XERCES_CPP_NAMESPACE::DatatypeValidator *""'"); 
    }
    arg7 = reinterpret_cast< XERCES_CPP_NAMESPACE::DatatypeValidator * >(argp7);
    ecode8 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "XMLAttr_set" "', argument " "8"" of type '" "bool""'");
    } 
    arg8 = static_cast< bool >(val8);
    {
      try 
      {
        (arg1)->set(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5,arg6,arg7,arg8);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    delete[] arg5;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    delete[] arg5;
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_set__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    unsigned int arg2 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg6 ;
    XERCES_CPP_NAMESPACE::DatatypeValidator *arg7 = (XERCES_CPP_NAMESPACE::DatatypeValidator *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    void *argp7 = 0 ;
    int res7 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 7) || (items > 7)) {
      SWIG_croak("Usage: XMLAttr_set(self,uriId,attrName,attrPrefix,attrValue,type,datatypeValidator);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_set" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttr_set" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    
    // we convert *everything* into a string *including* undef
    arg5 = UTF8_TRANSCODER->Local2XMLString(ST(4));
    
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "XMLAttr_set" "', argument " "6"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg6 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val6);
    res7 = SWIG_ConvertPtr(ST(6), &argp7,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0 |  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "XMLAttr_set" "', argument " "7"" of type '" "XERCES_CPP_NAMESPACE::DatatypeValidator *""'"); 
    }
    arg7 = reinterpret_cast< XERCES_CPP_NAMESPACE::DatatypeValidator * >(argp7);
    {
      try 
      {
        (arg1)->set(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5,arg6,arg7);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    delete[] arg5;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    delete[] arg5;
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_set__SWIG_2) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    unsigned int arg2 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg6 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: XMLAttr_set(self,uriId,attrName,attrPrefix,attrValue,type);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_set" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttr_set" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    
    // we convert *everything* into a string *including* undef
    arg5 = UTF8_TRANSCODER->Local2XMLString(ST(4));
    
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "XMLAttr_set" "', argument " "6"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg6 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val6);
    {
      try 
      {
        (arg1)->set(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5,arg6);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    delete[] arg5;
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    delete[] arg5;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_set__SWIG_3) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    unsigned int arg2 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: XMLAttr_set(self,uriId,attrName,attrPrefix,attrValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_set" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttr_set" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    
    // we convert *everything* into a string *including* undef
    arg5 = UTF8_TRANSCODER->Local2XMLString(ST(4));
    
    {
      try 
      {
        (arg1)->set(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    delete[] arg5;
    
    XSRETURN(argvi);
  fail:
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    delete[] arg5;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_set__SWIG_4) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    unsigned int arg2 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg5 ;
    XERCES_CPP_NAMESPACE::DatatypeValidator *arg6 = (XERCES_CPP_NAMESPACE::DatatypeValidator *) 0 ;
    bool arg7 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    bool val7 ;
    int ecode7 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 7) || (items > 7)) {
      SWIG_croak("Usage: XMLAttr_set(self,uriId,attrRawName,attrValue,type,datatypeValidator,isSchema);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_set" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttr_set" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "XMLAttr_set" "', argument " "5"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg5 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val5);
    res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "XMLAttr_set" "', argument " "6"" of type '" "XERCES_CPP_NAMESPACE::DatatypeValidator *""'"); 
    }
    arg6 = reinterpret_cast< XERCES_CPP_NAMESPACE::DatatypeValidator * >(argp6);
    ecode7 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "XMLAttr_set" "', argument " "7"" of type '" "bool""'");
    } 
    arg7 = static_cast< bool >(val7);
    {
      try 
      {
        (arg1)->set(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,arg5,arg6,arg7);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_set__SWIG_5) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    unsigned int arg2 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg5 ;
    XERCES_CPP_NAMESPACE::DatatypeValidator *arg6 = (XERCES_CPP_NAMESPACE::DatatypeValidator *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: XMLAttr_set(self,uriId,attrRawName,attrValue,type,datatypeValidator);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_set" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttr_set" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "XMLAttr_set" "', argument " "5"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg5 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val5);
    res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "XMLAttr_set" "', argument " "6"" of type '" "XERCES_CPP_NAMESPACE::DatatypeValidator *""'"); 
    }
    arg6 = reinterpret_cast< XERCES_CPP_NAMESPACE::DatatypeValidator * >(argp6);
    {
      try 
      {
        (arg1)->set(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,arg5,arg6);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_set__SWIG_6) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    unsigned int arg2 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: XMLAttr_set(self,uriId,attrRawName,attrValue,type);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_set" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttr_set" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "XMLAttr_set" "', argument " "5"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg5 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val5);
    {
      try 
      {
        (arg1)->set(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,arg5);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_set__SWIG_7) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    unsigned int arg2 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: XMLAttr_set(self,uriId,attrRawName,attrValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_set" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttr_set" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    {
      try 
      {
        (arg1)->set(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    XSRETURN(argvi);
  fail:
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_set) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 6) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(5), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 6) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 7) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(5), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
    if (items == 7) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(6), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 7;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_7:
    
    if (items == 8) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(6), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 8;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_8:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLAttr_set__SWIG_7); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLAttr_set__SWIG_6); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLAttr_set__SWIG_3); return;
    case 4:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLAttr_set__SWIG_5); return;
    case 5:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLAttr_set__SWIG_2); return;
    case 6:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLAttr_set__SWIG_4); return;
    case 7:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLAttr_set__SWIG_1); return;
    case 8:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLAttr_set__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'XMLAttr_set'");
  XSRETURN(0);
}


XS(_wrap_XMLAttr_setName) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    unsigned int arg2 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: XMLAttr_setName(self,uriId,attrName,attrPrefix);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_setName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttr_setName" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    {
      try 
      {
        (arg1)->setName(arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    XSRETURN(argvi);
  fail:
    
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_setSpecified) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    bool arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    bool val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLAttr_setSpecified(self,newValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_setSpecified" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    ecode2 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttr_setSpecified" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
    {
      try 
      {
        (arg1)->setSpecified(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_setType) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLAttr_setType(self,newType);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_setType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttr_setType" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes""'");
    } 
    arg2 = static_cast< XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes >(val2);
    {
      try 
      {
        (arg1)->setType(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_setValue) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLAttr_setValue(self,newValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_setValue" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setValue((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLAttr_setURIId) {
  {
    XERCES_CPP_NAMESPACE::XMLAttr *arg1 = (XERCES_CPP_NAMESPACE::XMLAttr *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLAttr_setURIId(self,uriId);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLAttr_setURIId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLAttr *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLAttr * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XMLAttr_setURIId" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        (arg1)->setURIId(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_XMLDocumentHandler) {
  {
    XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLDocumentHandler(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLDocumentHandler" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDocumentHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDocumentHandler * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDocumentHandler_docCharacters) {
  {
    XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    unsigned int arg3 ;
    bool arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    bool val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: XMLDocumentHandler_docCharacters(self,chars,length,cdataSection);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDocumentHandler_docCharacters" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDocumentHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDocumentHandler * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XMLDocumentHandler_docCharacters" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "XMLDocumentHandler_docCharacters" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
    {
      try 
      {
        (arg1)->docCharacters((XMLCh const *)arg2,arg3,arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDocumentHandler_docComment) {
  {
    XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLDocumentHandler_docComment(self,comment);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDocumentHandler_docComment" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDocumentHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDocumentHandler * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->docComment((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDocumentHandler_docPI) {
  {
    XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: XMLDocumentHandler_docPI(self,target,data);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDocumentHandler_docPI" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDocumentHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDocumentHandler * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    {
      try 
      {
        (arg1)->docPI((XMLCh const *)arg2,(XMLCh const *)arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDocumentHandler_endDocument) {
  {
    XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLDocumentHandler_endDocument(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDocumentHandler_endDocument" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDocumentHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDocumentHandler * >(argp1);
    {
      try 
      {
        (arg1)->endDocument();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDocumentHandler_endElement__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) 0 ;
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg2 = 0 ;
    unsigned int arg3 ;
    bool arg4 ;
    XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    bool val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: XMLDocumentHandler_endElement(self,elemDecl,uriId,isRoot,prefixName);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDocumentHandler_endElement" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDocumentHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDocumentHandler * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLDocumentHandler_endElement" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLDocumentHandler_endElement" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XMLDocumentHandler_endElement" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "XMLDocumentHandler_endElement" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
    
    // we convert *everything* into a string *including* undef
    arg5 = UTF8_TRANSCODER->Local2XMLString(ST(4));
    
    {
      try 
      {
        (arg1)->endElement((XERCES_CPP_NAMESPACE::XMLElementDecl const &)*arg2,arg3,arg4,(XMLCh const *)arg5);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    
    
    delete[] arg5;
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    delete[] arg5;
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDocumentHandler_endElement__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) 0 ;
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg2 = 0 ;
    unsigned int arg3 ;
    bool arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    bool val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: XMLDocumentHandler_endElement(self,elemDecl,uriId,isRoot);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDocumentHandler_endElement" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDocumentHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDocumentHandler * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLDocumentHandler_endElement" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLDocumentHandler_endElement" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XMLDocumentHandler_endElement" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "XMLDocumentHandler_endElement" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
    {
      try 
      {
        (arg1)->endElement((XERCES_CPP_NAMESPACE::XMLElementDecl const &)*arg2,arg3,arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDocumentHandler_endElement) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLDocumentHandler_endElement__SWIG_1); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_XMLDocumentHandler_endElement__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'XMLDocumentHandler_endElement'");
  XSRETURN(0);
}


XS(_wrap_XMLDocumentHandler_endEntityReference) {
  {
    XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) 0 ;
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLDocumentHandler_endEntityReference(self,entDecl);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDocumentHandler_endEntityReference" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDocumentHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDocumentHandler * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLDocumentHandler_endEntityReference" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLDocumentHandler_endEntityReference" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp2);
    {
      try 
      {
        (arg1)->endEntityReference((XERCES_CPP_NAMESPACE::XMLEntityDecl const &)*arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDocumentHandler_ignorableWhitespace) {
  {
    XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    unsigned int arg3 ;
    bool arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    bool val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: XMLDocumentHandler_ignorableWhitespace(self,chars,length,cdataSection);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDocumentHandler_ignorableWhitespace" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDocumentHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDocumentHandler * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XMLDocumentHandler_ignorableWhitespace" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "XMLDocumentHandler_ignorableWhitespace" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
    {
      try 
      {
        (arg1)->ignorableWhitespace((XMLCh const *)arg2,arg3,arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDocumentHandler_resetDocument) {
  {
    XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLDocumentHandler_resetDocument(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDocumentHandler_resetDocument" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDocumentHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDocumentHandler * >(argp1);
    {
      try 
      {
        (arg1)->resetDocument();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDocumentHandler_startDocument) {
  {
    XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLDocumentHandler_startDocument(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDocumentHandler_startDocument" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDocumentHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDocumentHandler * >(argp1);
    {
      try 
      {
        (arg1)->startDocument();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDocumentHandler_startElement) {
  {
    XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) 0 ;
    XERCES_CPP_NAMESPACE::XMLElementDecl *arg2 = 0 ;
    unsigned int arg3 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *arg5 = 0 ;
    unsigned int arg6 ;
    bool arg7 ;
    bool arg8 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    void *argp5 ;
    int res5 = 0 ;
    unsigned int val6 ;
    int ecode6 = 0 ;
    bool val7 ;
    int ecode7 = 0 ;
    bool val8 ;
    int ecode8 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 8) || (items > 8)) {
      SWIG_croak("Usage: XMLDocumentHandler_startElement(self,elemDecl,uriId,prefixName,attrList,attrCount,isEmpty,isRoot);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDocumentHandler_startElement" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDocumentHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDocumentHandler * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLDocumentHandler_startElement" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLDocumentHandler_startElement" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLElementDecl const &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLElementDecl * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XMLDocumentHandler_startElement" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    res5 = SWIG_ConvertPtr(ST(4), &argp5, SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t,  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "XMLDocumentHandler_startElement" "', argument " "5"" of type '" "XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > const &""'"); 
    }
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLDocumentHandler_startElement" "', argument " "5"" of type '" "XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > const &""'"); 
    }
    arg5 = reinterpret_cast< XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > * >(argp5);
    ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "XMLDocumentHandler_startElement" "', argument " "6"" of type '" "unsigned int""'");
    } 
    arg6 = static_cast< unsigned int >(val6);
    ecode7 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "XMLDocumentHandler_startElement" "', argument " "7"" of type '" "bool""'");
    } 
    arg7 = static_cast< bool >(val7);
    ecode8 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "XMLDocumentHandler_startElement" "', argument " "8"" of type '" "bool""'");
    } 
    arg8 = static_cast< bool >(val8);
    {
      try 
      {
        (arg1)->startElement((XERCES_CPP_NAMESPACE::XMLElementDecl const &)*arg2,arg3,(XMLCh const *)arg4,(XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > const &)*arg5,arg6,arg7,arg8);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    
    delete[] arg4;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    delete[] arg4;
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDocumentHandler_startEntityReference) {
  {
    XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) 0 ;
    XERCES_CPP_NAMESPACE::XMLEntityDecl *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: XMLDocumentHandler_startEntityReference(self,entDecl);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDocumentHandler_startEntityReference" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDocumentHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDocumentHandler * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XMLDocumentHandler_startEntityReference" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XMLDocumentHandler_startEntityReference" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityDecl const &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityDecl * >(argp2);
    {
      try 
      {
        (arg1)->startEntityReference((XERCES_CPP_NAMESPACE::XMLEntityDecl const &)*arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLDocumentHandler_XMLDecl) {
  {
    XERCES_CPP_NAMESPACE::XMLDocumentHandler *arg1 = (XERCES_CPP_NAMESPACE::XMLDocumentHandler *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: XMLDocumentHandler_XMLDecl(self,versionStr,encodingStr,standaloneStr,autoEncodingStr);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLDocumentHandler_XMLDecl" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLDocumentHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLDocumentHandler * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    
    // we convert *everything* into a string *including* undef
    arg5 = UTF8_TRANSCODER->Local2XMLString(ST(4));
    
    {
      try 
      {
        (arg1)->XMLDecl((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    delete[] arg5;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    delete[] arg5;
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_EntityResolver) {
  {
    XERCES_CPP_NAMESPACE::EntityResolver *arg1 = (XERCES_CPP_NAMESPACE::EntityResolver *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_EntityResolver(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__EntityResolver, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EntityResolver" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::EntityResolver *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::EntityResolver * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLResourceIdentifier__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ResourceIdentifierType arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::Locator *arg6 = (XERCES_CPP_NAMESPACE::Locator *) 0 ;
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier *result = 0 ;
    int val1 ;
    int ecode1 = 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: new_XMLResourceIdentifier(resourceIdentitiferType,systemId,nameSpace,publicId,baseURI,locator);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLResourceIdentifier" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ResourceIdentifierType""'");
    } 
    arg1 = static_cast< XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ResourceIdentifierType >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    
    // we convert *everything* into a string *including* undef
    arg5 = UTF8_TRANSCODER->Local2XMLString(ST(4));
    
    res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_XMLResourceIdentifier" "', argument " "6"" of type '" "XERCES_CPP_NAMESPACE::Locator const *""'"); 
    }
    arg6 = reinterpret_cast< XERCES_CPP_NAMESPACE::Locator * >(argp6);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLResourceIdentifier *)new XERCES_CPP_NAMESPACE::XMLResourceIdentifier(arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5,(XERCES_CPP_NAMESPACE::Locator const *)arg6);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    delete[] arg5;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    delete[] arg5;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLResourceIdentifier__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ResourceIdentifierType arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg5 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier *result = 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: new_XMLResourceIdentifier(resourceIdentitiferType,systemId,nameSpace,publicId,baseURI);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLResourceIdentifier" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ResourceIdentifierType""'");
    } 
    arg1 = static_cast< XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ResourceIdentifierType >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    
    // we convert *everything* into a string *including* undef
    arg5 = UTF8_TRANSCODER->Local2XMLString(ST(4));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLResourceIdentifier *)new XERCES_CPP_NAMESPACE::XMLResourceIdentifier(arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4,(XMLCh const *)arg5);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    delete[] arg5;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    
    delete[] arg5;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLResourceIdentifier__SWIG_2) {
  {
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ResourceIdentifierType arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier *result = 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: new_XMLResourceIdentifier(resourceIdentitiferType,systemId,nameSpace,publicId);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLResourceIdentifier" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ResourceIdentifierType""'");
    } 
    arg1 = static_cast< XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ResourceIdentifierType >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLResourceIdentifier *)new XERCES_CPP_NAMESPACE::XMLResourceIdentifier(arg1,(XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    delete[] arg4;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLResourceIdentifier__SWIG_3) {
  {
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ResourceIdentifierType arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier *result = 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: new_XMLResourceIdentifier(resourceIdentitiferType,systemId,nameSpace);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLResourceIdentifier" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ResourceIdentifierType""'");
    } 
    arg1 = static_cast< XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ResourceIdentifierType >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLResourceIdentifier *)new XERCES_CPP_NAMESPACE::XMLResourceIdentifier(arg1,(XMLCh const *)arg2,(XMLCh const *)arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLResourceIdentifier__SWIG_4) {
  {
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ResourceIdentifierType arg1 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier *result = 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_XMLResourceIdentifier(resourceIdentitiferType,systemId);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XMLResourceIdentifier" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ResourceIdentifierType""'");
    } 
    arg1 = static_cast< XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ResourceIdentifierType >(val1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLResourceIdentifier *)new XERCES_CPP_NAMESPACE::XMLResourceIdentifier(arg1,(XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_XMLResourceIdentifier) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 6) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(5), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLResourceIdentifier__SWIG_4); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLResourceIdentifier__SWIG_3); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLResourceIdentifier__SWIG_2); return;
    case 4:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLResourceIdentifier__SWIG_1); return;
    case 5:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_XMLResourceIdentifier__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_XMLResourceIdentifier'");
  XSRETURN(0);
}


XS(_wrap_delete_XMLResourceIdentifier) {
  {
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier *arg1 = (XERCES_CPP_NAMESPACE::XMLResourceIdentifier *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLResourceIdentifier(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLResourceIdentifier" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLResourceIdentifier *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLResourceIdentifier * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLResourceIdentifier_getResourceIdentifierType) {
  {
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier *arg1 = (XERCES_CPP_NAMESPACE::XMLResourceIdentifier *) 0 ;
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ResourceIdentifierType result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLResourceIdentifier_getResourceIdentifierType(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLResourceIdentifier_getResourceIdentifierType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLResourceIdentifier const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLResourceIdentifier * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ResourceIdentifierType)((XERCES_CPP_NAMESPACE::XMLResourceIdentifier const *)arg1)->getResourceIdentifierType();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLResourceIdentifier_getPublicId) {
  {
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier *arg1 = (XERCES_CPP_NAMESPACE::XMLResourceIdentifier *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLResourceIdentifier_getPublicId(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLResourceIdentifier_getPublicId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLResourceIdentifier const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLResourceIdentifier * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLResourceIdentifier const *)arg1)->getPublicId();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLResourceIdentifier_getSystemId) {
  {
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier *arg1 = (XERCES_CPP_NAMESPACE::XMLResourceIdentifier *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLResourceIdentifier_getSystemId(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLResourceIdentifier_getSystemId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLResourceIdentifier const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLResourceIdentifier * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLResourceIdentifier const *)arg1)->getSystemId();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLResourceIdentifier_getSchemaLocation) {
  {
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier *arg1 = (XERCES_CPP_NAMESPACE::XMLResourceIdentifier *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLResourceIdentifier_getSchemaLocation(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLResourceIdentifier_getSchemaLocation" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLResourceIdentifier const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLResourceIdentifier * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLResourceIdentifier const *)arg1)->getSchemaLocation();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLResourceIdentifier_getBaseURI) {
  {
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier *arg1 = (XERCES_CPP_NAMESPACE::XMLResourceIdentifier *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLResourceIdentifier_getBaseURI(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLResourceIdentifier_getBaseURI" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLResourceIdentifier const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLResourceIdentifier * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLResourceIdentifier const *)arg1)->getBaseURI();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLResourceIdentifier_getNameSpace) {
  {
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier *arg1 = (XERCES_CPP_NAMESPACE::XMLResourceIdentifier *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLResourceIdentifier_getNameSpace(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLResourceIdentifier_getNameSpace" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLResourceIdentifier const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLResourceIdentifier * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::XMLResourceIdentifier const *)arg1)->getNameSpace();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_XMLResourceIdentifier_getLocator) {
  {
    XERCES_CPP_NAMESPACE::XMLResourceIdentifier *arg1 = (XERCES_CPP_NAMESPACE::XMLResourceIdentifier *) 0 ;
    XERCES_CPP_NAMESPACE::Locator *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: XMLResourceIdentifier_getLocator(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XMLResourceIdentifier_getLocator" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLResourceIdentifier const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLResourceIdentifier * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::Locator *)((XERCES_CPP_NAMESPACE::XMLResourceIdentifier const *)arg1)->getLocator();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__Locator, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_XMLEntityResolver) {
  {
    XERCES_CPP_NAMESPACE::XMLEntityResolver *arg1 = (XERCES_CPP_NAMESPACE::XMLEntityResolver *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_XMLEntityResolver(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityResolver, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XMLEntityResolver" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::XMLEntityResolver *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::XMLEntityResolver * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_PSVIItem) {
  {
    XERCES_CPP_NAMESPACE::PSVIItem *arg1 = (XERCES_CPP_NAMESPACE::PSVIItem *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_PSVIItem(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIItem, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PSVIItem" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIItem * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIItem_getValidationContext) {
  {
    XERCES_CPP_NAMESPACE::PSVIItem *arg1 = (XERCES_CPP_NAMESPACE::PSVIItem *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIItem_getValidationContext(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIItem, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIItem_getValidationContext" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIItem * >(argp1);
    {
      try 
      {
        result = (XMLCh *)(arg1)->getValidationContext();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIItem_getValidity) {
  {
    XERCES_CPP_NAMESPACE::PSVIItem *arg1 = (XERCES_CPP_NAMESPACE::PSVIItem *) 0 ;
    XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIItem_getValidity(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIItem, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIItem_getValidity" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIItem * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE)((XERCES_CPP_NAMESPACE::PSVIItem const *)arg1)->getValidity();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIItem_getValidationAttempted) {
  {
    XERCES_CPP_NAMESPACE::PSVIItem *arg1 = (XERCES_CPP_NAMESPACE::PSVIItem *) 0 ;
    XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIItem_getValidationAttempted(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIItem, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIItem_getValidationAttempted" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIItem * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE)((XERCES_CPP_NAMESPACE::PSVIItem const *)arg1)->getValidationAttempted();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIItem_getSchemaNormalizedValue) {
  {
    XERCES_CPP_NAMESPACE::PSVIItem *arg1 = (XERCES_CPP_NAMESPACE::PSVIItem *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIItem_getSchemaNormalizedValue(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIItem, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIItem_getSchemaNormalizedValue" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIItem * >(argp1);
    {
      try 
      {
        result = (XMLCh *)(arg1)->getSchemaNormalizedValue();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIItem_getTypeDefinition) {
  {
    XERCES_CPP_NAMESPACE::PSVIItem *arg1 = (XERCES_CPP_NAMESPACE::PSVIItem *) 0 ;
    XERCES_CPP_NAMESPACE::XSTypeDefinition *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIItem_getTypeDefinition(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIItem, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIItem_getTypeDefinition" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIItem * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XSTypeDefinition *)(arg1)->getTypeDefinition();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSTypeDefinition, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIItem_getMemberTypeDefinition) {
  {
    XERCES_CPP_NAMESPACE::PSVIItem *arg1 = (XERCES_CPP_NAMESPACE::PSVIItem *) 0 ;
    XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIItem_getMemberTypeDefinition(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIItem, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIItem_getMemberTypeDefinition" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIItem * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *)(arg1)->getMemberTypeDefinition();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIItem_getSchemaDefault) {
  {
    XERCES_CPP_NAMESPACE::PSVIItem *arg1 = (XERCES_CPP_NAMESPACE::PSVIItem *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIItem_getSchemaDefault(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIItem, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIItem_getSchemaDefault" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIItem * >(argp1);
    {
      try 
      {
        result = (XMLCh *)(arg1)->getSchemaDefault();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIItem_getIsSchemaSpecified) {
  {
    XERCES_CPP_NAMESPACE::PSVIItem *arg1 = (XERCES_CPP_NAMESPACE::PSVIItem *) 0 ;
    bool result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIItem_getIsSchemaSpecified(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIItem, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIItem_getIsSchemaSpecified" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIItem * >(argp1);
    {
      try 
      {
        result = (bool)((XERCES_CPP_NAMESPACE::PSVIItem const *)arg1)->getIsSchemaSpecified();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIItem_getCanonicalRepresentation) {
  {
    XERCES_CPP_NAMESPACE::PSVIItem *arg1 = (XERCES_CPP_NAMESPACE::PSVIItem *) 0 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIItem_getCanonicalRepresentation(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIItem, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIItem_getCanonicalRepresentation" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIItem * >(argp1);
    {
      try 
      {
        result = (XMLCh *)((XERCES_CPP_NAMESPACE::PSVIItem const *)arg1)->getCanonicalRepresentation();
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIItem_getActualValue) {
  {
    XERCES_CPP_NAMESPACE::PSVIItem *arg1 = (XERCES_CPP_NAMESPACE::PSVIItem *) 0 ;
    XERCES_CPP_NAMESPACE::XSValue *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIItem_getActualValue(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIItem, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIItem_getActualValue" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIItem * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XSValue *)((XERCES_CPP_NAMESPACE::PSVIItem const *)arg1)->getActualValue();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSValue, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIItem_setValidationAttempted) {
  {
    XERCES_CPP_NAMESPACE::PSVIItem *arg1 = (XERCES_CPP_NAMESPACE::PSVIItem *) 0 ;
    XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PSVIItem_setValidationAttempted(self,attemptType);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIItem, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIItem_setValidationAttempted" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIItem * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PSVIItem_setValidationAttempted" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE""'");
    } 
    arg2 = static_cast< XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE >(val2);
    {
      try 
      {
        (arg1)->setValidationAttempted(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIItem_setValidity) {
  {
    XERCES_CPP_NAMESPACE::PSVIItem *arg1 = (XERCES_CPP_NAMESPACE::PSVIItem *) 0 ;
    XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PSVIItem_setValidity(self,validity);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIItem, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIItem_setValidity" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIItem * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PSVIItem_setValidity" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE""'");
    } 
    arg2 = static_cast< XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE >(val2);
    {
      try 
      {
        (arg1)->setValidity(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIItem_reset) {
  {
    XERCES_CPP_NAMESPACE::PSVIItem *arg1 = (XERCES_CPP_NAMESPACE::PSVIItem *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE arg4 ;
    XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: PSVIItem_reset(self,validationContext,normalizedValue,validityState,assessmentType);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIItem, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIItem_reset" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIItem * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PSVIItem_reset" "', argument " "4"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE""'");
    } 
    arg4 = static_cast< XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PSVIItem_reset" "', argument " "5"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE""'");
    } 
    arg5 = static_cast< XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE >(val5);
    {
      try 
      {
        (arg1)->reset((XMLCh const *)arg2,(XMLCh const *)arg3,arg4,arg5);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PSVIElement__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    XERCES_CPP_NAMESPACE::PSVIElement *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    arg1 = XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager;
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: new_PSVIElement(manager);");
    }
    if (items > 0) {
      res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PSVIElement" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
      }
      arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp1);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::PSVIElement *)new XERCES_CPP_NAMESPACE::PSVIElement(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PSVIElement__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::PSVIElement *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_PSVIElement();");
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::PSVIElement *)new XERCES_CPP_NAMESPACE::PSVIElement();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_PSVIElement) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((items >= 0) && (items <= 1)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      if (items > 0) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_PSVIElement__SWIG_0); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_PSVIElement__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_PSVIElement'");
  XSRETURN(0);
}


XS(_wrap_delete_PSVIElement) {
  {
    XERCES_CPP_NAMESPACE::PSVIElement *arg1 = (XERCES_CPP_NAMESPACE::PSVIElement *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_PSVIElement(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PSVIElement" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIElement *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIElement * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIElement_getElementDeclaration) {
  {
    XERCES_CPP_NAMESPACE::PSVIElement *arg1 = (XERCES_CPP_NAMESPACE::PSVIElement *) 0 ;
    XERCES_CPP_NAMESPACE::XSElementDeclaration *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIElement_getElementDeclaration(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIElement_getElementDeclaration" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIElement *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIElement * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XSElementDeclaration *)(arg1)->getElementDeclaration();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSElementDeclaration, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIElement_getNotationDeclaration) {
  {
    XERCES_CPP_NAMESPACE::PSVIElement *arg1 = (XERCES_CPP_NAMESPACE::PSVIElement *) 0 ;
    XERCES_CPP_NAMESPACE::XSNotationDeclaration *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIElement_getNotationDeclaration(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIElement_getNotationDeclaration" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIElement *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIElement * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XSNotationDeclaration *)(arg1)->getNotationDeclaration();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSNotationDeclaration, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIElement_getSchemaInformation) {
  {
    XERCES_CPP_NAMESPACE::PSVIElement *arg1 = (XERCES_CPP_NAMESPACE::PSVIElement *) 0 ;
    XERCES_CPP_NAMESPACE::XSModel *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIElement_getSchemaInformation(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIElement_getSchemaInformation" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIElement *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIElement * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XSModel *)(arg1)->getSchemaInformation();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSModel, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIElement_getTypeDefinition) {
  {
    XERCES_CPP_NAMESPACE::PSVIElement *arg1 = (XERCES_CPP_NAMESPACE::PSVIElement *) 0 ;
    XERCES_CPP_NAMESPACE::XSTypeDefinition *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIElement_getTypeDefinition(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIElement_getTypeDefinition" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIElement *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIElement * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XSTypeDefinition *)(arg1)->getTypeDefinition();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSTypeDefinition, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIElement_getMemberTypeDefinition) {
  {
    XERCES_CPP_NAMESPACE::PSVIElement *arg1 = (XERCES_CPP_NAMESPACE::PSVIElement *) 0 ;
    XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIElement_getMemberTypeDefinition(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIElement_getMemberTypeDefinition" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIElement *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIElement * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *)(arg1)->getMemberTypeDefinition();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIElement_reset__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::PSVIElement *arg1 = (XERCES_CPP_NAMESPACE::PSVIElement *) 0 ;
    XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE arg2 ;
    XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE arg3 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    bool arg5 ;
    XERCES_CPP_NAMESPACE::XSElementDeclaration *arg6 = (XERCES_CPP_NAMESPACE::XSElementDeclaration *) (XERCES_CPP_NAMESPACE::XSElementDeclaration *)0 ;
    XERCES_CPP_NAMESPACE::XSTypeDefinition *arg7 = (XERCES_CPP_NAMESPACE::XSTypeDefinition *) (XERCES_CPP_NAMESPACE::XSTypeDefinition *)0 ;
    XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *arg8 = (XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *) (XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *)0 ;
    XERCES_CPP_NAMESPACE::XSModel *arg9 = (XERCES_CPP_NAMESPACE::XSModel *) (XERCES_CPP_NAMESPACE::XSModel *)0 ;
    XMLCh *arg10 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg11 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg12 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::XSNotationDeclaration *arg13 = (XERCES_CPP_NAMESPACE::XSNotationDeclaration *) (XERCES_CPP_NAMESPACE::XSNotationDeclaration *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    bool val5 ;
    int ecode5 = 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    void *argp7 = 0 ;
    int res7 = 0 ;
    void *argp8 = 0 ;
    int res8 = 0 ;
    void *argp9 = 0 ;
    int res9 = 0 ;
    void *argp13 = 0 ;
    int res13 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 13) || (items > 13)) {
      SWIG_croak("Usage: PSVIElement_reset(self,validityState,assessmentType,validationContext,isSpecified,elemDecl,typeDef,memberType,schemaInfo,defaultValue,normalizedValue,canonicalValue,notationDecl);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIElement_reset" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIElement *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIElement * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PSVIElement_reset" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE""'");
    } 
    arg2 = static_cast< XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PSVIElement_reset" "', argument " "3"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE""'");
    } 
    arg3 = static_cast< XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE >(val3);
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    ecode5 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PSVIElement_reset" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSElementDeclaration, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PSVIElement_reset" "', argument " "6"" of type '" "XERCES_CPP_NAMESPACE::XSElementDeclaration *const""'"); 
    }
    arg6 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSElementDeclaration * >(argp6);
    res7 = SWIG_ConvertPtr(ST(6), &argp7,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSTypeDefinition, 0 |  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PSVIElement_reset" "', argument " "7"" of type '" "XERCES_CPP_NAMESPACE::XSTypeDefinition *const""'"); 
    }
    arg7 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSTypeDefinition * >(argp7);
    res8 = SWIG_ConvertPtr(ST(7), &argp8,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition, 0 |  0 );
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "PSVIElement_reset" "', argument " "8"" of type '" "XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *const""'"); 
    }
    arg8 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition * >(argp8);
    res9 = SWIG_ConvertPtr(ST(8), &argp9,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSModel, 0 |  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "PSVIElement_reset" "', argument " "9"" of type '" "XERCES_CPP_NAMESPACE::XSModel *const""'"); 
    }
    arg9 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSModel * >(argp9);
    
    // we convert *everything* into a string *including* undef
    arg10 = UTF8_TRANSCODER->Local2XMLString(ST(9));
    
    
    // we convert *everything* into a string *including* undef
    arg11 = UTF8_TRANSCODER->Local2XMLString(ST(10));
    
    
    // we convert *everything* into a string *including* undef
    arg12 = UTF8_TRANSCODER->Local2XMLString(ST(11));
    
    res13 = SWIG_ConvertPtr(ST(12), &argp13,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSNotationDeclaration, 0 |  0 );
    if (!SWIG_IsOK(res13)) {
      SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "PSVIElement_reset" "', argument " "13"" of type '" "XERCES_CPP_NAMESPACE::XSNotationDeclaration *const""'"); 
    }
    arg13 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSNotationDeclaration * >(argp13);
    {
      try 
      {
        (arg1)->reset(arg2,arg3,(XMLCh const *)arg4,arg5,arg6,arg7,arg8,arg9,(XMLCh const *)arg10,(XMLCh const *)arg11,arg12,arg13);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    
    delete[] arg4;
    
    
    
    
    
    
    
    delete[] arg10;
    
    
    delete[] arg11;
    
    
    delete[] arg12;
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    delete[] arg4;
    
    
    
    
    
    
    
    delete[] arg10;
    
    
    delete[] arg11;
    
    
    delete[] arg12;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIElement_reset__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::PSVIElement *arg1 = (XERCES_CPP_NAMESPACE::PSVIElement *) 0 ;
    XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE arg2 ;
    XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE arg3 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    bool arg5 ;
    XERCES_CPP_NAMESPACE::XSElementDeclaration *arg6 = (XERCES_CPP_NAMESPACE::XSElementDeclaration *) (XERCES_CPP_NAMESPACE::XSElementDeclaration *)0 ;
    XERCES_CPP_NAMESPACE::XSTypeDefinition *arg7 = (XERCES_CPP_NAMESPACE::XSTypeDefinition *) (XERCES_CPP_NAMESPACE::XSTypeDefinition *)0 ;
    XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *arg8 = (XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *) (XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *)0 ;
    XERCES_CPP_NAMESPACE::XSModel *arg9 = (XERCES_CPP_NAMESPACE::XSModel *) (XERCES_CPP_NAMESPACE::XSModel *)0 ;
    XMLCh *arg10 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg11 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg12 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    bool val5 ;
    int ecode5 = 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    void *argp7 = 0 ;
    int res7 = 0 ;
    void *argp8 = 0 ;
    int res8 = 0 ;
    void *argp9 = 0 ;
    int res9 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 12) || (items > 12)) {
      SWIG_croak("Usage: PSVIElement_reset(self,validityState,assessmentType,validationContext,isSpecified,elemDecl,typeDef,memberType,schemaInfo,defaultValue,normalizedValue,canonicalValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIElement_reset" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIElement *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIElement * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PSVIElement_reset" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE""'");
    } 
    arg2 = static_cast< XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PSVIElement_reset" "', argument " "3"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE""'");
    } 
    arg3 = static_cast< XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE >(val3);
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    ecode5 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PSVIElement_reset" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSElementDeclaration, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PSVIElement_reset" "', argument " "6"" of type '" "XERCES_CPP_NAMESPACE::XSElementDeclaration *const""'"); 
    }
    arg6 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSElementDeclaration * >(argp6);
    res7 = SWIG_ConvertPtr(ST(6), &argp7,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSTypeDefinition, 0 |  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PSVIElement_reset" "', argument " "7"" of type '" "XERCES_CPP_NAMESPACE::XSTypeDefinition *const""'"); 
    }
    arg7 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSTypeDefinition * >(argp7);
    res8 = SWIG_ConvertPtr(ST(7), &argp8,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition, 0 |  0 );
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "PSVIElement_reset" "', argument " "8"" of type '" "XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *const""'"); 
    }
    arg8 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition * >(argp8);
    res9 = SWIG_ConvertPtr(ST(8), &argp9,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSModel, 0 |  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "PSVIElement_reset" "', argument " "9"" of type '" "XERCES_CPP_NAMESPACE::XSModel *const""'"); 
    }
    arg9 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSModel * >(argp9);
    
    // we convert *everything* into a string *including* undef
    arg10 = UTF8_TRANSCODER->Local2XMLString(ST(9));
    
    
    // we convert *everything* into a string *including* undef
    arg11 = UTF8_TRANSCODER->Local2XMLString(ST(10));
    
    
    // we convert *everything* into a string *including* undef
    arg12 = UTF8_TRANSCODER->Local2XMLString(ST(11));
    
    {
      try 
      {
        (arg1)->reset(arg2,arg3,(XMLCh const *)arg4,arg5,arg6,arg7,arg8,arg9,(XMLCh const *)arg10,(XMLCh const *)arg11,arg12);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    
    delete[] arg4;
    
    
    
    
    
    
    
    delete[] arg10;
    
    
    delete[] arg11;
    
    
    delete[] arg12;
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    delete[] arg4;
    
    
    
    
    
    
    
    delete[] arg10;
    
    
    delete[] arg11;
    
    
    delete[] arg12;
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIElement_reset__SWIG_2) {
  {
    XERCES_CPP_NAMESPACE::PSVIElement *arg1 = (XERCES_CPP_NAMESPACE::PSVIElement *) 0 ;
    XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE arg2 ;
    XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE arg3 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    bool arg5 ;
    XERCES_CPP_NAMESPACE::XSElementDeclaration *arg6 = (XERCES_CPP_NAMESPACE::XSElementDeclaration *) (XERCES_CPP_NAMESPACE::XSElementDeclaration *)0 ;
    XERCES_CPP_NAMESPACE::XSTypeDefinition *arg7 = (XERCES_CPP_NAMESPACE::XSTypeDefinition *) (XERCES_CPP_NAMESPACE::XSTypeDefinition *)0 ;
    XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *arg8 = (XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *) (XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *)0 ;
    XERCES_CPP_NAMESPACE::XSModel *arg9 = (XERCES_CPP_NAMESPACE::XSModel *) (XERCES_CPP_NAMESPACE::XSModel *)0 ;
    XMLCh *arg10 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg11 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    bool val5 ;
    int ecode5 = 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    void *argp7 = 0 ;
    int res7 = 0 ;
    void *argp8 = 0 ;
    int res8 = 0 ;
    void *argp9 = 0 ;
    int res9 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 11) || (items > 11)) {
      SWIG_croak("Usage: PSVIElement_reset(self,validityState,assessmentType,validationContext,isSpecified,elemDecl,typeDef,memberType,schemaInfo,defaultValue,normalizedValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIElement_reset" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIElement *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIElement * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PSVIElement_reset" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE""'");
    } 
    arg2 = static_cast< XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PSVIElement_reset" "', argument " "3"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE""'");
    } 
    arg3 = static_cast< XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE >(val3);
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    ecode5 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PSVIElement_reset" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSElementDeclaration, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PSVIElement_reset" "', argument " "6"" of type '" "XERCES_CPP_NAMESPACE::XSElementDeclaration *const""'"); 
    }
    arg6 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSElementDeclaration * >(argp6);
    res7 = SWIG_ConvertPtr(ST(6), &argp7,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSTypeDefinition, 0 |  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PSVIElement_reset" "', argument " "7"" of type '" "XERCES_CPP_NAMESPACE::XSTypeDefinition *const""'"); 
    }
    arg7 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSTypeDefinition * >(argp7);
    res8 = SWIG_ConvertPtr(ST(7), &argp8,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition, 0 |  0 );
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "PSVIElement_reset" "', argument " "8"" of type '" "XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *const""'"); 
    }
    arg8 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition * >(argp8);
    res9 = SWIG_ConvertPtr(ST(8), &argp9,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSModel, 0 |  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "PSVIElement_reset" "', argument " "9"" of type '" "XERCES_CPP_NAMESPACE::XSModel *const""'"); 
    }
    arg9 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSModel * >(argp9);
    
    // we convert *everything* into a string *including* undef
    arg10 = UTF8_TRANSCODER->Local2XMLString(ST(9));
    
    
    // we convert *everything* into a string *including* undef
    arg11 = UTF8_TRANSCODER->Local2XMLString(ST(10));
    
    {
      try 
      {
        (arg1)->reset(arg2,arg3,(XMLCh const *)arg4,arg5,arg6,arg7,arg8,arg9,(XMLCh const *)arg10,(XMLCh const *)arg11);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    
    delete[] arg4;
    
    
    
    
    
    
    
    delete[] arg10;
    
    
    delete[] arg11;
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    delete[] arg4;
    
    
    
    
    
    
    
    delete[] arg10;
    
    
    delete[] arg11;
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIElement_reset__SWIG_3) {
  {
    XERCES_CPP_NAMESPACE::PSVIElement *arg1 = (XERCES_CPP_NAMESPACE::PSVIElement *) 0 ;
    XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE arg2 ;
    XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE arg3 ;
    XMLCh *arg4 = (XMLCh *) (XMLCh *)0 ;
    bool arg5 ;
    XERCES_CPP_NAMESPACE::XSElementDeclaration *arg6 = (XERCES_CPP_NAMESPACE::XSElementDeclaration *) (XERCES_CPP_NAMESPACE::XSElementDeclaration *)0 ;
    XERCES_CPP_NAMESPACE::XSTypeDefinition *arg7 = (XERCES_CPP_NAMESPACE::XSTypeDefinition *) (XERCES_CPP_NAMESPACE::XSTypeDefinition *)0 ;
    XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *arg8 = (XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *) (XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *)0 ;
    XERCES_CPP_NAMESPACE::XSModel *arg9 = (XERCES_CPP_NAMESPACE::XSModel *) (XERCES_CPP_NAMESPACE::XSModel *)0 ;
    XMLCh *arg10 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    bool val5 ;
    int ecode5 = 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    void *argp7 = 0 ;
    int res7 = 0 ;
    void *argp8 = 0 ;
    int res8 = 0 ;
    void *argp9 = 0 ;
    int res9 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 10) || (items > 10)) {
      SWIG_croak("Usage: PSVIElement_reset(self,validityState,assessmentType,validationContext,isSpecified,elemDecl,typeDef,memberType,schemaInfo,defaultValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIElement_reset" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIElement *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIElement * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PSVIElement_reset" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE""'");
    } 
    arg2 = static_cast< XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PSVIElement_reset" "', argument " "3"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE""'");
    } 
    arg3 = static_cast< XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE >(val3);
    
    // we convert *everything* into a string *including* undef
    arg4 = UTF8_TRANSCODER->Local2XMLString(ST(3));
    
    ecode5 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PSVIElement_reset" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
    res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSElementDeclaration, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PSVIElement_reset" "', argument " "6"" of type '" "XERCES_CPP_NAMESPACE::XSElementDeclaration *const""'"); 
    }
    arg6 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSElementDeclaration * >(argp6);
    res7 = SWIG_ConvertPtr(ST(6), &argp7,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSTypeDefinition, 0 |  0 );
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "PSVIElement_reset" "', argument " "7"" of type '" "XERCES_CPP_NAMESPACE::XSTypeDefinition *const""'"); 
    }
    arg7 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSTypeDefinition * >(argp7);
    res8 = SWIG_ConvertPtr(ST(7), &argp8,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition, 0 |  0 );
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "PSVIElement_reset" "', argument " "8"" of type '" "XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *const""'"); 
    }
    arg8 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition * >(argp8);
    res9 = SWIG_ConvertPtr(ST(8), &argp9,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSModel, 0 |  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "PSVIElement_reset" "', argument " "9"" of type '" "XERCES_CPP_NAMESPACE::XSModel *const""'"); 
    }
    arg9 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSModel * >(argp9);
    
    // we convert *everything* into a string *including* undef
    arg10 = UTF8_TRANSCODER->Local2XMLString(ST(9));
    
    {
      try 
      {
        (arg1)->reset(arg2,arg3,(XMLCh const *)arg4,arg5,arg6,arg7,arg8,arg9,(XMLCh const *)arg10);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    
    
    delete[] arg4;
    
    
    
    
    
    
    
    delete[] arg10;
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    delete[] arg4;
    
    
    
    
    
    
    
    delete[] arg10;
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIElement_reset) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 10) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(5), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSElementDeclaration, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(6), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSTypeDefinition, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(7), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(8), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSModel, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 11) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(5), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSElementDeclaration, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(6), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSTypeDefinition, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(7), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(8), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSModel, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 12) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(5), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSElementDeclaration, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(6), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSTypeDefinition, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(7), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(8), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSModel, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 13) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(5), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSElementDeclaration, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(6), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSTypeDefinition, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(7), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(8), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSModel, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(12), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSNotationDeclaration, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_PSVIElement_reset__SWIG_3); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_PSVIElement_reset__SWIG_2); return;
    case 3:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_PSVIElement_reset__SWIG_1); return;
    case 4:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_PSVIElement_reset__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'PSVIElement_reset'");
  XSRETURN(0);
}


XS(_wrap_new_PSVIAttribute__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    XERCES_CPP_NAMESPACE::PSVIAttribute *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    arg1 = XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager;
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: new_PSVIAttribute(manager);");
    }
    if (items > 0) {
      res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PSVIAttribute" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
      }
      arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp1);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::PSVIAttribute *)new XERCES_CPP_NAMESPACE::PSVIAttribute(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttribute, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PSVIAttribute__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::PSVIAttribute *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_PSVIAttribute();");
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::PSVIAttribute *)new XERCES_CPP_NAMESPACE::PSVIAttribute();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttribute, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_PSVIAttribute) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((items >= 0) && (items <= 1)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      if (items > 0) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_PSVIAttribute__SWIG_0); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_PSVIAttribute__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_PSVIAttribute'");
  XSRETURN(0);
}


XS(_wrap_delete_PSVIAttribute) {
  {
    XERCES_CPP_NAMESPACE::PSVIAttribute *arg1 = (XERCES_CPP_NAMESPACE::PSVIAttribute *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_PSVIAttribute(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttribute, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PSVIAttribute" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIAttribute *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIAttribute * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIAttribute_getAttributeDeclaration) {
  {
    XERCES_CPP_NAMESPACE::PSVIAttribute *arg1 = (XERCES_CPP_NAMESPACE::PSVIAttribute *) 0 ;
    XERCES_CPP_NAMESPACE::XSAttributeDeclaration *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIAttribute_getAttributeDeclaration(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttribute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIAttribute_getAttributeDeclaration" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIAttribute *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIAttribute * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XSAttributeDeclaration *)(arg1)->getAttributeDeclaration();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSAttributeDeclaration, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIAttribute_getTypeDefinition) {
  {
    XERCES_CPP_NAMESPACE::PSVIAttribute *arg1 = (XERCES_CPP_NAMESPACE::PSVIAttribute *) 0 ;
    XERCES_CPP_NAMESPACE::XSTypeDefinition *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIAttribute_getTypeDefinition(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttribute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIAttribute_getTypeDefinition" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIAttribute *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIAttribute * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XSTypeDefinition *)(arg1)->getTypeDefinition();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSTypeDefinition, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIAttribute_getMemberTypeDefinition) {
  {
    XERCES_CPP_NAMESPACE::PSVIAttribute *arg1 = (XERCES_CPP_NAMESPACE::PSVIAttribute *) 0 ;
    XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIAttribute_getMemberTypeDefinition(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttribute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIAttribute_getMemberTypeDefinition" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIAttribute *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIAttribute * >(argp1);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *)(arg1)->getMemberTypeDefinition();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIAttribute_reset) {
  {
    XERCES_CPP_NAMESPACE::PSVIAttribute *arg1 = (XERCES_CPP_NAMESPACE::PSVIAttribute *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE arg3 ;
    XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE arg4 ;
    XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *arg5 = (XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *) 0 ;
    XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *arg6 = (XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *) 0 ;
    XMLCh *arg7 = (XMLCh *) (XMLCh *)0 ;
    bool arg8 ;
    XERCES_CPP_NAMESPACE::XSAttributeDeclaration *arg9 = (XERCES_CPP_NAMESPACE::XSAttributeDeclaration *) 0 ;
    XERCES_CPP_NAMESPACE::DatatypeValidator *arg10 = (XERCES_CPP_NAMESPACE::DatatypeValidator *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    void *argp5 = 0 ;
    int res5 = 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    bool val8 ;
    int ecode8 = 0 ;
    void *argp9 = 0 ;
    int res9 = 0 ;
    void *argp10 = 0 ;
    int res10 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 10) || (items > 10)) {
      SWIG_croak("Usage: PSVIAttribute_reset(self,valContext,state,assessmentType,validatingType,memberType,defaultValue,isSpecified,attrDecl,dv);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttribute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIAttribute_reset" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIAttribute *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIAttribute * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PSVIAttribute_reset" "', argument " "3"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE""'");
    } 
    arg3 = static_cast< XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PSVIAttribute_reset" "', argument " "4"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE""'");
    } 
    arg4 = static_cast< XERCES_CPP_NAMESPACE::PSVIItem::ASSESSMENT_TYPE >(val4);
    res5 = SWIG_ConvertPtr(ST(4), &argp5,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition, 0 |  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PSVIAttribute_reset" "', argument " "5"" of type '" "XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *""'"); 
    }
    arg5 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition * >(argp5);
    res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PSVIAttribute_reset" "', argument " "6"" of type '" "XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *""'"); 
    }
    arg6 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition * >(argp6);
    
    // we convert *everything* into a string *including* undef
    arg7 = UTF8_TRANSCODER->Local2XMLString(ST(6));
    
    ecode8 = SWIG_AsVal_bool SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PSVIAttribute_reset" "', argument " "8"" of type '" "bool""'");
    } 
    arg8 = static_cast< bool >(val8);
    res9 = SWIG_ConvertPtr(ST(8), &argp9,SWIGTYPE_p_XERCES_CPP_NAMESPACE__XSAttributeDeclaration, 0 |  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "PSVIAttribute_reset" "', argument " "9"" of type '" "XERCES_CPP_NAMESPACE::XSAttributeDeclaration *""'"); 
    }
    arg9 = reinterpret_cast< XERCES_CPP_NAMESPACE::XSAttributeDeclaration * >(argp9);
    res10 = SWIG_ConvertPtr(ST(9), &argp10,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0 |  0 );
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "PSVIAttribute_reset" "', argument " "10"" of type '" "XERCES_CPP_NAMESPACE::DatatypeValidator *""'"); 
    }
    arg10 = reinterpret_cast< XERCES_CPP_NAMESPACE::DatatypeValidator * >(argp10);
    {
      try 
      {
        (arg1)->reset((XMLCh const *)arg2,arg3,arg4,arg5,arg6,(XMLCh const *)arg7,arg8,arg9,arg10);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    
    
    
    
    delete[] arg7;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    
    
    
    
    delete[] arg7;
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIAttribute_setValue) {
  {
    XERCES_CPP_NAMESPACE::PSVIAttribute *arg1 = (XERCES_CPP_NAMESPACE::PSVIAttribute *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PSVIAttribute_setValue(self,normalizedValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttribute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIAttribute_setValue" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIAttribute *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIAttribute * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    {
      try 
      {
        (arg1)->setValue((XMLCh const *)arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIAttribute_updateValidity) {
  {
    XERCES_CPP_NAMESPACE::PSVIAttribute *arg1 = (XERCES_CPP_NAMESPACE::PSVIAttribute *) 0 ;
    XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PSVIAttribute_updateValidity(self,newValue);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttribute, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIAttribute_updateValidity" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIAttribute *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIAttribute * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PSVIAttribute_updateValidity" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE""'");
    } 
    arg2 = static_cast< XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_STATE >(val2);
    {
      try 
      {
        (arg1)->updateValidity(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PSVIAttributeList__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::MemoryManager *arg1 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
    XERCES_CPP_NAMESPACE::PSVIAttributeList *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    arg1 = XERCES_CPP_NAMESPACE::XMLPlatformUtils::fgMemoryManager;
    if ((items < 0) || (items > 1)) {
      SWIG_croak("Usage: new_PSVIAttributeList(manager);");
    }
    if (items > 0) {
      res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PSVIAttributeList" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
      }
      arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::MemoryManager * >(argp1);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::PSVIAttributeList *)new XERCES_CPP_NAMESPACE::PSVIAttributeList(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttributeList, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PSVIAttributeList__SWIG_1) {
  {
    XERCES_CPP_NAMESPACE::PSVIAttributeList *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_PSVIAttributeList();");
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::PSVIAttributeList *)new XERCES_CPP_NAMESPACE::PSVIAttributeList();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttributeList, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_PSVIAttributeList) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if ((items >= 0) && (items <= 1)) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      if (items > 0) {
        {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0);
          _v = SWIG_CheckState(res);
        }
        if (!_v) goto check_1;
        _ranki += _v*_pi;
        _rankm += _pi;
        _pi *= SWIG_MAXCASTRANK;
      }
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_PSVIAttributeList__SWIG_0); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_PSVIAttributeList__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_PSVIAttributeList'");
  XSRETURN(0);
}


XS(_wrap_delete_PSVIAttributeList) {
  {
    XERCES_CPP_NAMESPACE::PSVIAttributeList *arg1 = (XERCES_CPP_NAMESPACE::PSVIAttributeList *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_PSVIAttributeList(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttributeList, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PSVIAttributeList" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIAttributeList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIAttributeList * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIAttributeList_getLength) {
  {
    XERCES_CPP_NAMESPACE::PSVIAttributeList *arg1 = (XERCES_CPP_NAMESPACE::PSVIAttributeList *) 0 ;
    unsigned int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIAttributeList_getLength(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttributeList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIAttributeList_getLength" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIAttributeList const *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIAttributeList * >(argp1);
    {
      try 
      {
        result = (unsigned int)((XERCES_CPP_NAMESPACE::PSVIAttributeList const *)arg1)->getLength();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIAttributeList_getAttributePSVIAtIndex) {
  {
    XERCES_CPP_NAMESPACE::PSVIAttributeList *arg1 = (XERCES_CPP_NAMESPACE::PSVIAttributeList *) 0 ;
    unsigned int arg2 ;
    XERCES_CPP_NAMESPACE::PSVIAttribute *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PSVIAttributeList_getAttributePSVIAtIndex(self,index);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttributeList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIAttributeList_getAttributePSVIAtIndex" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIAttributeList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIAttributeList * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PSVIAttributeList_getAttributePSVIAtIndex" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::PSVIAttribute *)(arg1)->getAttributePSVIAtIndex(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttribute, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIAttributeList_getAttributeNameAtIndex) {
  {
    XERCES_CPP_NAMESPACE::PSVIAttributeList *arg1 = (XERCES_CPP_NAMESPACE::PSVIAttributeList *) 0 ;
    unsigned int arg2 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PSVIAttributeList_getAttributeNameAtIndex(self,index);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttributeList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIAttributeList_getAttributeNameAtIndex" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIAttributeList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIAttributeList * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PSVIAttributeList_getAttributeNameAtIndex" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        result = (XMLCh *)(arg1)->getAttributeNameAtIndex(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIAttributeList_getAttributeNamespaceAtIndex) {
  {
    XERCES_CPP_NAMESPACE::PSVIAttributeList *arg1 = (XERCES_CPP_NAMESPACE::PSVIAttributeList *) 0 ;
    unsigned int arg2 ;
    XMLCh *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PSVIAttributeList_getAttributeNamespaceAtIndex(self,index);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttributeList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIAttributeList_getAttributeNamespaceAtIndex" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIAttributeList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIAttributeList * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PSVIAttributeList_getAttributeNamespaceAtIndex" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try 
      {
        result = (XMLCh *)(arg1)->getAttributeNamespaceAtIndex(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    ST(argvi) = UTF8_TRANSCODER->XMLString2Local(result);
    ++argvi;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIAttributeList_getAttributePSVIByName) {
  {
    XERCES_CPP_NAMESPACE::PSVIAttributeList *arg1 = (XERCES_CPP_NAMESPACE::PSVIAttributeList *) 0 ;
    XMLCh *arg2 = (XMLCh *) 0 ;
    XMLCh *arg3 = (XMLCh *) 0 ;
    XERCES_CPP_NAMESPACE::PSVIAttribute *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: PSVIAttributeList_getAttributePSVIByName(self,attrName,attrNamespace);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttributeList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIAttributeList_getAttributePSVIByName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIAttributeList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIAttributeList * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::PSVIAttribute *)(arg1)->getAttributePSVIByName((XMLCh const *)arg2,(XMLCh const *)arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttribute, 0 | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIAttributeList_getPSVIAttributeToFill) {
  {
    XERCES_CPP_NAMESPACE::PSVIAttributeList *arg1 = (XERCES_CPP_NAMESPACE::PSVIAttributeList *) 0 ;
    XMLCh *arg2 = (XMLCh *) 0 ;
    XMLCh *arg3 = (XMLCh *) 0 ;
    XERCES_CPP_NAMESPACE::PSVIAttribute *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: PSVIAttributeList_getPSVIAttributeToFill(self,attrName,attrNS);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttributeList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIAttributeList_getPSVIAttributeToFill" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIAttributeList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIAttributeList * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::PSVIAttribute *)(arg1)->getPSVIAttributeToFill((XMLCh const *)arg2,(XMLCh const *)arg3);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttribute, 0 | SWIG_SHADOW); argvi++ ;
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIAttributeList_reset) {
  {
    XERCES_CPP_NAMESPACE::PSVIAttributeList *arg1 = (XERCES_CPP_NAMESPACE::PSVIAttributeList *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PSVIAttributeList_reset(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttributeList, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIAttributeList_reset" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIAttributeList *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIAttributeList * >(argp1);
    {
      try 
      {
        (arg1)->reset();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_PSVIHandler) {
  {
    XERCES_CPP_NAMESPACE::PSVIHandler *arg1 = (XERCES_CPP_NAMESPACE::PSVIHandler *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_PSVIHandler(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIHandler, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PSVIHandler" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIHandler * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIHandler_handleElementPSVI) {
  {
    XERCES_CPP_NAMESPACE::PSVIHandler *arg1 = (XERCES_CPP_NAMESPACE::PSVIHandler *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::PSVIElement *arg4 = (XERCES_CPP_NAMESPACE::PSVIElement *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: PSVIHandler_handleElementPSVI(self,localName,uri,elementInfo);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIHandler_handleElementPSVI" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIHandler * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PSVIHandler_handleElementPSVI" "', argument " "4"" of type '" "XERCES_CPP_NAMESPACE::PSVIElement *""'"); 
    }
    arg4 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIElement * >(argp4);
    {
      try 
      {
        (arg1)->handleElementPSVI((XMLCh const *)arg2,(XMLCh const *)arg3,arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIHandler_handlePartialElementPSVI) {
  {
    XERCES_CPP_NAMESPACE::PSVIHandler *arg1 = (XERCES_CPP_NAMESPACE::PSVIHandler *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::PSVIElement *arg4 = (XERCES_CPP_NAMESPACE::PSVIElement *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: PSVIHandler_handlePartialElementPSVI(self,localName,uri,elementInfo);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIHandler_handlePartialElementPSVI" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIHandler * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PSVIHandler_handlePartialElementPSVI" "', argument " "4"" of type '" "XERCES_CPP_NAMESPACE::PSVIElement *""'"); 
    }
    arg4 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIElement * >(argp4);
    {
      try 
      {
        (arg1)->handlePartialElementPSVI((XMLCh const *)arg2,(XMLCh const *)arg3,arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PSVIHandler_handleAttributesPSVI) {
  {
    XERCES_CPP_NAMESPACE::PSVIHandler *arg1 = (XERCES_CPP_NAMESPACE::PSVIHandler *) 0 ;
    XMLCh *arg2 = (XMLCh *) (XMLCh *)0 ;
    XMLCh *arg3 = (XMLCh *) (XMLCh *)0 ;
    XERCES_CPP_NAMESPACE::PSVIAttributeList *arg4 = (XERCES_CPP_NAMESPACE::PSVIAttributeList *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: PSVIHandler_handleAttributesPSVI(self,localName,uri,psviAttributes);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PSVIHandler_handleAttributesPSVI" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PSVIHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIHandler * >(argp1);
    
    // we convert *everything* into a string *including* undef
    arg2 = UTF8_TRANSCODER->Local2XMLString(ST(1));
    
    
    // we convert *everything* into a string *including* undef
    arg3 = UTF8_TRANSCODER->Local2XMLString(ST(2));
    
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttributeList, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PSVIHandler_handleAttributesPSVI" "', argument " "4"" of type '" "XERCES_CPP_NAMESPACE::PSVIAttributeList *""'"); 
    }
    arg4 = reinterpret_cast< XERCES_CPP_NAMESPACE::PSVIAttributeList * >(argp4);
    {
      try 
      {
        (arg1)->handleAttributesPSVI((XMLCh const *)arg2,(XMLCh const *)arg3,arg4);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    XSRETURN(argvi);
  fail:
    
    
    delete[] arg2;
    
    
    delete[] arg3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_ErrorHandler) {
  {
    XERCES_CPP_NAMESPACE::ErrorHandler *arg1 = (XERCES_CPP_NAMESPACE::ErrorHandler *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ErrorHandler(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ErrorHandler" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::ErrorHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::ErrorHandler * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ErrorHandler_warning) {
  {
    XERCES_CPP_NAMESPACE::ErrorHandler *arg1 = (XERCES_CPP_NAMESPACE::ErrorHandler *) 0 ;
    XERCES_CPP_NAMESPACE::SAXParseException *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ErrorHandler_warning(self,exc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ErrorHandler_warning" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::ErrorHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::ErrorHandler * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ErrorHandler_warning" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::SAXParseException const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ErrorHandler_warning" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::SAXParseException const &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::SAXParseException * >(argp2);
    {
      try 
      {
        (arg1)->warning((XERCES_CPP_NAMESPACE::SAXParseException const &)*arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ErrorHandler_error) {
  {
    XERCES_CPP_NAMESPACE::ErrorHandler *arg1 = (XERCES_CPP_NAMESPACE::ErrorHandler *) 0 ;
    XERCES_CPP_NAMESPACE::SAXParseException *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ErrorHandler_error(self,exc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ErrorHandler_error" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::ErrorHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::ErrorHandler * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ErrorHandler_error" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::SAXParseException const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ErrorHandler_error" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::SAXParseException const &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::SAXParseException * >(argp2);
    {
      try 
      {
        (arg1)->error((XERCES_CPP_NAMESPACE::SAXParseException const &)*arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ErrorHandler_fatalError) {
  {
    XERCES_CPP_NAMESPACE::ErrorHandler *arg1 = (XERCES_CPP_NAMESPACE::ErrorHandler *) 0 ;
    XERCES_CPP_NAMESPACE::SAXParseException *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ErrorHandler_fatalError(self,exc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ErrorHandler_fatalError" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::ErrorHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::ErrorHandler * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ErrorHandler_fatalError" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::SAXParseException const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ErrorHandler_fatalError" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::SAXParseException const &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::SAXParseException * >(argp2);
    {
      try 
      {
        (arg1)->fatalError((XERCES_CPP_NAMESPACE::SAXParseException const &)*arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ErrorHandler_resetErrors) {
  {
    XERCES_CPP_NAMESPACE::ErrorHandler *arg1 = (XERCES_CPP_NAMESPACE::ErrorHandler *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ErrorHandler_resetErrors(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ErrorHandler_resetErrors" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::ErrorHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::ErrorHandler * >(argp1);
    {
      try 
      {
        (arg1)->resetErrors();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PerlCallbackHandler__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::PerlCallbackHandler *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_PerlCallbackHandler();");
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::PerlCallbackHandler *)new XERCES_CPP_NAMESPACE::PerlCallbackHandler();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlCallbackHandler, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_PerlCallbackHandler__SWIG_1) {
  {
    SV *arg1 = (SV *) 0 ;
    XERCES_CPP_NAMESPACE::PerlCallbackHandler *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_PerlCallbackHandler(SV *);");
    }
    {
      arg1 = ST(0);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::PerlCallbackHandler *)new XERCES_CPP_NAMESPACE::PerlCallbackHandler(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlCallbackHandler, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PerlCallbackHandler) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_PerlCallbackHandler__SWIG_0); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_PerlCallbackHandler__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_PerlCallbackHandler'");
  XSRETURN(0);
}


XS(_wrap_delete_PerlCallbackHandler) {
  {
    XERCES_CPP_NAMESPACE::PerlCallbackHandler *arg1 = (XERCES_CPP_NAMESPACE::PerlCallbackHandler *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_PerlCallbackHandler(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlCallbackHandler, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PerlCallbackHandler" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PerlCallbackHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PerlCallbackHandler * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PerlCallbackHandler_type) {
  {
    XERCES_CPP_NAMESPACE::PerlCallbackHandler *arg1 = (XERCES_CPP_NAMESPACE::PerlCallbackHandler *) 0 ;
    int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PerlCallbackHandler_type(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlCallbackHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PerlCallbackHandler_type" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PerlCallbackHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PerlCallbackHandler * >(argp1);
    {
      try 
      {
        result = (int)(arg1)->type();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PerlCallbackHandler_set_callback_obj) {
  {
    XERCES_CPP_NAMESPACE::PerlCallbackHandler *arg1 = (XERCES_CPP_NAMESPACE::PerlCallbackHandler *) 0 ;
    SV *arg2 = (SV *) 0 ;
    SV *result = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PerlCallbackHandler_set_callback_obj(self,SV *);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlCallbackHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PerlCallbackHandler_set_callback_obj" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PerlCallbackHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PerlCallbackHandler * >(argp1);
    {
      arg2 = ST(1);
    }
    {
      try 
      {
        result = (SV *)(arg1)->set_callback_obj(arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = result; argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PerlErrorCallbackHandler__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_PerlErrorCallbackHandler();");
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *)new XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_PerlErrorCallbackHandler__SWIG_1) {
  {
    SV *arg1 = (SV *) 0 ;
    XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_PerlErrorCallbackHandler(obj);");
    }
    {
      arg1 = ST(0);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *)new XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PerlErrorCallbackHandler) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_PerlErrorCallbackHandler__SWIG_0); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_PerlErrorCallbackHandler__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_PerlErrorCallbackHandler'");
  XSRETURN(0);
}


XS(_wrap_delete_PerlErrorCallbackHandler) {
  {
    XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *arg1 = (XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_PerlErrorCallbackHandler(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PerlErrorCallbackHandler" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PerlErrorCallbackHandler_type) {
  {
    XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *arg1 = (XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *) 0 ;
    int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PerlErrorCallbackHandler_type(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PerlErrorCallbackHandler_type" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler * >(argp1);
    {
      try 
      {
        result = (int)(arg1)->type();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PerlErrorCallbackHandler_warning) {
  {
    XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *arg1 = (XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *) 0 ;
    XERCES_CPP_NAMESPACE::SAXParseException *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PerlErrorCallbackHandler_warning(self,exception);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PerlErrorCallbackHandler_warning" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PerlErrorCallbackHandler_warning" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::SAXParseException const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PerlErrorCallbackHandler_warning" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::SAXParseException const &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::SAXParseException * >(argp2);
    {
      try 
      {
        (arg1)->warning((XERCES_CPP_NAMESPACE::SAXParseException const &)*arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PerlErrorCallbackHandler_error) {
  {
    XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *arg1 = (XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *) 0 ;
    XERCES_CPP_NAMESPACE::SAXParseException *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PerlErrorCallbackHandler_error(self,exception);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PerlErrorCallbackHandler_error" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PerlErrorCallbackHandler_error" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::SAXParseException const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PerlErrorCallbackHandler_error" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::SAXParseException const &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::SAXParseException * >(argp2);
    {
      try 
      {
        (arg1)->error((XERCES_CPP_NAMESPACE::SAXParseException const &)*arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PerlErrorCallbackHandler_fatalError) {
  {
    XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *arg1 = (XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *) 0 ;
    XERCES_CPP_NAMESPACE::SAXParseException *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PerlErrorCallbackHandler_fatalError(self,exception);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PerlErrorCallbackHandler_fatalError" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PerlErrorCallbackHandler_fatalError" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::SAXParseException const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PerlErrorCallbackHandler_fatalError" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::SAXParseException const &""'"); 
    }
    arg2 = reinterpret_cast< XERCES_CPP_NAMESPACE::SAXParseException * >(argp2);
    {
      try 
      {
        (arg1)->fatalError((XERCES_CPP_NAMESPACE::SAXParseException const &)*arg2);
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PerlErrorCallbackHandler_resetErrors) {
  {
    XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *arg1 = (XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PerlErrorCallbackHandler_resetErrors(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PerlErrorCallbackHandler_resetErrors" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler * >(argp1);
    {
      try 
      {
        (arg1)->resetErrors();
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PerlEntityResolverHandler__SWIG_0) {
  {
    XERCES_CPP_NAMESPACE::PerlEntityResolverHandler *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_PerlEntityResolverHandler();");
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::PerlEntityResolverHandler *)new XERCES_CPP_NAMESPACE::PerlEntityResolverHandler();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandler, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_PerlEntityResolverHandler__SWIG_1) {
  {
    SV *arg1 = (SV *) 0 ;
    XERCES_CPP_NAMESPACE::PerlEntityResolverHandler *result = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_PerlEntityResolverHandler(obj);");
    }
    {
      arg1 = ST(0);
    }
    {
      try 
      {
        result = (XERCES_CPP_NAMESPACE::PerlEntityResolverHandler *)new XERCES_CPP_NAMESPACE::PerlEntityResolverHandler(arg1);
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandler, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PerlEntityResolverHandler) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          _v = 1;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_PerlEntityResolverHandler__SWIG_0); return;
    case 2:
      ++PL_markstack_ptr; SWIG_CALLXS(_wrap_new_PerlEntityResolverHandler__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_PerlEntityResolverHandler'");
  XSRETURN(0);
}


XS(_wrap_delete_PerlEntityResolverHandler) {
  {
    XERCES_CPP_NAMESPACE::PerlEntityResolverHandler *arg1 = (XERCES_CPP_NAMESPACE::PerlEntityResolverHandler *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_PerlEntityResolverHandler(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandler, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PerlEntityResolverHandler" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PerlEntityResolverHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PerlEntityResolverHandler * >(argp1);
    {
      try 
      {
        delete arg1;
        
      } 
      CATCH_XML_EXCEPTION
    }
    
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PerlEntityResolverHandler_type) {
  {
    XERCES_CPP_NAMESPACE::PerlEntityResolverHandler *arg1 = (XERCES_CPP_NAMESPACE::PerlEntityResolverHandler *) 0 ;
    int result;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PerlEntityResolverHandler_type(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandler, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PerlEntityResolverHandler_type" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::PerlEntityResolverHandler *""'"); 
    }
    arg1 = reinterpret_cast< XERCES_CPP_NAMESPACE::PerlEntityResolverHandler * >(argp1);
    {
      try 
      {
        result = (int)(arg1)->type();
      } 
      CATCH_XML_EXCEPTION
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_XERCES_CPP_NAMESPACE__DTDAttDefListTo_p_XERCES_CPP_NAMESPACE__XMLAttDefList(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLAttDefList *)  ((XERCES_CPP_NAMESPACE::DTDAttDefList *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaAttDefListTo_p_XERCES_CPP_NAMESPACE__XMLAttDefList(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLAttDefList *)  ((XERCES_CPP_NAMESPACE::SchemaAttDefList *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDElementDeclTo_p_XERCES_CPP_NAMESPACE__XMLElementDecl(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLElementDecl *)  ((XERCES_CPP_NAMESPACE::DTDElementDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaElementDeclTo_p_XERCES_CPP_NAMESPACE__XMLElementDecl(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLElementDecl *)  ((XERCES_CPP_NAMESPACE::SchemaElementDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__PSVIElementTo_p_XERCES_CPP_NAMESPACE__PSVIItem(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::PSVIItem *)  ((XERCES_CPP_NAMESPACE::PSVIElement *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__PSVIAttributeTo_p_XERCES_CPP_NAMESPACE__PSVIItem(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::PSVIItem *)  ((XERCES_CPP_NAMESPACE::PSVIAttribute *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXNotSupportedExceptionTo_p_XERCES_CPP_NAMESPACE__SAXException(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::SAXException *)  ((XERCES_CPP_NAMESPACE::SAXNotSupportedException *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXNotRecognizedExceptionTo_p_XERCES_CPP_NAMESPACE__SAXException(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::SAXException *)  ((XERCES_CPP_NAMESPACE::SAXNotRecognizedException *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXParseExceptionTo_p_XERCES_CPP_NAMESPACE__SAXException(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::SAXException *)  ((XERCES_CPP_NAMESPACE::SAXParseException *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_tTo_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::BaseRefVectorOf<uint16_t > *)  ((XERCES_CPP_NAMESPACE::RefArrayVectorOf<uint16_t > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_tTo_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *)  ((XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaAttDefTo_p_XERCES_CPP_NAMESPACE__XMLAttDef(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLAttDef *)  ((XERCES_CPP_NAMESPACE::SchemaAttDef *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDAttDefTo_p_XERCES_CPP_NAMESPACE__XMLAttDef(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLAttDef *)  ((XERCES_CPP_NAMESPACE::DTDAttDef *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandlerTo_p_XERCES_CPP_NAMESPACE__EntityResolver(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::EntityResolver *)  ((XERCES_CPP_NAMESPACE::PerlEntityResolverHandler *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandlerTo_p_XERCES_CPP_NAMESPACE__XMLEntityResolver(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLEntityResolver *)  ((XERCES_CPP_NAMESPACE::PerlEntityResolverHandler *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandlerTo_p_XERCES_CPP_NAMESPACE__ErrorHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::ErrorHandler *)  ((XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandlerTo_p_XERCES_CPP_NAMESPACE__PerlCallbackHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::PerlCallbackHandler *)  ((XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandlerTo_p_XERCES_CPP_NAMESPACE__PerlCallbackHandler(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::PerlCallbackHandler *)  ((XERCES_CPP_NAMESPACE::PerlEntityResolverHandler *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLDTDDescriptionTo_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLGrammarDescription *)  ((XERCES_CPP_NAMESPACE::XMLDTDDescription *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLSchemaDescriptionTo_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLGrammarDescription *)  ((XERCES_CPP_NAMESPACE::XMLSchemaDescription *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDEntityDeclTo_p_XERCES_CPP_NAMESPACE__XMLEntityDecl(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLEntityDecl *)  ((XERCES_CPP_NAMESPACE::DTDEntityDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__GrammarTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *)  ((XERCES_CPP_NAMESPACE::Grammar *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDGrammarTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *) (XERCES_CPP_NAMESPACE::Grammar *) ((XERCES_CPP_NAMESPACE::DTDGrammar *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaGrammarTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *) (XERCES_CPP_NAMESPACE::Grammar *) ((XERCES_CPP_NAMESPACE::SchemaGrammar *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDElementDeclTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *) (XERCES_CPP_NAMESPACE::XMLElementDecl *) ((XERCES_CPP_NAMESPACE::DTDElementDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLElementDeclTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *)  ((XERCES_CPP_NAMESPACE::XMLElementDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__QNameTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *)  ((XERCES_CPP_NAMESPACE::QName *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLUriTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *)  ((XERCES_CPP_NAMESPACE::XMLUri *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaElementDeclTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *) (XERCES_CPP_NAMESPACE::XMLElementDecl *) ((XERCES_CPP_NAMESPACE::SchemaElementDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDAttDefListTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *) (XERCES_CPP_NAMESPACE::XMLAttDefList *) ((XERCES_CPP_NAMESPACE::DTDAttDefList *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLAttDefListTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *)  ((XERCES_CPP_NAMESPACE::XMLAttDefList *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaAttDefListTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *) (XERCES_CPP_NAMESPACE::XMLAttDefList *) ((XERCES_CPP_NAMESPACE::SchemaAttDefList *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaAttDefTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *) (XERCES_CPP_NAMESPACE::XMLAttDef *) ((XERCES_CPP_NAMESPACE::SchemaAttDef *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDEntityDeclTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *) (XERCES_CPP_NAMESPACE::XMLEntityDecl *) ((XERCES_CPP_NAMESPACE::DTDEntityDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLEntityDeclTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *)  ((XERCES_CPP_NAMESPACE::XMLEntityDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLNotationDeclTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *)  ((XERCES_CPP_NAMESPACE::XMLNotationDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLSchemaDescriptionTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *) (XERCES_CPP_NAMESPACE::XMLGrammarDescription *) ((XERCES_CPP_NAMESPACE::XMLSchemaDescription *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLDTDDescriptionTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *) (XERCES_CPP_NAMESPACE::XMLGrammarDescription *) ((XERCES_CPP_NAMESPACE::XMLDTDDescription *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLGrammarDescriptionTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *)  ((XERCES_CPP_NAMESPACE::XMLGrammarDescription *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLAttDefTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *)  ((XERCES_CPP_NAMESPACE::XMLAttDef *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDAttDefTo_p_XSerializable(void *x) {
    return (void *)((XSerializable *) (XERCES_CPP_NAMESPACE::XMLAttDef *) ((XERCES_CPP_NAMESPACE::DTDAttDef *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDGrammarTo_p_XERCES_CPP_NAMESPACE__Grammar(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::Grammar *)  ((XERCES_CPP_NAMESPACE::DTDGrammar *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaGrammarTo_p_XERCES_CPP_NAMESPACE__Grammar(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::Grammar *)  ((XERCES_CPP_NAMESPACE::SchemaGrammar *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *)  ((XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_tTo_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *)  ((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *)  ((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLAttrTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLAttr *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLSchemaDescriptionTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLGrammarDescription *) ((XERCES_CPP_NAMESPACE::XMLSchemaDescription *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLGrammarDescriptionTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLGrammarDescription *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLDTDDescriptionTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLGrammarDescription *) ((XERCES_CPP_NAMESPACE::XMLDTDDescription *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaElementDeclTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLElementDecl *) ((XERCES_CPP_NAMESPACE::SchemaElementDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDElementDeclTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLElementDecl *) ((XERCES_CPP_NAMESPACE::DTDElementDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLElementDeclTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLElementDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaValidatorTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLValidator *) ((XERCES_CPP_NAMESPACE::SchemaValidator *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDValidatorTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLValidator *) ((XERCES_CPP_NAMESPACE::DTDValidator *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLValidatorTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLValidator *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLPScanTokenTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLPScanToken *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDAttDefTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLAttDef *) ((XERCES_CPP_NAMESPACE::DTDAttDef *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLAttDefTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLAttDef *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_tTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *) ((XERCES_CPP_NAMESPACE::RefArrayVectorOf<uint16_t > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_tTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::BaseRefVectorOf<uint16_t > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_tTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) ((XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLNotationDeclTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLNotationDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLURLTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLURL *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__PSVIItemTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::PSVIItem *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaAttDefTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLAttDef *) ((XERCES_CPP_NAMESPACE::SchemaAttDef *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLException *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLContentModelTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLContentModel *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__QNameTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::QName *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaGrammarTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::Grammar *) ((XERCES_CPP_NAMESPACE::SchemaGrammar *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDGrammarTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::Grammar *) ((XERCES_CPP_NAMESPACE::DTDGrammar *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__GrammarTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::Grammar *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::SAXException *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXNotSupportedExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::SAXException *) ((XERCES_CPP_NAMESPACE::SAXNotSupportedException *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXNotRecognizedExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::SAXException *) ((XERCES_CPP_NAMESPACE::SAXNotRecognizedException *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SAXParseExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::SAXException *) ((XERCES_CPP_NAMESPACE::SAXParseException *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDElementDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__PSVIAttributeListTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::PSVIAttributeList *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__PSVIAttributeTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::PSVIItem *) ((XERCES_CPP_NAMESPACE::PSVIAttribute *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaAttDefListTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLAttDefList *) ((XERCES_CPP_NAMESPACE::SchemaAttDefList *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDAttDefListTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLAttDefList *) ((XERCES_CPP_NAMESPACE::DTDAttDefList *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLAttDefListTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLAttDefList *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLUriTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLUri *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_tTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDEntityDeclTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::XMLEntityDecl *) ((XERCES_CPP_NAMESPACE::DTDEntityDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__XMLEntityDeclTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *)  ((XERCES_CPP_NAMESPACE::XMLEntityDecl *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__PSVIElementTo_p_XERCES_CPP_NAMESPACE__XMemory(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMemory *) (XERCES_CPP_NAMESPACE::PSVIItem *) ((XERCES_CPP_NAMESPACE::PSVIElement *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DTDValidatorTo_p_XERCES_CPP_NAMESPACE__XMLValidator(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLValidator *)  ((XERCES_CPP_NAMESPACE::DTDValidator *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__SchemaValidatorTo_p_XERCES_CPP_NAMESPACE__XMLValidator(void *x) {
    return (void *)((XERCES_CPP_NAMESPACE::XMLValidator *)  ((XERCES_CPP_NAMESPACE::SchemaValidator *) x));
}
static swig_type_info _swigt__p_DatatypeValidatorFactory = {"_p_DatatypeValidatorFactory", "DatatypeValidatorFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IdentityConstraint = {"_p_IdentityConstraint", "IdentityConstraint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PSVIDefs__PSVIScope = {"_p_PSVIDefs__PSVIScope", "PSVIDefs::PSVIScope *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PSVIUni = {"_p_PSVIUni", "PSVIUni *", 0, 0, (void*)"XML::Xerces::PSVIUni", 0};
static swig_type_info _swigt__p_PanicHandler = {"_p_PanicHandler", "PanicHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RefHash2KeysTableOfTValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t_t = {"_p_RefHash2KeysTableOfTValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t_t", "RefHash2KeysTableOf<ValueVectorOf<XERCES_CPP_NAMESPACE::SchemaElementDecl * > > *|RefHash2KeysTableOf<XERCES_CPP_NAMESPACE::ElemVector > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__ComplexTypeInfo_t = {"_p_RefHashTableOfTXERCES_CPP_NAMESPACE__ComplexTypeInfo_t", "RefHashTableOf<XERCES_CPP_NAMESPACE::ComplexTypeInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XMLAttDef_t = {"_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XMLAttDef_t", "RefHashTableOf<XERCES_CPP_NAMESPACE::XMLAttDef > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XSAnnotation_t = {"_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XSAnnotation_t", "RefHashTableOf<XERCES_CPP_NAMESPACE::XSAnnotation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesAttGroupInfo_t = {"_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesAttGroupInfo_t", "RefHashTableOf<XERCES_CPP_NAMESPACE::XercesAttGroupInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesGroupInfo_t = {"_p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesGroupInfo_t", "RefHashTableOf<XERCES_CPP_NAMESPACE::XercesGroupInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValidationContext = {"_p_ValidationContext", "ValidationContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t = {"_p_ValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t", "ValueVectorOf<XERCES_CPP_NAMESPACE::SchemaElementDecl * > *|XERCES_CPP_NAMESPACE::ElemVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueVectorOfTunsigned_int_t = {"_p_ValueVectorOfTunsigned_int_t", "ValueVectorOf<unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t = {"_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t", "XERCES_CPP_NAMESPACE::BaseRefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *", 0, 0, (void*)"XML::Xerces::BaseXMLAttrVector", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t = {"_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t", "XERCES_CPP_NAMESPACE::BaseRefVectorOf<uint16_t > *|XERCES_CPP_NAMESPACE::BaseRefVectorOf<XMLCh > *", 0, 0, (void*)"XML::Xerces::BaseXMLChVector", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__BinInputStream = {"_p_XERCES_CPP_NAMESPACE__BinInputStream", "XERCES_CPP_NAMESPACE::BinInputStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__ComplexTypeInfo = {"_p_XERCES_CPP_NAMESPACE__ComplexTypeInfo", "XERCES_CPP_NAMESPACE::ComplexTypeInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__ContentSpecNode = {"_p_XERCES_CPP_NAMESPACE__ContentSpecNode", "XERCES_CPP_NAMESPACE::ContentSpecNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DTDAttDef = {"_p_XERCES_CPP_NAMESPACE__DTDAttDef", "XERCES_CPP_NAMESPACE::DTDAttDef *", 0, 0, (void*)"XML::Xerces::DTDAttDef", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DTDAttDefList = {"_p_XERCES_CPP_NAMESPACE__DTDAttDefList", "XERCES_CPP_NAMESPACE::DTDAttDefList *", 0, 0, (void*)"XML::Xerces::DTDAttDefList", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DTDElementDecl = {"_p_XERCES_CPP_NAMESPACE__DTDElementDecl", "XERCES_CPP_NAMESPACE::DTDElementDecl *", 0, 0, (void*)"XML::Xerces::DTDElementDecl", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DTDEntityDecl = {"_p_XERCES_CPP_NAMESPACE__DTDEntityDecl", "XERCES_CPP_NAMESPACE::DTDEntityDecl *", 0, 0, (void*)"XML::Xerces::DTDEntityDecl", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DTDGrammar = {"_p_XERCES_CPP_NAMESPACE__DTDGrammar", "XERCES_CPP_NAMESPACE::DTDGrammar *", 0, 0, (void*)"XML::Xerces::DTDGrammar", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DTDValidator = {"_p_XERCES_CPP_NAMESPACE__DTDValidator", "XERCES_CPP_NAMESPACE::DTDValidator *", 0, 0, (void*)"XML::Xerces::DTDValidator", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DatatypeValidator = {"_p_XERCES_CPP_NAMESPACE__DatatypeValidator", "XERCES_CPP_NAMESPACE::DatatypeValidator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__EntityResolver = {"_p_XERCES_CPP_NAMESPACE__EntityResolver", "XERCES_CPP_NAMESPACE::EntityResolver *", 0, 0, (void*)"XML::Xerces::EntityResolver", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__ErrorHandler = {"_p_XERCES_CPP_NAMESPACE__ErrorHandler", "XERCES_CPP_NAMESPACE::ErrorHandler *", 0, 0, (void*)"XML::Xerces::ErrorHandler", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__Grammar = {"_p_XERCES_CPP_NAMESPACE__Grammar", "XERCES_CPP_NAMESPACE::Grammar *", 0, 0, (void*)"XML::Xerces::Grammar", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__GrammarResolver = {"_p_XERCES_CPP_NAMESPACE__GrammarResolver", "XERCES_CPP_NAMESPACE::GrammarResolver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__Locator = {"_p_XERCES_CPP_NAMESPACE__Locator", "XERCES_CPP_NAMESPACE::Locator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__MemoryManager = {"_p_XERCES_CPP_NAMESPACE__MemoryManager", "XERCES_CPP_NAMESPACE::MemoryManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t = {"_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t", "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *", 0, 0, (void*)"XML::Xerces::DTDElementDeclEnumerator", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t = {"_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t", "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *", 0, 0, (void*)"XML::Xerces::DTDEntityDeclEnumerator", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__XMLNotationDecl_t = {"_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__XMLNotationDecl_t", "XERCES_CPP_NAMESPACE::NameIdPoolEnumerator<XERCES_CPP_NAMESPACE::XMLNotationDecl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t = {"_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t", "XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDElementDecl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t = {"_p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t", "XERCES_CPP_NAMESPACE::NameIdPool<XERCES_CPP_NAMESPACE::DTDEntityDecl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__NamespaceScope = {"_p_XERCES_CPP_NAMESPACE__NamespaceScope", "XERCES_CPP_NAMESPACE::NamespaceScope *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__PSVIAttribute = {"_p_XERCES_CPP_NAMESPACE__PSVIAttribute", "XERCES_CPP_NAMESPACE::PSVIAttribute *", 0, 0, (void*)"XML::Xerces::PSVIAttribute", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__PSVIAttributeList = {"_p_XERCES_CPP_NAMESPACE__PSVIAttributeList", "XERCES_CPP_NAMESPACE::PSVIAttributeList *", 0, 0, (void*)"XML::Xerces::PSVIAttributeList", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__PSVIElement = {"_p_XERCES_CPP_NAMESPACE__PSVIElement", "XERCES_CPP_NAMESPACE::PSVIElement *", 0, 0, (void*)"XML::Xerces::PSVIElement", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__PSVIHandler = {"_p_XERCES_CPP_NAMESPACE__PSVIHandler", "XERCES_CPP_NAMESPACE::PSVIHandler *", 0, 0, (void*)"XML::Xerces::PSVIHandler", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__PSVIItem = {"_p_XERCES_CPP_NAMESPACE__PSVIItem", "XERCES_CPP_NAMESPACE::PSVIItem *", 0, 0, (void*)"XML::Xerces::PSVIItem", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__PerlCallbackHandler = {"_p_XERCES_CPP_NAMESPACE__PerlCallbackHandler", "XERCES_CPP_NAMESPACE::PerlCallbackHandler *", 0, 0, (void*)"XML::Xerces::PerlCallbackHandler", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandler = {"_p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandler", "XERCES_CPP_NAMESPACE::PerlEntityResolverHandler *", 0, 0, (void*)"XML::Xerces::PerlEntityResolverHandler", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler = {"_p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler", "XERCES_CPP_NAMESPACE::PerlErrorCallbackHandler *", 0, 0, (void*)"XML::Xerces::PerlErrorCallbackHandler", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__QName = {"_p_XERCES_CPP_NAMESPACE__QName", "XERCES_CPP_NAMESPACE::QName *", 0, 0, (void*)"XML::Xerces::QName", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t = {"_p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t", "XERCES_CPP_NAMESPACE::RefArrayVectorOf<uint16_t > *|XERCES_CPP_NAMESPACE::RefArrayVectorOf<XMLCh > *", 0, 0, (void*)"XML::Xerces::XMLChVector", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t = {"_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t", "XERCES_CPP_NAMESPACE::RefHash3KeysIdPoolEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *", 0, 0, (void*)"XML::Xerces::SchemaElementDeclEnumerator", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t = {"_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t", "XERCES_CPP_NAMESPACE::RefHash3KeysIdPool<XERCES_CPP_NAMESPACE::SchemaElementDecl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t = {"_p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t", "XERCES_CPP_NAMESPACE::RefVectorOf<XERCES_CPP_NAMESPACE::XMLAttr > *", 0, 0, (void*)"XML::Xerces::XMLAttrVector", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SAXException = {"_p_XERCES_CPP_NAMESPACE__SAXException", "XERCES_CPP_NAMESPACE::SAXException *", 0, 0, (void*)"XML::Xerces::SAXException", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException = {"_p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException", "XERCES_CPP_NAMESPACE::SAXNotRecognizedException *", 0, 0, (void*)"XML::Xerces::SAXNotRecognizedException", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SAXNotSupportedException = {"_p_XERCES_CPP_NAMESPACE__SAXNotSupportedException", "XERCES_CPP_NAMESPACE::SAXNotSupportedException *", 0, 0, (void*)"XML::Xerces::SAXNotSupportedException", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SAXParseException = {"_p_XERCES_CPP_NAMESPACE__SAXParseException", "XERCES_CPP_NAMESPACE::SAXParseException *", 0, 0, (void*)"XML::Xerces::SAXParseException", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SchemaAttDef = {"_p_XERCES_CPP_NAMESPACE__SchemaAttDef", "XERCES_CPP_NAMESPACE::SchemaAttDef *", 0, 0, (void*)"XML::Xerces::SchemaAttDef", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SchemaAttDefList = {"_p_XERCES_CPP_NAMESPACE__SchemaAttDefList", "XERCES_CPP_NAMESPACE::SchemaAttDefList *", 0, 0, (void*)"XML::Xerces::SchemaAttDefList", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SchemaElementDecl = {"_p_XERCES_CPP_NAMESPACE__SchemaElementDecl", "XERCES_CPP_NAMESPACE::SchemaElementDecl *", 0, 0, (void*)"XML::Xerces::SchemaElementDecl", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SchemaGrammar = {"_p_XERCES_CPP_NAMESPACE__SchemaGrammar", "XERCES_CPP_NAMESPACE::SchemaGrammar *", 0, 0, (void*)"XML::Xerces::SchemaGrammar", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SchemaSymbols = {"_p_XERCES_CPP_NAMESPACE__SchemaSymbols", "XERCES_CPP_NAMESPACE::SchemaSymbols *", 0, 0, (void*)"XML::Xerces::SchemaSymbols", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SchemaValidator = {"_p_XERCES_CPP_NAMESPACE__SchemaValidator", "XERCES_CPP_NAMESPACE::SchemaValidator *", 0, 0, (void*)"XML::Xerces::SchemaValidator", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__SecurityManager = {"_p_XERCES_CPP_NAMESPACE__SecurityManager", "XERCES_CPP_NAMESPACE::SecurityManager *", 0, 0, (void*)"XML::Xerces::SecurityManager", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLAttDef = {"_p_XERCES_CPP_NAMESPACE__XMLAttDef", "XERCES_CPP_NAMESPACE::XMLAttDef *", 0, 0, (void*)"XML::Xerces::XMLAttDef", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLAttDefList = {"_p_XERCES_CPP_NAMESPACE__XMLAttDefList", "XERCES_CPP_NAMESPACE::XMLAttDefList *", 0, 0, (void*)"XML::Xerces::XMLAttDefList", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLAttr = {"_p_XERCES_CPP_NAMESPACE__XMLAttr", "XERCES_CPP_NAMESPACE::XMLAttr *", 0, 0, (void*)"XML::Xerces::XMLAttr", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLContentModel = {"_p_XERCES_CPP_NAMESPACE__XMLContentModel", "XERCES_CPP_NAMESPACE::XMLContentModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLDTDDescription = {"_p_XERCES_CPP_NAMESPACE__XMLDTDDescription", "XERCES_CPP_NAMESPACE::XMLDTDDescription *", 0, 0, (void*)"XML::Xerces::XMLDTDDescription", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLDeleter = {"_p_XERCES_CPP_NAMESPACE__XMLDeleter", "XERCES_CPP_NAMESPACE::XMLDeleter *", 0, 0, (void*)"XML::Xerces::XMLDeleter", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLDocumentHandler = {"_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler", "XERCES_CPP_NAMESPACE::XMLDocumentHandler *", 0, 0, (void*)"XML::Xerces::XMLDocumentHandler", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLElementDecl = {"_p_XERCES_CPP_NAMESPACE__XMLElementDecl", "XERCES_CPP_NAMESPACE::XMLElementDecl *", 0, 0, (void*)"XML::Xerces::XMLElementDecl", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLEntityDecl = {"_p_XERCES_CPP_NAMESPACE__XMLEntityDecl", "XERCES_CPP_NAMESPACE::XMLEntityDecl *", 0, 0, (void*)"XML::Xerces::XMLEntityDecl", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLEntityResolver = {"_p_XERCES_CPP_NAMESPACE__XMLEntityResolver", "XERCES_CPP_NAMESPACE::XMLEntityResolver *", 0, 0, (void*)"XML::Xerces::XMLEntityResolver", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t = {"_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t", "XERCES_CPP_NAMESPACE::XMLEnumerator<XERCES_CPP_NAMESPACE::DTDElementDecl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t = {"_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t", "XERCES_CPP_NAMESPACE::XMLEnumerator<XERCES_CPP_NAMESPACE::DTDEntityDecl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t = {"_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t", "XERCES_CPP_NAMESPACE::XMLEnumerator<XERCES_CPP_NAMESPACE::SchemaElementDecl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLException = {"_p_XERCES_CPP_NAMESPACE__XMLException", "XERCES_CPP_NAMESPACE::XMLException *", 0, 0, (void*)"XML::Xerces::XMLException", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLExcepts = {"_p_XERCES_CPP_NAMESPACE__XMLExcepts", "XERCES_CPP_NAMESPACE::XMLExcepts *", 0, 0, (void*)"XML::Xerces::XMLExcepts", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLGrammarDescription = {"_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription", "XERCES_CPP_NAMESPACE::XMLGrammarDescription *", 0, 0, (void*)"XML::Xerces::XMLGrammarDescription", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLNotationDecl = {"_p_XERCES_CPP_NAMESPACE__XMLNotationDecl", "XERCES_CPP_NAMESPACE::XMLNotationDecl *", 0, 0, (void*)"XML::Xerces::XMLNotationDecl", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLPScanToken = {"_p_XERCES_CPP_NAMESPACE__XMLPScanToken", "XERCES_CPP_NAMESPACE::XMLPScanToken *", 0, 0, (void*)"XML::Xerces::XMLPScanToken", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLPlatformUtils = {"_p_XERCES_CPP_NAMESPACE__XMLPlatformUtils", "XERCES_CPP_NAMESPACE::XMLPlatformUtils *", 0, 0, (void*)"XML::Xerces::XMLPlatformUtils", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier = {"_p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier", "XERCES_CPP_NAMESPACE::XMLResourceIdentifier *", 0, 0, (void*)"XML::Xerces::XMLResourceIdentifier", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLSchemaDescription = {"_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription", "XERCES_CPP_NAMESPACE::XMLSchemaDescription *", 0, 0, (void*)"XML::Xerces::XMLSchemaDescription", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLURL = {"_p_XERCES_CPP_NAMESPACE__XMLURL", "XERCES_CPP_NAMESPACE::XMLURL *", 0, 0, (void*)"XML::Xerces::XMLURL", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLUni = {"_p_XERCES_CPP_NAMESPACE__XMLUni", "XERCES_CPP_NAMESPACE::XMLUni *", 0, 0, (void*)"XML::Xerces::XMLUni", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLUri = {"_p_XERCES_CPP_NAMESPACE__XMLUri", "XERCES_CPP_NAMESPACE::XMLUri *", 0, 0, (void*)"XML::Xerces::XMLUri", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMLValidator = {"_p_XERCES_CPP_NAMESPACE__XMLValidator", "XERCES_CPP_NAMESPACE::XMLValidator *", 0, 0, (void*)"XML::Xerces::XMLValidator", 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XMemory = {"_p_XERCES_CPP_NAMESPACE__XMemory", "XERCES_CPP_NAMESPACE::XMemory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XSAnnotation = {"_p_XERCES_CPP_NAMESPACE__XSAnnotation", "XERCES_CPP_NAMESPACE::XSAnnotation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XSAttributeDeclaration = {"_p_XERCES_CPP_NAMESPACE__XSAttributeDeclaration", "XERCES_CPP_NAMESPACE::XSAttributeDeclaration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XSElementDeclaration = {"_p_XERCES_CPP_NAMESPACE__XSElementDeclaration", "XERCES_CPP_NAMESPACE::XSElementDeclaration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XSModel = {"_p_XERCES_CPP_NAMESPACE__XSModel", "XERCES_CPP_NAMESPACE::XSModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XSNotationDeclaration = {"_p_XERCES_CPP_NAMESPACE__XSNotationDeclaration", "XERCES_CPP_NAMESPACE::XSNotationDeclaration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition = {"_p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition", "XERCES_CPP_NAMESPACE::XSSimpleTypeDefinition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XSTypeDefinition = {"_p_XERCES_CPP_NAMESPACE__XSTypeDefinition", "XERCES_CPP_NAMESPACE::XSTypeDefinition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__XSValue = {"_p_XERCES_CPP_NAMESPACE__XSValue", "XERCES_CPP_NAMESPACE::XSValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XMLBuffer = {"_p_XMLBuffer", "XMLBuffer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XMLErrorReporter = {"_p_XMLErrorReporter", "XMLErrorReporter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XMLErrorReporter__ErrTypes = {"_p_XMLErrorReporter__ErrTypes", "XMLErrorReporter::ErrTypes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XSerializable = {"_p_XSerializable", "XSerializable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XSerializeEngine = {"_p_XSerializeEngine", "XSerializeEngine *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "int32_t *|XMLInt32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *|XMLSize_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ssize_t = {"_p_ssize_t", "ssize_t *|XMLSSize_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint16_t = {"_p_uint16_t", "uint16_t *|UTF16Ch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32_t = {"_p_uint32_t", "uint32_t *|UCS4Ch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|XMLByte *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_DatatypeValidatorFactory,
  &_swigt__p_IdentityConstraint,
  &_swigt__p_PSVIDefs__PSVIScope,
  &_swigt__p_PSVIUni,
  &_swigt__p_PanicHandler,
  &_swigt__p_RefHash2KeysTableOfTValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t_t,
  &_swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__ComplexTypeInfo_t,
  &_swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XMLAttDef_t,
  &_swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XSAnnotation_t,
  &_swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesAttGroupInfo_t,
  &_swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesGroupInfo_t,
  &_swigt__p_ValidationContext,
  &_swigt__p_ValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t,
  &_swigt__p_ValueVectorOfTunsigned_int_t,
  &_swigt__p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t,
  &_swigt__p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t,
  &_swigt__p_XERCES_CPP_NAMESPACE__BinInputStream,
  &_swigt__p_XERCES_CPP_NAMESPACE__ComplexTypeInfo,
  &_swigt__p_XERCES_CPP_NAMESPACE__ContentSpecNode,
  &_swigt__p_XERCES_CPP_NAMESPACE__DTDAttDef,
  &_swigt__p_XERCES_CPP_NAMESPACE__DTDAttDefList,
  &_swigt__p_XERCES_CPP_NAMESPACE__DTDElementDecl,
  &_swigt__p_XERCES_CPP_NAMESPACE__DTDEntityDecl,
  &_swigt__p_XERCES_CPP_NAMESPACE__DTDGrammar,
  &_swigt__p_XERCES_CPP_NAMESPACE__DTDValidator,
  &_swigt__p_XERCES_CPP_NAMESPACE__DatatypeValidator,
  &_swigt__p_XERCES_CPP_NAMESPACE__EntityResolver,
  &_swigt__p_XERCES_CPP_NAMESPACE__ErrorHandler,
  &_swigt__p_XERCES_CPP_NAMESPACE__Grammar,
  &_swigt__p_XERCES_CPP_NAMESPACE__GrammarResolver,
  &_swigt__p_XERCES_CPP_NAMESPACE__Locator,
  &_swigt__p_XERCES_CPP_NAMESPACE__MemoryManager,
  &_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t,
  &_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t,
  &_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__XMLNotationDecl_t,
  &_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t,
  &_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t,
  &_swigt__p_XERCES_CPP_NAMESPACE__NamespaceScope,
  &_swigt__p_XERCES_CPP_NAMESPACE__PSVIAttribute,
  &_swigt__p_XERCES_CPP_NAMESPACE__PSVIAttributeList,
  &_swigt__p_XERCES_CPP_NAMESPACE__PSVIElement,
  &_swigt__p_XERCES_CPP_NAMESPACE__PSVIHandler,
  &_swigt__p_XERCES_CPP_NAMESPACE__PSVIItem,
  &_swigt__p_XERCES_CPP_NAMESPACE__PerlCallbackHandler,
  &_swigt__p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandler,
  &_swigt__p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler,
  &_swigt__p_XERCES_CPP_NAMESPACE__QName,
  &_swigt__p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t,
  &_swigt__p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t,
  &_swigt__p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t,
  &_swigt__p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t,
  &_swigt__p_XERCES_CPP_NAMESPACE__SAXException,
  &_swigt__p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException,
  &_swigt__p_XERCES_CPP_NAMESPACE__SAXNotSupportedException,
  &_swigt__p_XERCES_CPP_NAMESPACE__SAXParseException,
  &_swigt__p_XERCES_CPP_NAMESPACE__SchemaAttDef,
  &_swigt__p_XERCES_CPP_NAMESPACE__SchemaAttDefList,
  &_swigt__p_XERCES_CPP_NAMESPACE__SchemaElementDecl,
  &_swigt__p_XERCES_CPP_NAMESPACE__SchemaGrammar,
  &_swigt__p_XERCES_CPP_NAMESPACE__SchemaSymbols,
  &_swigt__p_XERCES_CPP_NAMESPACE__SchemaValidator,
  &_swigt__p_XERCES_CPP_NAMESPACE__SecurityManager,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLAttDef,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLAttDefList,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLAttr,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLContentModel,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLDTDDescription,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLDeleter,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLDocumentHandler,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLElementDecl,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLEntityDecl,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLEntityResolver,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLException,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLExcepts,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLGrammarDescription,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLNotationDecl,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLPScanToken,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLPlatformUtils,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLSchemaDescription,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLURL,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLUni,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLUri,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMLValidator,
  &_swigt__p_XERCES_CPP_NAMESPACE__XMemory,
  &_swigt__p_XERCES_CPP_NAMESPACE__XSAnnotation,
  &_swigt__p_XERCES_CPP_NAMESPACE__XSAttributeDeclaration,
  &_swigt__p_XERCES_CPP_NAMESPACE__XSElementDeclaration,
  &_swigt__p_XERCES_CPP_NAMESPACE__XSModel,
  &_swigt__p_XERCES_CPP_NAMESPACE__XSNotationDeclaration,
  &_swigt__p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition,
  &_swigt__p_XERCES_CPP_NAMESPACE__XSTypeDefinition,
  &_swigt__p_XERCES_CPP_NAMESPACE__XSValue,
  &_swigt__p_XMLBuffer,
  &_swigt__p_XMLErrorReporter,
  &_swigt__p_XMLErrorReporter__ErrTypes,
  &_swigt__p_XSerializable,
  &_swigt__p_XSerializeEngine,
  &_swigt__p_char,
  &_swigt__p_int,
  &_swigt__p_int32_t,
  &_swigt__p_p_void,
  &_swigt__p_size_t,
  &_swigt__p_ssize_t,
  &_swigt__p_uint16_t,
  &_swigt__p_uint32_t,
  &_swigt__p_unsigned_char,
};

static swig_cast_info _swigc__p_DatatypeValidatorFactory[] = {  {&_swigt__p_DatatypeValidatorFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IdentityConstraint[] = {  {&_swigt__p_IdentityConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PSVIDefs__PSVIScope[] = {  {&_swigt__p_PSVIDefs__PSVIScope, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PSVIUni[] = {  {&_swigt__p_PSVIUni, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PanicHandler[] = {  {&_swigt__p_PanicHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RefHash2KeysTableOfTValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t_t[] = {  {&_swigt__p_RefHash2KeysTableOfTValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RefHashTableOfTXERCES_CPP_NAMESPACE__ComplexTypeInfo_t[] = {  {&_swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__ComplexTypeInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XMLAttDef_t[] = {  {&_swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XMLAttDef_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XSAnnotation_t[] = {  {&_swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XSAnnotation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesAttGroupInfo_t[] = {  {&_swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesAttGroupInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesGroupInfo_t[] = {  {&_swigt__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesGroupInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValidationContext[] = {  {&_swigt__p_ValidationContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t[] = {  {&_swigt__p_ValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueVectorOfTunsigned_int_t[] = {  {&_swigt__p_ValueVectorOfTunsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, _p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_tTo_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t, _p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_tTo_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__BinInputStream[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__BinInputStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__ComplexTypeInfo[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__ComplexTypeInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__ContentSpecNode[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__ContentSpecNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DTDAttDef[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDAttDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DTDAttDefList[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDAttDefList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DTDElementDecl[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDElementDecl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DTDEntityDecl[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDEntityDecl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DTDGrammar[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDGrammar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DTDValidator[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDValidator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DatatypeValidator[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DatatypeValidator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__EntityResolver[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__EntityResolver, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandler, _p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandlerTo_p_XERCES_CPP_NAMESPACE__EntityResolver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__ErrorHandler[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__ErrorHandler, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler, _p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandlerTo_p_XERCES_CPP_NAMESPACE__ErrorHandler, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__Grammar[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__Grammar, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDGrammar, _p_XERCES_CPP_NAMESPACE__DTDGrammarTo_p_XERCES_CPP_NAMESPACE__Grammar, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaGrammar, _p_XERCES_CPP_NAMESPACE__SchemaGrammarTo_p_XERCES_CPP_NAMESPACE__Grammar, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__GrammarResolver[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__GrammarResolver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__Locator[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__Locator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__MemoryManager[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__MemoryManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__XMLNotationDecl_t[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__XMLNotationDecl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__NamespaceScope[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__NamespaceScope, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__PSVIAttribute[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__PSVIAttribute, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__PSVIAttributeList[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__PSVIAttributeList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__PSVIElement[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__PSVIElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__PSVIHandler[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__PSVIHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__PSVIItem[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__PSVIItem, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__PSVIElement, _p_XERCES_CPP_NAMESPACE__PSVIElementTo_p_XERCES_CPP_NAMESPACE__PSVIItem, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__PSVIAttribute, _p_XERCES_CPP_NAMESPACE__PSVIAttributeTo_p_XERCES_CPP_NAMESPACE__PSVIItem, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__PerlCallbackHandler[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__PerlCallbackHandler, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler, _p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandlerTo_p_XERCES_CPP_NAMESPACE__PerlCallbackHandler, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandler, _p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandlerTo_p_XERCES_CPP_NAMESPACE__PerlCallbackHandler, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandler[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__QName[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__QName, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__SAXException[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__SAXException, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SAXNotSupportedException, _p_XERCES_CPP_NAMESPACE__SAXNotSupportedExceptionTo_p_XERCES_CPP_NAMESPACE__SAXException, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException, _p_XERCES_CPP_NAMESPACE__SAXNotRecognizedExceptionTo_p_XERCES_CPP_NAMESPACE__SAXException, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SAXParseException, _p_XERCES_CPP_NAMESPACE__SAXParseExceptionTo_p_XERCES_CPP_NAMESPACE__SAXException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__SAXNotSupportedException[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__SAXNotSupportedException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__SAXParseException[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__SAXParseException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__SchemaAttDef[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaAttDef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__SchemaAttDefList[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaAttDefList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__SchemaElementDecl[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaElementDecl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__SchemaGrammar[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaGrammar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__SchemaSymbols[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaSymbols, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__SchemaValidator[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaValidator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__SecurityManager[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__SecurityManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLAttDef[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaAttDef, _p_XERCES_CPP_NAMESPACE__SchemaAttDefTo_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLAttDef, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDAttDef, _p_XERCES_CPP_NAMESPACE__DTDAttDefTo_p_XERCES_CPP_NAMESPACE__XMLAttDef, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLAttDefList[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDAttDefList, _p_XERCES_CPP_NAMESPACE__DTDAttDefListTo_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaAttDefList, _p_XERCES_CPP_NAMESPACE__SchemaAttDefListTo_p_XERCES_CPP_NAMESPACE__XMLAttDefList, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLAttr[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLAttr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLContentModel[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLContentModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLDTDDescription[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLDTDDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLDeleter[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLDeleter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLDocumentHandler[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLElementDecl[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDElementDecl, _p_XERCES_CPP_NAMESPACE__DTDElementDeclTo_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaElementDecl, _p_XERCES_CPP_NAMESPACE__SchemaElementDeclTo_p_XERCES_CPP_NAMESPACE__XMLElementDecl, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLEntityDecl[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDEntityDecl, _p_XERCES_CPP_NAMESPACE__DTDEntityDeclTo_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLEntityResolver[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLEntityResolver, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandler, _p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandlerTo_p_XERCES_CPP_NAMESPACE__XMLEntityResolver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_tTo_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, _p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLException[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLExcepts[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLExcepts, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLGrammarDescription[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLDTDDescription, _p_XERCES_CPP_NAMESPACE__XMLDTDDescriptionTo_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, _p_XERCES_CPP_NAMESPACE__XMLSchemaDescriptionTo_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLNotationDecl[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLNotationDecl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLPScanToken[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLPScanToken, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLPlatformUtils[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLPlatformUtils, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLSchemaDescription[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLURL[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLURL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLUni[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLUni, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLUri[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLUri, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMLValidator[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLValidator, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDValidator, _p_XERCES_CPP_NAMESPACE__DTDValidatorTo_p_XERCES_CPP_NAMESPACE__XMLValidator, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaValidator, _p_XERCES_CPP_NAMESPACE__SchemaValidatorTo_p_XERCES_CPP_NAMESPACE__XMLValidator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XMemory[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLAttr, _p_XERCES_CPP_NAMESPACE__XMLAttrTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, _p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_tTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLUri, _p_XERCES_CPP_NAMESPACE__XMLUriTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, _p_XERCES_CPP_NAMESPACE__XMLSchemaDescriptionTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, _p_XERCES_CPP_NAMESPACE__XMLGrammarDescriptionTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLDTDDescription, _p_XERCES_CPP_NAMESPACE__XMLDTDDescriptionTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaElementDecl, _p_XERCES_CPP_NAMESPACE__SchemaElementDeclTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDElementDecl, _p_XERCES_CPP_NAMESPACE__DTDElementDeclTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLElementDecl, _p_XERCES_CPP_NAMESPACE__XMLElementDeclTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLPScanToken, _p_XERCES_CPP_NAMESPACE__XMLPScanTokenTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaValidator, _p_XERCES_CPP_NAMESPACE__SchemaValidatorTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDValidator, _p_XERCES_CPP_NAMESPACE__DTDValidatorTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLValidator, _p_XERCES_CPP_NAMESPACE__XMLValidatorTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, _p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDAttDef, _p_XERCES_CPP_NAMESPACE__DTDAttDefTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLAttDef, _p_XERCES_CPP_NAMESPACE__XMLAttDefTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLNotationDecl, _p_XERCES_CPP_NAMESPACE__XMLNotationDeclTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t, _p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_tTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__PSVIItem, _p_XERCES_CPP_NAMESPACE__PSVIItemTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t, _p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, _p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, _p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_tTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaAttDef, _p_XERCES_CPP_NAMESPACE__SchemaAttDefTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, _p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_tTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLURL, _p_XERCES_CPP_NAMESPACE__XMLURLTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLException, _p_XERCES_CPP_NAMESPACE__XMLExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SAXException, _p_XERCES_CPP_NAMESPACE__SAXExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SAXNotSupportedException, _p_XERCES_CPP_NAMESPACE__SAXNotSupportedExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException, _p_XERCES_CPP_NAMESPACE__SAXNotRecognizedExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SAXParseException, _p_XERCES_CPP_NAMESPACE__SAXParseExceptionTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLContentModel, _p_XERCES_CPP_NAMESPACE__XMLContentModelTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__Grammar, _p_XERCES_CPP_NAMESPACE__GrammarTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDGrammar, _p_XERCES_CPP_NAMESPACE__DTDGrammarTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaGrammar, _p_XERCES_CPP_NAMESPACE__SchemaGrammarTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__PSVIAttributeList, _p_XERCES_CPP_NAMESPACE__PSVIAttributeListTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, _p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__PSVIAttribute, _p_XERCES_CPP_NAMESPACE__PSVIAttributeTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, _p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_tTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMemory, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__QName, _p_XERCES_CPP_NAMESPACE__QNameTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaAttDefList, _p_XERCES_CPP_NAMESPACE__SchemaAttDefListTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDAttDefList, _p_XERCES_CPP_NAMESPACE__DTDAttDefListTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLAttDefList, _p_XERCES_CPP_NAMESPACE__XMLAttDefListTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDEntityDecl, _p_XERCES_CPP_NAMESPACE__DTDEntityDeclTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLEntityDecl, _p_XERCES_CPP_NAMESPACE__XMLEntityDeclTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__PSVIElement, _p_XERCES_CPP_NAMESPACE__PSVIElementTo_p_XERCES_CPP_NAMESPACE__XMemory, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XSAnnotation[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XSAnnotation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XSAttributeDeclaration[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XSAttributeDeclaration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XSElementDeclaration[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XSElementDeclaration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XSModel[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XSModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XSNotationDeclaration[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XSNotationDeclaration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XSTypeDefinition[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XSTypeDefinition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__XSValue[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XSValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XMLBuffer[] = {  {&_swigt__p_XMLBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XMLErrorReporter[] = {  {&_swigt__p_XMLErrorReporter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XMLErrorReporter__ErrTypes[] = {  {&_swigt__p_XMLErrorReporter__ErrTypes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XSerializable[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLUri, _p_XERCES_CPP_NAMESPACE__XMLUriTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__Grammar, _p_XERCES_CPP_NAMESPACE__GrammarTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDGrammar, _p_XERCES_CPP_NAMESPACE__DTDGrammarTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaGrammar, _p_XERCES_CPP_NAMESPACE__SchemaGrammarTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDElementDecl, _p_XERCES_CPP_NAMESPACE__DTDElementDeclTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLElementDecl, _p_XERCES_CPP_NAMESPACE__XMLElementDeclTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaElementDecl, _p_XERCES_CPP_NAMESPACE__SchemaElementDeclTo_p_XSerializable, 0, 0},  {&_swigt__p_XSerializable, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__QName, _p_XERCES_CPP_NAMESPACE__QNameTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDAttDefList, _p_XERCES_CPP_NAMESPACE__DTDAttDefListTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLAttDefList, _p_XERCES_CPP_NAMESPACE__XMLAttDefListTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaAttDefList, _p_XERCES_CPP_NAMESPACE__SchemaAttDefListTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__SchemaAttDef, _p_XERCES_CPP_NAMESPACE__SchemaAttDefTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDEntityDecl, _p_XERCES_CPP_NAMESPACE__DTDEntityDeclTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLEntityDecl, _p_XERCES_CPP_NAMESPACE__XMLEntityDeclTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLNotationDecl, _p_XERCES_CPP_NAMESPACE__XMLNotationDeclTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, _p_XERCES_CPP_NAMESPACE__XMLSchemaDescriptionTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLDTDDescription, _p_XERCES_CPP_NAMESPACE__XMLDTDDescriptionTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, _p_XERCES_CPP_NAMESPACE__XMLGrammarDescriptionTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__XMLAttDef, _p_XERCES_CPP_NAMESPACE__XMLAttDefTo_p_XSerializable, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DTDAttDef, _p_XERCES_CPP_NAMESPACE__DTDAttDefTo_p_XSerializable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XSerializeEngine[] = {  {&_swigt__p_XSerializeEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ssize_t[] = {  {&_swigt__p_ssize_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint16_t[] = {  {&_swigt__p_uint16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_t[] = {  {&_swigt__p_uint32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_DatatypeValidatorFactory,
  _swigc__p_IdentityConstraint,
  _swigc__p_PSVIDefs__PSVIScope,
  _swigc__p_PSVIUni,
  _swigc__p_PanicHandler,
  _swigc__p_RefHash2KeysTableOfTValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t_t,
  _swigc__p_RefHashTableOfTXERCES_CPP_NAMESPACE__ComplexTypeInfo_t,
  _swigc__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XMLAttDef_t,
  _swigc__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XSAnnotation_t,
  _swigc__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesAttGroupInfo_t,
  _swigc__p_RefHashTableOfTXERCES_CPP_NAMESPACE__XercesGroupInfo_t,
  _swigc__p_ValidationContext,
  _swigc__p_ValueVectorOfTXERCES_CPP_NAMESPACE__SchemaElementDecl_p_t,
  _swigc__p_ValueVectorOfTunsigned_int_t,
  _swigc__p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t,
  _swigc__p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t,
  _swigc__p_XERCES_CPP_NAMESPACE__BinInputStream,
  _swigc__p_XERCES_CPP_NAMESPACE__ComplexTypeInfo,
  _swigc__p_XERCES_CPP_NAMESPACE__ContentSpecNode,
  _swigc__p_XERCES_CPP_NAMESPACE__DTDAttDef,
  _swigc__p_XERCES_CPP_NAMESPACE__DTDAttDefList,
  _swigc__p_XERCES_CPP_NAMESPACE__DTDElementDecl,
  _swigc__p_XERCES_CPP_NAMESPACE__DTDEntityDecl,
  _swigc__p_XERCES_CPP_NAMESPACE__DTDGrammar,
  _swigc__p_XERCES_CPP_NAMESPACE__DTDValidator,
  _swigc__p_XERCES_CPP_NAMESPACE__DatatypeValidator,
  _swigc__p_XERCES_CPP_NAMESPACE__EntityResolver,
  _swigc__p_XERCES_CPP_NAMESPACE__ErrorHandler,
  _swigc__p_XERCES_CPP_NAMESPACE__Grammar,
  _swigc__p_XERCES_CPP_NAMESPACE__GrammarResolver,
  _swigc__p_XERCES_CPP_NAMESPACE__Locator,
  _swigc__p_XERCES_CPP_NAMESPACE__MemoryManager,
  _swigc__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t,
  _swigc__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t,
  _swigc__p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__XMLNotationDecl_t,
  _swigc__p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDElementDecl_t,
  _swigc__p_XERCES_CPP_NAMESPACE__NameIdPoolTXERCES_CPP_NAMESPACE__DTDEntityDecl_t,
  _swigc__p_XERCES_CPP_NAMESPACE__NamespaceScope,
  _swigc__p_XERCES_CPP_NAMESPACE__PSVIAttribute,
  _swigc__p_XERCES_CPP_NAMESPACE__PSVIAttributeList,
  _swigc__p_XERCES_CPP_NAMESPACE__PSVIElement,
  _swigc__p_XERCES_CPP_NAMESPACE__PSVIHandler,
  _swigc__p_XERCES_CPP_NAMESPACE__PSVIItem,
  _swigc__p_XERCES_CPP_NAMESPACE__PerlCallbackHandler,
  _swigc__p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandler,
  _swigc__p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler,
  _swigc__p_XERCES_CPP_NAMESPACE__QName,
  _swigc__p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t,
  _swigc__p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t,
  _swigc__p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolTXERCES_CPP_NAMESPACE__SchemaElementDecl_t,
  _swigc__p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t,
  _swigc__p_XERCES_CPP_NAMESPACE__SAXException,
  _swigc__p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException,
  _swigc__p_XERCES_CPP_NAMESPACE__SAXNotSupportedException,
  _swigc__p_XERCES_CPP_NAMESPACE__SAXParseException,
  _swigc__p_XERCES_CPP_NAMESPACE__SchemaAttDef,
  _swigc__p_XERCES_CPP_NAMESPACE__SchemaAttDefList,
  _swigc__p_XERCES_CPP_NAMESPACE__SchemaElementDecl,
  _swigc__p_XERCES_CPP_NAMESPACE__SchemaGrammar,
  _swigc__p_XERCES_CPP_NAMESPACE__SchemaSymbols,
  _swigc__p_XERCES_CPP_NAMESPACE__SchemaValidator,
  _swigc__p_XERCES_CPP_NAMESPACE__SecurityManager,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLAttDef,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLAttDefList,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLAttr,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLContentModel,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLDTDDescription,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLDeleter,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLDocumentHandler,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLElementDecl,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLEntityDecl,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLEntityResolver,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLException,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLExcepts,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLGrammarDescription,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLNotationDecl,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLPScanToken,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLPlatformUtils,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLSchemaDescription,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLURL,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLUni,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLUri,
  _swigc__p_XERCES_CPP_NAMESPACE__XMLValidator,
  _swigc__p_XERCES_CPP_NAMESPACE__XMemory,
  _swigc__p_XERCES_CPP_NAMESPACE__XSAnnotation,
  _swigc__p_XERCES_CPP_NAMESPACE__XSAttributeDeclaration,
  _swigc__p_XERCES_CPP_NAMESPACE__XSElementDeclaration,
  _swigc__p_XERCES_CPP_NAMESPACE__XSModel,
  _swigc__p_XERCES_CPP_NAMESPACE__XSNotationDeclaration,
  _swigc__p_XERCES_CPP_NAMESPACE__XSSimpleTypeDefinition,
  _swigc__p_XERCES_CPP_NAMESPACE__XSTypeDefinition,
  _swigc__p_XERCES_CPP_NAMESPACE__XSValue,
  _swigc__p_XMLBuffer,
  _swigc__p_XMLErrorReporter,
  _swigc__p_XMLErrorReporter__ErrTypes,
  _swigc__p_XSerializable,
  _swigc__p_XSerializeEngine,
  _swigc__p_char,
  _swigc__p_int,
  _swigc__p_int32_t,
  _swigc__p_p_void,
  _swigc__p_size_t,
  _swigc__p_ssize_t,
  _swigc__p_uint16_t,
  _swigc__p_uint32_t,
  _swigc__p_unsigned_char,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_constant_info swig_constants[] = {
{0,0,0,0,0,0}
};
#ifdef __cplusplus
}
#endif
static swig_variable_info swig_variables[] = {
    { "XML::Xercesc::XMLUni_fgAnyString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgAnyString_get,0 },
    { "XML::Xercesc::XMLUni_fgAttListString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgAttListString_get,0 },
    { "XML::Xercesc::XMLUni_fgCommentString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgCommentString_get,0 },
    { "XML::Xercesc::XMLUni_fgCDATAString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgCDATAString_get,0 },
    { "XML::Xercesc::XMLUni_fgDefaultString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDefaultString_get,0 },
    { "XML::Xercesc::XMLUni_fgDocTypeString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDocTypeString_get,0 },
    { "XML::Xercesc::XMLUni_fgEBCDICEncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgEBCDICEncodingString_get,0 },
    { "XML::Xercesc::XMLUni_fgElemString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgElemString_get,0 },
    { "XML::Xercesc::XMLUni_fgEmptyString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgEmptyString_get,0 },
    { "XML::Xercesc::XMLUni_fgEncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgEncodingString_get,0 },
    { "XML::Xercesc::XMLUni_fgEntitString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgEntitString_get,0 },
    { "XML::Xercesc::XMLUni_fgEntityString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgEntityString_get,0 },
    { "XML::Xercesc::XMLUni_fgEntitiesString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgEntitiesString_get,0 },
    { "XML::Xercesc::XMLUni_fgEnumerationString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgEnumerationString_get,0 },
    { "XML::Xercesc::XMLUni_fgExceptDomain", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgExceptDomain_get,0 },
    { "XML::Xercesc::XMLUni_fgFixedString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgFixedString_get,0 },
    { "XML::Xercesc::XMLUni_fgIBM037EncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIBM037EncodingString_get,0 },
    { "XML::Xercesc::XMLUni_fgIBM037EncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIBM037EncodingString2_get,0 },
    { "XML::Xercesc::XMLUni_fgIBM1047EncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIBM1047EncodingString_get,0 },
    { "XML::Xercesc::XMLUni_fgIBM1047EncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIBM1047EncodingString2_get,0 },
    { "XML::Xercesc::XMLUni_fgIBM1140EncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIBM1140EncodingString_get,0 },
    { "XML::Xercesc::XMLUni_fgIBM1140EncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIBM1140EncodingString2_get,0 },
    { "XML::Xercesc::XMLUni_fgIBM1140EncodingString3", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIBM1140EncodingString3_get,0 },
    { "XML::Xercesc::XMLUni_fgIBM1140EncodingString4", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIBM1140EncodingString4_get,0 },
    { "XML::Xercesc::XMLUni_fgIESString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIESString_get,0 },
    { "XML::Xercesc::XMLUni_fgIDString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIDString_get,0 },
    { "XML::Xercesc::XMLUni_fgIDRefString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIDRefString_get,0 },
    { "XML::Xercesc::XMLUni_fgIDRefsString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIDRefsString_get,0 },
    { "XML::Xercesc::XMLUni_fgImpliedString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgImpliedString_get,0 },
    { "XML::Xercesc::XMLUni_fgIgnoreString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIgnoreString_get,0 },
    { "XML::Xercesc::XMLUni_fgIncludeString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIncludeString_get,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgISO88591EncodingString_get,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgISO88591EncodingString2_get,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString3", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgISO88591EncodingString3_get,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString4", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgISO88591EncodingString4_get,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString5", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgISO88591EncodingString5_get,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString6", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgISO88591EncodingString6_get,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString7", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgISO88591EncodingString7_get,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString8", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgISO88591EncodingString8_get,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString9", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgISO88591EncodingString9_get,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString10", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgISO88591EncodingString10_get,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString11", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgISO88591EncodingString11_get,0 },
    { "XML::Xercesc::XMLUni_fgISO88591EncodingString12", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgISO88591EncodingString12_get,0 },
    { "XML::Xercesc::XMLUni_fgLocalHostString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgLocalHostString_get,0 },
    { "XML::Xercesc::XMLUni_fgNoString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgNoString_get,0 },
    { "XML::Xercesc::XMLUni_fgNotationString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgNotationString_get,0 },
    { "XML::Xercesc::XMLUni_fgNDATAString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgNDATAString_get,0 },
    { "XML::Xercesc::XMLUni_fgNmTokenString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgNmTokenString_get,0 },
    { "XML::Xercesc::XMLUni_fgNmTokensString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgNmTokensString_get,0 },
    { "XML::Xercesc::XMLUni_fgPCDATAString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgPCDATAString_get,0 },
    { "XML::Xercesc::XMLUni_fgPIString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgPIString_get,0 },
    { "XML::Xercesc::XMLUni_fgPubIDString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgPubIDString_get,0 },
    { "XML::Xercesc::XMLUni_fgRefString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgRefString_get,0 },
    { "XML::Xercesc::XMLUni_fgRequiredString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgRequiredString_get,0 },
    { "XML::Xercesc::XMLUni_fgStandaloneString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgStandaloneString_get,0 },
    { "XML::Xercesc::XMLUni_fgVersion1_0", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgVersion1_0_get,0 },
    { "XML::Xercesc::XMLUni_fgVersion1_1", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgVersion1_1_get,0 },
    { "XML::Xercesc::XMLUni_fgSysIDString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgSysIDString_get,0 },
    { "XML::Xercesc::XMLUni_fgUnknownURIName", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUnknownURIName_get,0 },
    { "XML::Xercesc::XMLUni_fgUCS4EncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUCS4EncodingString_get,0 },
    { "XML::Xercesc::XMLUni_fgUCS4EncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUCS4EncodingString2_get,0 },
    { "XML::Xercesc::XMLUni_fgUCS4EncodingString3", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUCS4EncodingString3_get,0 },
    { "XML::Xercesc::XMLUni_fgUCS4BEncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUCS4BEncodingString_get,0 },
    { "XML::Xercesc::XMLUni_fgUCS4BEncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUCS4BEncodingString2_get,0 },
    { "XML::Xercesc::XMLUni_fgUCS4LEncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUCS4LEncodingString_get,0 },
    { "XML::Xercesc::XMLUni_fgUCS4LEncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUCS4LEncodingString2_get,0 },
    { "XML::Xercesc::XMLUni_fgUSASCIIEncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUSASCIIEncodingString_get,0 },
    { "XML::Xercesc::XMLUni_fgUSASCIIEncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUSASCIIEncodingString2_get,0 },
    { "XML::Xercesc::XMLUni_fgUSASCIIEncodingString3", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUSASCIIEncodingString3_get,0 },
    { "XML::Xercesc::XMLUni_fgUSASCIIEncodingString4", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUSASCIIEncodingString4_get,0 },
    { "XML::Xercesc::XMLUni_fgUTF8EncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUTF8EncodingString_get,0 },
    { "XML::Xercesc::XMLUni_fgUTF8EncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUTF8EncodingString2_get,0 },
    { "XML::Xercesc::XMLUni_fgUTF16EncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUTF16EncodingString_get,0 },
    { "XML::Xercesc::XMLUni_fgUTF16EncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUTF16EncodingString2_get,0 },
    { "XML::Xercesc::XMLUni_fgUTF16EncodingString3", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUTF16EncodingString3_get,0 },
    { "XML::Xercesc::XMLUni_fgUTF16EncodingString4", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUTF16EncodingString4_get,0 },
    { "XML::Xercesc::XMLUni_fgUTF16EncodingString5", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUTF16EncodingString5_get,0 },
    { "XML::Xercesc::XMLUni_fgUTF16EncodingString6", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUTF16EncodingString6_get,0 },
    { "XML::Xercesc::XMLUni_fgUTF16EncodingString7", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUTF16EncodingString7_get,0 },
    { "XML::Xercesc::XMLUni_fgUTF16BEncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUTF16BEncodingString_get,0 },
    { "XML::Xercesc::XMLUni_fgUTF16BEncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUTF16BEncodingString2_get,0 },
    { "XML::Xercesc::XMLUni_fgUTF16LEncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUTF16LEncodingString_get,0 },
    { "XML::Xercesc::XMLUni_fgUTF16LEncodingString2", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUTF16LEncodingString2_get,0 },
    { "XML::Xercesc::XMLUni_fgVersionString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgVersionString_get,0 },
    { "XML::Xercesc::XMLUni_fgValidityDomain", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgValidityDomain_get,0 },
    { "XML::Xercesc::XMLUni_fgWin1252EncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgWin1252EncodingString_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLChEncodingString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLChEncodingString_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLDOMMsgDomain", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLDOMMsgDomain_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLString_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLStringSpace", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLStringSpace_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLStringHTab", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLStringHTab_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLStringCR", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLStringCR_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLStringLF", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLStringLF_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLStringSpaceU", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLStringSpaceU_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLStringHTabU", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLStringHTabU_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLStringCRU", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLStringCRU_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLStringLFU", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLStringLFU_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLDeclString_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclStringSpace", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLDeclStringSpace_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclStringHTab", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLDeclStringHTab_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclStringLF", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLDeclStringLF_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclStringCR", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLDeclStringCR_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclStringSpaceU", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLDeclStringSpaceU_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclStringHTabU", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLDeclStringHTabU_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclStringLFU", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLDeclStringLFU_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLDeclStringCRU", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLDeclStringCRU_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLNSString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLNSString_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLNSColonString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLNSColonString_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLNSURIName", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLNSURIName_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLErrDomain", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLErrDomain_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLURIName", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLURIName_get,0 },
    { "XML::Xercesc::XMLUni_fgInfosetURIName", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgInfosetURIName_get,0 },
    { "XML::Xercesc::XMLUni_fgYesString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgYesString_get,0 },
    { "XML::Xercesc::XMLUni_fgZeroLenString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgZeroLenString_get,0 },
    { "XML::Xercesc::XMLUni_fgDTDEntityString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDTDEntityString_get,0 },
    { "XML::Xercesc::XMLUni_fgAmp", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgAmp_get,0 },
    { "XML::Xercesc::XMLUni_fgLT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgLT_get,0 },
    { "XML::Xercesc::XMLUni_fgGT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgGT_get,0 },
    { "XML::Xercesc::XMLUni_fgQuot", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgQuot_get,0 },
    { "XML::Xercesc::XMLUni_fgApos", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgApos_get,0 },
    { "XML::Xercesc::XMLUni_fgWFXMLScanner", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgWFXMLScanner_get,0 },
    { "XML::Xercesc::XMLUni_fgIGXMLScanner", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIGXMLScanner_get,0 },
    { "XML::Xercesc::XMLUni_fgSGXMLScanner", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgSGXMLScanner_get,0 },
    { "XML::Xercesc::XMLUni_fgDGXMLScanner", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDGXMLScanner_get,0 },
    { "XML::Xercesc::XMLUni_fgXSAXMLScanner", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXSAXMLScanner_get,0 },
    { "XML::Xercesc::XMLUni_fgCDataStart", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgCDataStart_get,0 },
    { "XML::Xercesc::XMLUni_fgCDataEnd", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgCDataEnd_get,0 },
    { "XML::Xercesc::XMLUni_fgArrayIndexOutOfBoundsException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgArrayIndexOutOfBoundsException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgEmptyStackException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgEmptyStackException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgIllegalArgumentException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIllegalArgumentException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgInvalidCastException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgInvalidCastException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgIOException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIOException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgNoSuchElementException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgNoSuchElementException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgNullPointerException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgNullPointerException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgXMLPlatformUtilsException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXMLPlatformUtilsException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgRuntimeException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgRuntimeException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgTranscodingException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgTranscodingException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgUnexpectedEOFException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUnexpectedEOFException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgUnsupportedEncodingException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUnsupportedEncodingException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgUTFDataFormatException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUTFDataFormatException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgNetAccessorException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgNetAccessorException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgMalformedURLException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgMalformedURLException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgNumberFormatException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgNumberFormatException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgParseException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgParseException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgInvalidDatatypeFacetException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgInvalidDatatypeFacetException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgInvalidDatatypeValueException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgInvalidDatatypeValueException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgSchemaDateTimeException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgSchemaDateTimeException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgXPathException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXPathException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgXSerializationException_Name", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXSerializationException_Name_get,0 },
    { "XML::Xercesc::XMLUni_fgNegINFString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgNegINFString_get,0 },
    { "XML::Xercesc::XMLUni_fgNegZeroString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgNegZeroString_get,0 },
    { "XML::Xercesc::XMLUni_fgPosZeroString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgPosZeroString_get,0 },
    { "XML::Xercesc::XMLUni_fgPosINFString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgPosINFString_get,0 },
    { "XML::Xercesc::XMLUni_fgNaNString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgNaNString_get,0 },
    { "XML::Xercesc::XMLUni_fgEString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgEString_get,0 },
    { "XML::Xercesc::XMLUni_fgZeroString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgZeroString_get,0 },
    { "XML::Xercesc::XMLUni_fgNullString", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgNullString_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesDynamic", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesDynamic_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesSchema", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesSchema_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesSchemaFullChecking", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesSchemaFullChecking_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesIdentityConstraintChecking", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesIdentityConstraintChecking_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesSchemaExternalSchemaLocation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesSchemaExternalSchemaLocation_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesSchemaExternalNoNameSpaceSchemaLocation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesSchemaExternalNoNameSpaceSchemaLocation_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesSecurityManager", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesSecurityManager_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesLoadExternalDTD", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesLoadExternalDTD_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesContinueAfterFatalError", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesContinueAfterFatalError_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesValidationErrorAsFatal", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesValidationErrorAsFatal_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesUserAdoptsDOMDocument", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesUserAdoptsDOMDocument_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesCacheGrammarFromParse", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesCacheGrammarFromParse_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesUseCachedGrammarInParse", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesUseCachedGrammarInParse_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesScannerName", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesScannerName_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesParserUseDocumentFromImplementation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesParserUseDocumentFromImplementation_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesCalculateSrcOfs", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesCalculateSrcOfs_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesStandardUriConformant", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesStandardUriConformant_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesDOMHasPSVIInfo", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesDOMHasPSVIInfo_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesGenerateSyntheticAnnotations", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesGenerateSyntheticAnnotations_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesValidateAnnotations", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesValidateAnnotations_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesIgnoreCachedDTD", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesIgnoreCachedDTD_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesIgnoreAnnotations", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesIgnoreAnnotations_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesDisableDefaultEntityResolution", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesDisableDefaultEntityResolution_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesSkipDTDValidation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesSkipDTDValidation_get,0 },
    { "XML::Xercesc::XMLUni_fgXercesEntityResolver", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercesEntityResolver_get,0 },
    { "XML::Xercesc::XMLUni_fgSAX2CoreValidation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgSAX2CoreValidation_get,0 },
    { "XML::Xercesc::XMLUni_fgSAX2CoreNameSpaces", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgSAX2CoreNameSpaces_get,0 },
    { "XML::Xercesc::XMLUni_fgSAX2CoreNameSpacePrefixes", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgSAX2CoreNameSpacePrefixes_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMCanonicalForm", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMCanonicalForm_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMCDATASections", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMCDATASections_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMComments", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMComments_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMCharsetOverridesXMLEncoding", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMCharsetOverridesXMLEncoding_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMCheckCharacterNormalization", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMCheckCharacterNormalization_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMDatatypeNormalization", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMDatatypeNormalization_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMDisallowDoctype", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMDisallowDoctype_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMElementContentWhitespace", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMElementContentWhitespace_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMErrorHandler", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMErrorHandler_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMEntities", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMEntities_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMIgnoreUnknownCharacterDenormalization", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMIgnoreUnknownCharacterDenormalization_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMInfoset", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMInfoset_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMNamespaces", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMNamespaces_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMNamespaceDeclarations", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMNamespaceDeclarations_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMNormalizeCharacters", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMNormalizeCharacters_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMResourceResolver", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMResourceResolver_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMSchemaLocation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMSchemaLocation_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMSchemaType", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMSchemaType_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMSplitCDATASections", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMSplitCDATASections_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMSupportedMediatypesOnly", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMSupportedMediatypesOnly_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMValidate", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMValidate_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMValidateIfSchema", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMValidateIfSchema_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMWellFormed", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMWellFormed_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMXMLSchemaType", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMXMLSchemaType_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMDTDType", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMDTDType_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTCanonicalForm", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMWRTCanonicalForm_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTDiscardDefaultContent", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMWRTDiscardDefaultContent_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTEntities", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMWRTEntities_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTFormatPrettyPrint", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMWRTFormatPrettyPrint_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTNormalizeCharacters", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMWRTNormalizeCharacters_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTSplitCdataSections", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMWRTSplitCdataSections_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTValidation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMWRTValidation_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTWhitespaceInElementContent", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMWRTWhitespaceInElementContent_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTBOM", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMWRTBOM_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMXMLDeclaration", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMXMLDeclaration_get,0 },
    { "XML::Xercesc::XMLUni_fgDOMWRTXercesPrettyPrint", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDOMWRTXercesPrettyPrint_get,0 },
    { "XML::Xercesc::XMLUni_fgXercescInterfacePSVITypeInfo", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercescInterfacePSVITypeInfo_get,0 },
    { "XML::Xercesc::XMLUni_fgXercescInterfaceDOMDocumentTypeImpl", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercescInterfaceDOMDocumentTypeImpl_get,0 },
    { "XML::Xercesc::XMLUni_fgXercescInterfaceDOMMemoryManager", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercescInterfaceDOMMemoryManager_get,0 },
    { "XML::Xercesc::XMLUni_fgXercescDefaultLocale", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgXercescDefaultLocale_get,0 },
    { "XML::Xercesc::XMLUni_fgDefErrMsg", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgDefErrMsg_get,0 },
    { "XML::Xercesc::XMLUni_fgValueZero", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgValueZero_get,0 },
    { "XML::Xercesc::XMLUni_fgNegOne", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgNegOne_get,0 },
    { "XML::Xercesc::XMLUni_fgValueOne", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgValueOne_get,0 },
    { "XML::Xercesc::XMLUni_fgLongMaxInc", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgLongMaxInc_get,0 },
    { "XML::Xercesc::XMLUni_fgLongMinInc", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgLongMinInc_get,0 },
    { "XML::Xercesc::XMLUni_fgIntMaxInc", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIntMaxInc_get,0 },
    { "XML::Xercesc::XMLUni_fgIntMinInc", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgIntMinInc_get,0 },
    { "XML::Xercesc::XMLUni_fgShortMaxInc", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgShortMaxInc_get,0 },
    { "XML::Xercesc::XMLUni_fgShortMinInc", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgShortMinInc_get,0 },
    { "XML::Xercesc::XMLUni_fgByteMaxInc", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgByteMaxInc_get,0 },
    { "XML::Xercesc::XMLUni_fgByteMinInc", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgByteMinInc_get,0 },
    { "XML::Xercesc::XMLUni_fgULongMaxInc", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgULongMaxInc_get,0 },
    { "XML::Xercesc::XMLUni_fgUIntMaxInc", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUIntMaxInc_get,0 },
    { "XML::Xercesc::XMLUni_fgUShortMaxInc", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUShortMaxInc_get,0 },
    { "XML::Xercesc::XMLUni_fgUByteMaxInc", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgUByteMaxInc_get,0 },
    { "XML::Xercesc::XMLUni_fgLangPattern", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgLangPattern_get,0 },
    { "XML::Xercesc::XMLUni_fgBooleanValueSpace", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgBooleanValueSpace_get,0 },
    { "XML::Xercesc::XMLUni_fgBooleanValueSpaceArraySize", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLUni_fgBooleanValueSpaceArraySize_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgURI_XSI", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgURI_XSI_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgURI_SCHEMAFORSCHEMA", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgURI_SCHEMAFORSCHEMA_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgXSI_SCHEMALOCACTION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgXSI_SCHEMALOCACTION_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgXSI_NONAMESPACESCHEMALOCACTION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgXSI_NONAMESPACESCHEMALOCACTION_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgXSI_TYPE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgXSI_TYPE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_ALL", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_ALL_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_ANNOTATION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_ANNOTATION_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_ANY", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_ANY_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_WILDCARD", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_WILDCARD_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_ANYATTRIBUTE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_ANYATTRIBUTE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_APPINFO", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_APPINFO_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_ATTRIBUTE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_ATTRIBUTE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_ATTRIBUTEGROUP", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_ATTRIBUTEGROUP_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_CHOICE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_CHOICE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_COMPLEXTYPE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_COMPLEXTYPE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_CONTENT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_CONTENT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_DOCUMENTATION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_DOCUMENTATION_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_DURATION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_DURATION_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_ELEMENT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_ELEMENT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_ENCODING", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_ENCODING_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_ENUMERATION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_ENUMERATION_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_FIELD", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_FIELD_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_WHITESPACE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_WHITESPACE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_GROUP", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_GROUP_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_IMPORT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_IMPORT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_INCLUDE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_INCLUDE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_REDEFINE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_REDEFINE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_KEY", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_KEY_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_KEYREF", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_KEYREF_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_LENGTH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_LENGTH_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_MAXEXCLUSIVE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_MAXEXCLUSIVE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_MAXINCLUSIVE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_MAXINCLUSIVE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_MAXLENGTH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_MAXLENGTH_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_MINEXCLUSIVE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_MINEXCLUSIVE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_MININCLUSIVE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_MININCLUSIVE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_MINLENGTH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_MINLENGTH_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_NOTATION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_NOTATION_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_PATTERN", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_PATTERN_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_PERIOD", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_PERIOD_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_TOTALDIGITS", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_TOTALDIGITS_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_FRACTIONDIGITS", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_FRACTIONDIGITS_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_SCHEMA", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_SCHEMA_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_SELECTOR", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_SELECTOR_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_SEQUENCE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_SEQUENCE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_SIMPLETYPE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_SIMPLETYPE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_UNION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_UNION_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_LIST", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_LIST_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_UNIQUE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_UNIQUE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_COMPLEXCONTENT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_COMPLEXCONTENT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_SIMPLECONTENT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_SIMPLECONTENT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_RESTRICTION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_RESTRICTION_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgELT_EXTENSION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgELT_EXTENSION_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_ABSTRACT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_ABSTRACT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_ATTRIBUTEFORMDEFAULT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_ATTRIBUTEFORMDEFAULT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_BASE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_BASE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_ITEMTYPE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_ITEMTYPE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_MEMBERTYPES", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_MEMBERTYPES_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_BLOCK", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_BLOCK_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_BLOCKDEFAULT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_BLOCKDEFAULT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_DEFAULT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_DEFAULT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_ELEMENTFORMDEFAULT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_ELEMENTFORMDEFAULT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_SUBSTITUTIONGROUP", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_SUBSTITUTIONGROUP_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_FINAL", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_FINAL_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_FINALDEFAULT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_FINALDEFAULT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_FIXED", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_FIXED_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_FORM", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_FORM_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_ID", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_ID_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_MAXOCCURS", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_MAXOCCURS_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_MINOCCURS", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_MINOCCURS_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_NAME", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_NAME_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_NAMESPACE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_NAMESPACE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_NILL", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_NILL_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_NILLABLE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_NILLABLE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_PROCESSCONTENTS", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_PROCESSCONTENTS_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_REF", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_REF_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_REFER", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_REFER_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_SCHEMALOCATION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_SCHEMALOCATION_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_SOURCE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_SOURCE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_SYSTEM", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_SYSTEM_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_PUBLIC", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_PUBLIC_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_TARGETNAMESPACE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_TARGETNAMESPACE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_TYPE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_TYPE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_USE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_USE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_VALUE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_VALUE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_MIXED", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_MIXED_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_VERSION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_VERSION_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATT_XPATH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATT_XPATH_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_TWOPOUNDANY", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_TWOPOUNDANY_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_TWOPOUNDLOCAL", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_TWOPOUNDLOCAL_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_TWOPOUNDOTHER", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_TWOPOUNDOTHER_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_TWOPOUNDTRAGETNAMESPACE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_TWOPOUNDTRAGETNAMESPACE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_POUNDALL", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_POUNDALL_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_BASE64", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_BASE64_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_BOOLEAN", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_BOOLEAN_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_DEFAULT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_DEFAULT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_ELEMENTONLY", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_ELEMENTONLY_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_EMPTY", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_EMPTY_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_EXTENSION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_EXTENSION_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_FALSE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_FALSE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_FIXED", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_FIXED_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_HEX", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_HEX_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_ID", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_ID_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_LAX", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_LAX_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_MAXLENGTH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_MAXLENGTH_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_MINLENGTH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_MINLENGTH_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_MIXED", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_MIXED_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_NCNAME", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_NCNAME_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_OPTIONAL", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_OPTIONAL_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_PROHIBITED", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_PROHIBITED_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_QNAME", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_QNAME_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_QUALIFIED", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_QUALIFIED_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_REQUIRED", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_REQUIRED_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_RESTRICTION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_RESTRICTION_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_SKIP", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_SKIP_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_STRICT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_STRICT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_STRING", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_STRING_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_TEXTONLY", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_TEXTONLY_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_TIMEDURATION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_TIMEDURATION_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_TRUE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_TRUE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_UNQUALIFIED", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_UNQUALIFIED_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_URI", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_URI_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_URIREFERENCE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_URIREFERENCE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_SUBSTITUTIONGROUP", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_SUBSTITUTIONGROUP_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_SUBSTITUTION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_SUBSTITUTION_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgATTVAL_ANYTYPE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgATTVAL_ANYTYPE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgWS_PRESERVE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgWS_PRESERVE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgWS_COLLAPSE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgWS_COLLAPSE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgWS_REPLACE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgWS_REPLACE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_STRING", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_STRING_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_TOKEN", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_TOKEN_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_LANGUAGE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_LANGUAGE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_NAME", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_NAME_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_NCNAME", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_NCNAME_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_INTEGER", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_INTEGER_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_DECIMAL", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_DECIMAL_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_BOOLEAN", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_BOOLEAN_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_NONPOSITIVEINTEGER", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_NONPOSITIVEINTEGER_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_NEGATIVEINTEGER", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_NEGATIVEINTEGER_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_LONG", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_LONG_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_INT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_INT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_SHORT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_SHORT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_BYTE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_BYTE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_NONNEGATIVEINTEGER", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_NONNEGATIVEINTEGER_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_ULONG", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_ULONG_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_UINT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_UINT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_USHORT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_USHORT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_UBYTE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_UBYTE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_POSITIVEINTEGER", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_POSITIVEINTEGER_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_DATETIME", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_DATETIME_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_DATE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_DATE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_TIME", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_TIME_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_DURATION", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_DURATION_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_DAY", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_DAY_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_MONTH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_MONTH_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_MONTHDAY", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_MONTHDAY_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_YEAR", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_YEAR_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_YEARMONTH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_YEARMONTH_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_BASE64BINARY", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_BASE64BINARY_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_HEXBINARY", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_HEXBINARY_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_FLOAT", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_FLOAT_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_DOUBLE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_DOUBLE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_URIREFERENCE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_URIREFERENCE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_ANYURI", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_ANYURI_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_QNAME", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_QNAME_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_NORMALIZEDSTRING", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_NORMALIZEDSTRING_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgDT_ANYSIMPLETYPE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgDT_ANYSIMPLETYPE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgRegEx_XOption", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgRegEx_XOption_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgRedefIdentifier", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgRedefIdentifier_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgINT_MIN_VALUE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgINT_MIN_VALUE_get,0 },
    { "XML::Xercesc::SchemaSymbols_fgINT_MAX_VALUE", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_SchemaSymbols_fgINT_MAX_VALUE_get,0 },
    { "XML::Xercesc::PSVIUni_fgPsvColon", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgPsvColon_get,0 },
    { "XML::Xercesc::PSVIUni_fgAllDeclarationsProcessed", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAllDeclarationsProcessed_get,0 },
    { "XML::Xercesc::PSVIUni_fgAttribute", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAttribute_get,0 },
    { "XML::Xercesc::PSVIUni_fgAttributes", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAttributes_get,0 },
    { "XML::Xercesc::PSVIUni_fgAttributeType", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAttributeType_get,0 },
    { "XML::Xercesc::PSVIUni_fgBaseURI", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgBaseURI_get,0 },
    { "XML::Xercesc::PSVIUni_fgCharacter", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgCharacter_get,0 },
    { "XML::Xercesc::PSVIUni_fgCharacterEncodingScheme", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgCharacterEncodingScheme_get,0 },
    { "XML::Xercesc::PSVIUni_fgChildren", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgChildren_get,0 },
    { "XML::Xercesc::PSVIUni_fgComment", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgComment_get,0 },
    { "XML::Xercesc::PSVIUni_fgContent", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgContent_get,0 },
    { "XML::Xercesc::PSVIUni_fgDocument", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgDocument_get,0 },
    { "XML::Xercesc::PSVIUni_fgDocTypeDeclaration", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgDocTypeDeclaration_get,0 },
    { "XML::Xercesc::PSVIUni_fgDocumentElement", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgDocumentElement_get,0 },
    { "XML::Xercesc::PSVIUni_fgElement", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgElement_get,0 },
    { "XML::Xercesc::PSVIUni_fgInScopeNamespaces", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgInScopeNamespaces_get,0 },
    { "XML::Xercesc::PSVIUni_fgLocalName", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgLocalName_get,0 },
    { "XML::Xercesc::PSVIUni_fgNamespace", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNamespace_get,0 },
    { "XML::Xercesc::PSVIUni_fgNamespaceAttributes", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNamespaceAttributes_get,0 },
    { "XML::Xercesc::PSVIUni_fgNamespaceName", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNamespaceName_get,0 },
    { "XML::Xercesc::PSVIUni_fgNormalizedValue", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNormalizedValue_get,0 },
    { "XML::Xercesc::PSVIUni_fgNotations", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNotations_get,0 },
    { "XML::Xercesc::PSVIUni_fgPrefix", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgPrefix_get,0 },
    { "XML::Xercesc::PSVIUni_fgProcessingInstruction", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgProcessingInstruction_get,0 },
    { "XML::Xercesc::PSVIUni_fgReferences", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgReferences_get,0 },
    { "XML::Xercesc::PSVIUni_fgSpecified", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSpecified_get,0 },
    { "XML::Xercesc::PSVIUni_fgStandalone", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgStandalone_get,0 },
    { "XML::Xercesc::PSVIUni_fgTarget", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgTarget_get,0 },
    { "XML::Xercesc::PSVIUni_fgText", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgText_get,0 },
    { "XML::Xercesc::PSVIUni_fgTextContent", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgTextContent_get,0 },
    { "XML::Xercesc::PSVIUni_fgUnparsedEntities", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgUnparsedEntities_get,0 },
    { "XML::Xercesc::PSVIUni_fgVersion", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgVersion_get,0 },
    { "XML::Xercesc::PSVIUni_fgAbstract", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAbstract_get,0 },
    { "XML::Xercesc::PSVIUni_fgAnnotation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAnnotation_get,0 },
    { "XML::Xercesc::PSVIUni_fgAnnotations", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAnnotations_get,0 },
    { "XML::Xercesc::PSVIUni_fgApplicationInformation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgApplicationInformation_get,0 },
    { "XML::Xercesc::PSVIUni_fgAttributeDeclaration", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAttributeDeclaration_get,0 },
    { "XML::Xercesc::PSVIUni_fgAttributeGroupDefinition", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAttributeGroupDefinition_get,0 },
    { "XML::Xercesc::PSVIUni_fgAttributeUse", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAttributeUse_get,0 },
    { "XML::Xercesc::PSVIUni_fgAttributeUses", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAttributeUses_get,0 },
    { "XML::Xercesc::PSVIUni_fgAttributeWildcard", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAttributeWildcard_get,0 },
    { "XML::Xercesc::PSVIUni_fgBaseTypeDefinition", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgBaseTypeDefinition_get,0 },
    { "XML::Xercesc::PSVIUni_fgCanonicalRepresentation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgCanonicalRepresentation_get,0 },
    { "XML::Xercesc::PSVIUni_fgComplexTypeDefinition", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgComplexTypeDefinition_get,0 },
    { "XML::Xercesc::PSVIUni_fgCompositor", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgCompositor_get,0 },
    { "XML::Xercesc::PSVIUni_fgContentType", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgContentType_get,0 },
    { "XML::Xercesc::PSVIUni_fgDeclaration", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgDeclaration_get,0 },
    { "XML::Xercesc::PSVIUni_fgDerivationMethod", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgDerivationMethod_get,0 },
    { "XML::Xercesc::PSVIUni_fgDisallowedSubstitutions", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgDisallowedSubstitutions_get,0 },
    { "XML::Xercesc::PSVIUni_fgPsvDocument", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgPsvDocument_get,0 },
    { "XML::Xercesc::PSVIUni_fgDocumentLocation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgDocumentLocation_get,0 },
    { "XML::Xercesc::PSVIUni_fgElementDeclaration", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgElementDeclaration_get,0 },
    { "XML::Xercesc::PSVIUni_fgFacets", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgFacets_get,0 },
    { "XML::Xercesc::PSVIUni_fgFacetFixed", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgFacetFixed_get,0 },
    { "XML::Xercesc::PSVIUni_fgFields", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgFields_get,0 },
    { "XML::Xercesc::PSVIUni_fgFinal", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgFinal_get,0 },
    { "XML::Xercesc::PSVIUni_fgFundamentalFacets", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgFundamentalFacets_get,0 },
    { "XML::Xercesc::PSVIUni_fgIdentityConstraintCategory", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgIdentityConstraintCategory_get,0 },
    { "XML::Xercesc::PSVIUni_fgIdentityConstraintDefinition", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgIdentityConstraintDefinition_get,0 },
    { "XML::Xercesc::PSVIUni_fgIdentityConstraintDefinitions", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgIdentityConstraintDefinitions_get,0 },
    { "XML::Xercesc::PSVIUni_fgIdentityConstraintTable", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgIdentityConstraintTable_get,0 },
    { "XML::Xercesc::PSVIUni_fgIdIdrefTable", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgIdIdrefTable_get,0 },
    { "XML::Xercesc::PSVIUni_fgItemTypeDefinition", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgItemTypeDefinition_get,0 },
    { "XML::Xercesc::PSVIUni_fgMaxOccurs", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgMaxOccurs_get,0 },
    { "XML::Xercesc::PSVIUni_fgMemberTypeDefinition", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgMemberTypeDefinition_get,0 },
    { "XML::Xercesc::PSVIUni_fgMemberTypeDefinitions", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgMemberTypeDefinitions_get,0 },
    { "XML::Xercesc::PSVIUni_fgMinOccurs", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgMinOccurs_get,0 },
    { "XML::Xercesc::PSVIUni_fgModelGroup", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgModelGroup_get,0 },
    { "XML::Xercesc::PSVIUni_fgModelGroupDefinition", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgModelGroupDefinition_get,0 },
    { "XML::Xercesc::PSVIUni_fgName", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgName_get,0 },
    { "XML::Xercesc::PSVIUni_fgNamespaceConstraint", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNamespaceConstraint_get,0 },
    { "XML::Xercesc::PSVIUni_fgNamespaces", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNamespaces_get,0 },
    { "XML::Xercesc::PSVIUni_fgNamespaceSchemaInformation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNamespaceSchemaInformation_get,0 },
    { "XML::Xercesc::PSVIUni_fgNil", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNil_get,0 },
    { "XML::Xercesc::PSVIUni_fgNillable", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNillable_get,0 },
    { "XML::Xercesc::PSVIUni_fgNotation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNotation_get,0 },
    { "XML::Xercesc::PSVIUni_fgNotationDeclaration", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNotationDeclaration_get,0 },
    { "XML::Xercesc::PSVIUni_fgParticle", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgParticle_get,0 },
    { "XML::Xercesc::PSVIUni_fgParticles", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgParticles_get,0 },
    { "XML::Xercesc::PSVIUni_fgPrimitiveTypeDefinition", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgPrimitiveTypeDefinition_get,0 },
    { "XML::Xercesc::PSVIUni_fgProcessContents", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgProcessContents_get,0 },
    { "XML::Xercesc::PSVIUni_fgProhibitedSubstitutions", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgProhibitedSubstitutions_get,0 },
    { "XML::Xercesc::PSVIUni_fgPublicIdentifier", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgPublicIdentifier_get,0 },
    { "XML::Xercesc::PSVIUni_fgReferencedKey", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgReferencedKey_get,0 },
    { "XML::Xercesc::PSVIUni_fgRequired", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgRequired_get,0 },
    { "XML::Xercesc::PSVIUni_fgSchemaAnnotations", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSchemaAnnotations_get,0 },
    { "XML::Xercesc::PSVIUni_fgSchemaComponents", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSchemaComponents_get,0 },
    { "XML::Xercesc::PSVIUni_fgSchemaDefault", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSchemaDefault_get,0 },
    { "XML::Xercesc::PSVIUni_fgSchemaDocument", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSchemaDocument_get,0 },
    { "XML::Xercesc::PSVIUni_fgSchemaDocuments", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSchemaDocuments_get,0 },
    { "XML::Xercesc::PSVIUni_fgSchemaErrorCode", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSchemaErrorCode_get,0 },
    { "XML::Xercesc::PSVIUni_fgSchemaInformation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSchemaInformation_get,0 },
    { "XML::Xercesc::PSVIUni_fgSchemaNamespace", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSchemaNamespace_get,0 },
    { "XML::Xercesc::PSVIUni_fgSchemaNormalizedValue", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSchemaNormalizedValue_get,0 },
    { "XML::Xercesc::PSVIUni_fgSchemaSpecified", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSchemaSpecified_get,0 },
    { "XML::Xercesc::PSVIUni_fgScope", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgScope_get,0 },
    { "XML::Xercesc::PSVIUni_fgSelector", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSelector_get,0 },
    { "XML::Xercesc::PSVIUni_fgSimpleTypeDefinition", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSimpleTypeDefinition_get,0 },
    { "XML::Xercesc::PSVIUni_fgSubstitutionGroupAffiliation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSubstitutionGroupAffiliation_get,0 },
    { "XML::Xercesc::PSVIUni_fgSubstitutionGroupExclusions", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSubstitutionGroupExclusions_get,0 },
    { "XML::Xercesc::PSVIUni_fgSystemIdentifier", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSystemIdentifier_get,0 },
    { "XML::Xercesc::PSVIUni_fgTargetNamespace", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgTargetNamespace_get,0 },
    { "XML::Xercesc::PSVIUni_fgTerm", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgTerm_get,0 },
    { "XML::Xercesc::PSVIUni_fgTypeDefinition", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgTypeDefinition_get,0 },
    { "XML::Xercesc::PSVIUni_fgUserInformation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgUserInformation_get,0 },
    { "XML::Xercesc::PSVIUni_fgValidationAttempted", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgValidationAttempted_get,0 },
    { "XML::Xercesc::PSVIUni_fgValidationContext", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgValidationContext_get,0 },
    { "XML::Xercesc::PSVIUni_fgValidity", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgValidity_get,0 },
    { "XML::Xercesc::PSVIUni_fgValue", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgValue_get,0 },
    { "XML::Xercesc::PSVIUni_fgValueConstraint", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgValueConstraint_get,0 },
    { "XML::Xercesc::PSVIUni_fgVariety", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgVariety_get,0 },
    { "XML::Xercesc::PSVIUni_fgWildcard", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgWildcard_get,0 },
    { "XML::Xercesc::PSVIUni_fgXpath", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgXpath_get,0 },
    { "XML::Xercesc::PSVIUni_fgAll", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAll_get,0 },
    { "XML::Xercesc::PSVIUni_fgAny", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAny_get,0 },
    { "XML::Xercesc::PSVIUni_fgAppinfo", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAppinfo_get,0 },
    { "XML::Xercesc::PSVIUni_fgAtomic", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAtomic_get,0 },
    { "XML::Xercesc::PSVIUni_fgChoice", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgChoice_get,0 },
    { "XML::Xercesc::PSVIUni_fgDefault", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgDefault_get,0 },
    { "XML::Xercesc::PSVIUni_fgDocumentation", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgDocumentation_get,0 },
    { "XML::Xercesc::PSVIUni_fgElementOnly", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgElementOnly_get,0 },
    { "XML::Xercesc::PSVIUni_fgEmpty", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgEmpty_get,0 },
    { "XML::Xercesc::PSVIUni_fgExtension", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgExtension_get,0 },
    { "XML::Xercesc::PSVIUni_fgFalse", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgFalse_get,0 },
    { "XML::Xercesc::PSVIUni_fgFull", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgFull_get,0 },
    { "XML::Xercesc::PSVIUni_fgGlobal", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgGlobal_get,0 },
    { "XML::Xercesc::PSVIUni_fgInfoset", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgInfoset_get,0 },
    { "XML::Xercesc::PSVIUni_fgInvalid", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgInvalid_get,0 },
    { "XML::Xercesc::PSVIUni_fgKey", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgKey_get,0 },
    { "XML::Xercesc::PSVIUni_fgKeyref", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgKeyref_get,0 },
    { "XML::Xercesc::PSVIUni_fgLax", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgLax_get,0 },
    { "XML::Xercesc::PSVIUni_fgList", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgList_get,0 },
    { "XML::Xercesc::PSVIUni_fgLocal", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgLocal_get,0 },
    { "XML::Xercesc::PSVIUni_fgMixed", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgMixed_get,0 },
    { "XML::Xercesc::PSVIUni_fgNone", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNone_get,0 },
    { "XML::Xercesc::PSVIUni_fgNotKnown", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNotKnown_get,0 },
    { "XML::Xercesc::PSVIUni_fgNsNamespace", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNsNamespace_get,0 },
    { "XML::Xercesc::PSVIUni_fgOnePointZero", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgOnePointZero_get,0 },
    { "XML::Xercesc::PSVIUni_fgPartial", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgPartial_get,0 },
    { "XML::Xercesc::PSVIUni_fgRestrict", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgRestrict_get,0 },
    { "XML::Xercesc::PSVIUni_fgRestriction", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgRestriction_get,0 },
    { "XML::Xercesc::PSVIUni_fgSchema", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSchema_get,0 },
    { "XML::Xercesc::PSVIUni_fgSequence", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSequence_get,0 },
    { "XML::Xercesc::PSVIUni_fgSimple", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSimple_get,0 },
    { "XML::Xercesc::PSVIUni_fgSkip", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSkip_get,0 },
    { "XML::Xercesc::PSVIUni_fgStrict", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgStrict_get,0 },
    { "XML::Xercesc::PSVIUni_fgSubstitution", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgSubstitution_get,0 },
    { "XML::Xercesc::PSVIUni_fgTotal", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgTotal_get,0 },
    { "XML::Xercesc::PSVIUni_fgTrue", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgTrue_get,0 },
    { "XML::Xercesc::PSVIUni_fgUnbounded", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgUnbounded_get,0 },
    { "XML::Xercesc::PSVIUni_fgUnion", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgUnion_get,0 },
    { "XML::Xercesc::PSVIUni_fgUnique", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgUnique_get,0 },
    { "XML::Xercesc::PSVIUni_fgUnknown", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgUnknown_get,0 },
    { "XML::Xercesc::PSVIUni_fgValid", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgValid_get,0 },
    { "XML::Xercesc::PSVIUni_fgVCFixed", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgVCFixed_get,0 },
    { "XML::Xercesc::PSVIUni_fgXMLChNull", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgXMLChNull_get,0 },
    { "XML::Xercesc::PSVIUni_fgAg", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAg_get,0 },
    { "XML::Xercesc::PSVIUni_fgAnnot", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAnnot_get,0 },
    { "XML::Xercesc::PSVIUni_fgAttr", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAttr_get,0 },
    { "XML::Xercesc::PSVIUni_fgAu", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgAu_get,0 },
    { "XML::Xercesc::PSVIUni_fgElt", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgElt_get,0 },
    { "XML::Xercesc::PSVIUni_fgIdc", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgIdc_get,0 },
    { "XML::Xercesc::PSVIUni_fgMg", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgMg_get,0 },
    { "XML::Xercesc::PSVIUni_fgNot", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNot_get,0 },
    { "XML::Xercesc::PSVIUni_fgType", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgType_get,0 },
    { "XML::Xercesc::PSVIUni_fgBounded", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgBounded_get,0 },
    { "XML::Xercesc::PSVIUni_fgCardinality", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgCardinality_get,0 },
    { "XML::Xercesc::PSVIUni_fgEnumeration", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgEnumeration_get,0 },
    { "XML::Xercesc::PSVIUni_fgFractionDigits", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgFractionDigits_get,0 },
    { "XML::Xercesc::PSVIUni_fgLength", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgLength_get,0 },
    { "XML::Xercesc::PSVIUni_fgMaxExclusive", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgMaxExclusive_get,0 },
    { "XML::Xercesc::PSVIUni_fgMaxInclusive", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgMaxInclusive_get,0 },
    { "XML::Xercesc::PSVIUni_fgMaxLength", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgMaxLength_get,0 },
    { "XML::Xercesc::PSVIUni_fgMinExclusive", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgMinExclusive_get,0 },
    { "XML::Xercesc::PSVIUni_fgMinInclusive", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgMinInclusive_get,0 },
    { "XML::Xercesc::PSVIUni_fgMinLength", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgMinLength_get,0 },
    { "XML::Xercesc::PSVIUni_fgNumeric", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNumeric_get,0 },
    { "XML::Xercesc::PSVIUni_fgOrdered", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgOrdered_get,0 },
    { "XML::Xercesc::PSVIUni_fgPattern", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgPattern_get,0 },
    { "XML::Xercesc::PSVIUni_fgTotalDigits", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgTotalDigits_get,0 },
    { "XML::Xercesc::PSVIUni_fgWhiteSpace", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgWhiteSpace_get,0 },
    { "XML::Xercesc::PSVIUni_fgNamespaceInfoset", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNamespaceInfoset_get,0 },
    { "XML::Xercesc::PSVIUni_fgXsi", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgXsi_get,0 },
    { "XML::Xercesc::PSVIUni_fgNamespaceInstance", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNamespaceInstance_get,0 },
    { "XML::Xercesc::PSVIUni_fgPsv", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgPsv_get,0 },
    { "XML::Xercesc::PSVIUni_fgNamespacePsvi", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNamespacePsvi_get,0 },
    { "XML::Xercesc::PSVIUni_fgXml", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgXml_get,0 },
    { "XML::Xercesc::PSVIUni_fgNamespaceXmlSchema", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_PSVIUni_fgNamespaceXmlSchema_get,0 },
    { "XML::Xercesc::XMLElementDecl_fgInvalidElemId", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLElementDecl_fgInvalidElemId_get,0 },
    { "XML::Xercesc::XMLElementDecl_fgPCDataElemId", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLElementDecl_fgPCDataElemId_get,0 },
    { "XML::Xercesc::XMLElementDecl_fgPCDataElemName", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLElementDecl_fgPCDataElemName_get,0 },
    { "XML::Xercesc::XMLAttDef_fgInvalidAttrId", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_XMLAttDef_fgInvalidAttrId_get,0 },
{0,0,0,0}
};
static swig_command_info swig_commands[] = {
{"XML::Xercesc::delete_XMLUni", _wrap_delete_XMLUni},
{"XML::Xercesc::delete_SchemaSymbols", _wrap_delete_SchemaSymbols},
{"XML::Xercesc::new_PSVIUni", _wrap_new_PSVIUni},
{"XML::Xercesc::delete_PSVIUni", _wrap_delete_PSVIUni},
{"XML::Xercesc::delete_XMLDeleter", _wrap_delete_XMLDeleter},
{"XML::Xercesc::XMLPlatformUtils_Initialize", _wrap_XMLPlatformUtils_Initialize},
{"XML::Xercesc::XMLPlatformUtils_Terminate", _wrap_XMLPlatformUtils_Terminate},
{"XML::Xercesc::delete_XMLPlatformUtils", _wrap_delete_XMLPlatformUtils},
{"XML::Xercesc::XMLURL_lookupByName", _wrap_XMLURL_lookupByName},
{"XML::Xercesc::XMLURL_parse", _wrap_XMLURL_parse},
{"XML::Xercesc::new_XMLURL", _wrap_new_XMLURL},
{"XML::Xercesc::delete_XMLURL", _wrap_delete_XMLURL},
{"XML::Xercesc::XMLURL___eq__", _wrap_XMLURL___eq__},
{"XML::Xercesc::XMLURL___ne__", _wrap_XMLURL___ne__},
{"XML::Xercesc::XMLURL_getFragment", _wrap_XMLURL_getFragment},
{"XML::Xercesc::XMLURL_getHost", _wrap_XMLURL_getHost},
{"XML::Xercesc::XMLURL_getPassword", _wrap_XMLURL_getPassword},
{"XML::Xercesc::XMLURL_getPath", _wrap_XMLURL_getPath},
{"XML::Xercesc::XMLURL_getPortNum", _wrap_XMLURL_getPortNum},
{"XML::Xercesc::XMLURL_getProtocol", _wrap_XMLURL_getProtocol},
{"XML::Xercesc::XMLURL_getProtocolName", _wrap_XMLURL_getProtocolName},
{"XML::Xercesc::XMLURL_getQuery", _wrap_XMLURL_getQuery},
{"XML::Xercesc::XMLURL_getURLText", _wrap_XMLURL_getURLText},
{"XML::Xercesc::XMLURL_getUser", _wrap_XMLURL_getUser},
{"XML::Xercesc::XMLURL_getMemoryManager", _wrap_XMLURL_getMemoryManager},
{"XML::Xercesc::XMLURL_setURL", _wrap_XMLURL_setURL},
{"XML::Xercesc::XMLURL_isRelative", _wrap_XMLURL_isRelative},
{"XML::Xercesc::XMLURL_hasInvalidChar", _wrap_XMLURL_hasInvalidChar},
{"XML::Xercesc::XMLURL_makeNewStream", _wrap_XMLURL_makeNewStream},
{"XML::Xercesc::XMLURL_makeRelativeTo", _wrap_XMLURL_makeRelativeTo},
{"XML::Xercesc::delete_XMLUri", _wrap_delete_XMLUri},
{"XML::Xercesc::XMLUri_getUriText", _wrap_XMLUri_getUriText},
{"XML::Xercesc::XMLUri_getScheme", _wrap_XMLUri_getScheme},
{"XML::Xercesc::XMLUri_getUserInfo", _wrap_XMLUri_getUserInfo},
{"XML::Xercesc::XMLUri_getHost", _wrap_XMLUri_getHost},
{"XML::Xercesc::XMLUri_getPort", _wrap_XMLUri_getPort},
{"XML::Xercesc::XMLUri_getRegBasedAuthority", _wrap_XMLUri_getRegBasedAuthority},
{"XML::Xercesc::XMLUri_getPath", _wrap_XMLUri_getPath},
{"XML::Xercesc::XMLUri_getQueryString", _wrap_XMLUri_getQueryString},
{"XML::Xercesc::XMLUri_getFragment", _wrap_XMLUri_getFragment},
{"XML::Xercesc::XMLUri_setScheme", _wrap_XMLUri_setScheme},
{"XML::Xercesc::XMLUri_setUserInfo", _wrap_XMLUri_setUserInfo},
{"XML::Xercesc::XMLUri_setHost", _wrap_XMLUri_setHost},
{"XML::Xercesc::XMLUri_setPort", _wrap_XMLUri_setPort},
{"XML::Xercesc::XMLUri_setRegBasedAuthority", _wrap_XMLUri_setRegBasedAuthority},
{"XML::Xercesc::XMLUri_setPath", _wrap_XMLUri_setPath},
{"XML::Xercesc::XMLUri_setQueryString", _wrap_XMLUri_setQueryString},
{"XML::Xercesc::XMLUri_setFragment", _wrap_XMLUri_setFragment},
{"XML::Xercesc::XMLUri_isURIString", _wrap_XMLUri_isURIString},
{"XML::Xercesc::XMLUri_isValidURI", _wrap_XMLUri_isValidURI},
{"XML::Xercesc::XMLUri_normalizeURI", _wrap_XMLUri_normalizeURI},
{"XML::Xercesc::new_XMLUri", _wrap_new_XMLUri},
{"XML::Xercesc::delete_XMLExcepts", _wrap_delete_XMLExcepts},
{"XML::Xercesc::delete_XMLException", _wrap_delete_XMLException},
{"XML::Xercesc::XMLException_getType", _wrap_XMLException_getType},
{"XML::Xercesc::XMLException_getCode", _wrap_XMLException_getCode},
{"XML::Xercesc::XMLException_getMessage", _wrap_XMLException_getMessage},
{"XML::Xercesc::XMLException_getSrcFile", _wrap_XMLException_getSrcFile},
{"XML::Xercesc::XMLException_getSrcLine", _wrap_XMLException_getSrcLine},
{"XML::Xercesc::XMLException_getErrorType", _wrap_XMLException_getErrorType},
{"XML::Xercesc::XMLException_setPosition", _wrap_XMLException_setPosition},
{"XML::Xercesc::XMLException_reinitMsgMutex", _wrap_XMLException_reinitMsgMutex},
{"XML::Xercesc::XMLException_reinitMsgLoader", _wrap_XMLException_reinitMsgLoader},
{"XML::Xercesc::new_QName", _wrap_new_QName},
{"XML::Xercesc::delete_QName", _wrap_delete_QName},
{"XML::Xercesc::QName_getPrefix", _wrap_QName_getPrefix},
{"XML::Xercesc::QName_getLocalPart", _wrap_QName_getLocalPart},
{"XML::Xercesc::QName_getURI", _wrap_QName_getURI},
{"XML::Xercesc::QName_getRawName", _wrap_QName_getRawName},
{"XML::Xercesc::QName_getMemoryManager", _wrap_QName_getMemoryManager},
{"XML::Xercesc::QName_setName", _wrap_QName_setName},
{"XML::Xercesc::QName_setPrefix", _wrap_QName_setPrefix},
{"XML::Xercesc::QName_setLocalPart", _wrap_QName_setLocalPart},
{"XML::Xercesc::QName_setNPrefix", _wrap_QName_setNPrefix},
{"XML::Xercesc::QName_setNLocalPart", _wrap_QName_setNLocalPart},
{"XML::Xercesc::QName_setURI", _wrap_QName_setURI},
{"XML::Xercesc::QName_setValues", _wrap_QName_setValues},
{"XML::Xercesc::QName___eq__", _wrap_QName___eq__},
{"XML::Xercesc::QName_cleanUp", _wrap_QName_cleanUp},
{"XML::Xercesc::new_SecurityManager", _wrap_new_SecurityManager},
{"XML::Xercesc::delete_SecurityManager", _wrap_delete_SecurityManager},
{"XML::Xercesc::SecurityManager_setEntityExpansionLimit", _wrap_SecurityManager_setEntityExpansionLimit},
{"XML::Xercesc::SecurityManager_getEntityExpansionLimit", _wrap_SecurityManager_getEntityExpansionLimit},
{"XML::Xercesc::delete_XMLElementDecl", _wrap_delete_XMLElementDecl},
{"XML::Xercesc::XMLElementDecl_getAttDefList", _wrap_XMLElementDecl_getAttDefList},
{"XML::Xercesc::XMLElementDecl_getCharDataOpts", _wrap_XMLElementDecl_getCharDataOpts},
{"XML::Xercesc::XMLElementDecl_hasAttDefs", _wrap_XMLElementDecl_hasAttDefs},
{"XML::Xercesc::XMLElementDecl_getContentSpec", _wrap_XMLElementDecl_getContentSpec},
{"XML::Xercesc::XMLElementDecl_setContentSpec", _wrap_XMLElementDecl_setContentSpec},
{"XML::Xercesc::XMLElementDecl_getContentModel", _wrap_XMLElementDecl_getContentModel},
{"XML::Xercesc::XMLElementDecl_setContentModel", _wrap_XMLElementDecl_setContentModel},
{"XML::Xercesc::XMLElementDecl_getFormattedContentModel", _wrap_XMLElementDecl_getFormattedContentModel},
{"XML::Xercesc::XMLElementDecl_getBaseName", _wrap_XMLElementDecl_getBaseName},
{"XML::Xercesc::XMLElementDecl_getURI", _wrap_XMLElementDecl_getURI},
{"XML::Xercesc::XMLElementDecl_getElementName", _wrap_XMLElementDecl_getElementName},
{"XML::Xercesc::XMLElementDecl_getFullName", _wrap_XMLElementDecl_getFullName},
{"XML::Xercesc::XMLElementDecl_getCreateReason", _wrap_XMLElementDecl_getCreateReason},
{"XML::Xercesc::XMLElementDecl_getId", _wrap_XMLElementDecl_getId},
{"XML::Xercesc::XMLElementDecl_isDeclared", _wrap_XMLElementDecl_isDeclared},
{"XML::Xercesc::XMLElementDecl_isExternal", _wrap_XMLElementDecl_isExternal},
{"XML::Xercesc::XMLElementDecl_getMemoryManager", _wrap_XMLElementDecl_getMemoryManager},
{"XML::Xercesc::XMLElementDecl_setElementName", _wrap_XMLElementDecl_setElementName},
{"XML::Xercesc::XMLElementDecl_setCreateReason", _wrap_XMLElementDecl_setCreateReason},
{"XML::Xercesc::XMLElementDecl_setId", _wrap_XMLElementDecl_setId},
{"XML::Xercesc::XMLElementDecl_setExternalElemDeclaration", _wrap_XMLElementDecl_setExternalElemDeclaration},
{"XML::Xercesc::XMLElementDecl_getObjectType", _wrap_XMLElementDecl_getObjectType},
{"XML::Xercesc::XMLElementDecl_storeElementDecl", _wrap_XMLElementDecl_storeElementDecl},
{"XML::Xercesc::XMLElementDecl_loadElementDecl", _wrap_XMLElementDecl_loadElementDecl},
{"XML::Xercesc::delete_XMLEntityDecl", _wrap_delete_XMLEntityDecl},
{"XML::Xercesc::XMLEntityDecl_getDeclaredInIntSubset", _wrap_XMLEntityDecl_getDeclaredInIntSubset},
{"XML::Xercesc::XMLEntityDecl_getIsParameter", _wrap_XMLEntityDecl_getIsParameter},
{"XML::Xercesc::XMLEntityDecl_getIsSpecialChar", _wrap_XMLEntityDecl_getIsSpecialChar},
{"XML::Xercesc::XMLEntityDecl_getId", _wrap_XMLEntityDecl_getId},
{"XML::Xercesc::XMLEntityDecl_getName", _wrap_XMLEntityDecl_getName},
{"XML::Xercesc::XMLEntityDecl_getNotationName", _wrap_XMLEntityDecl_getNotationName},
{"XML::Xercesc::XMLEntityDecl_getPublicId", _wrap_XMLEntityDecl_getPublicId},
{"XML::Xercesc::XMLEntityDecl_getSystemId", _wrap_XMLEntityDecl_getSystemId},
{"XML::Xercesc::XMLEntityDecl_getBaseURI", _wrap_XMLEntityDecl_getBaseURI},
{"XML::Xercesc::XMLEntityDecl_getValue", _wrap_XMLEntityDecl_getValue},
{"XML::Xercesc::XMLEntityDecl_getValueLen", _wrap_XMLEntityDecl_getValueLen},
{"XML::Xercesc::XMLEntityDecl_isExternal", _wrap_XMLEntityDecl_isExternal},
{"XML::Xercesc::XMLEntityDecl_isUnparsed", _wrap_XMLEntityDecl_isUnparsed},
{"XML::Xercesc::XMLEntityDecl_getMemoryManager", _wrap_XMLEntityDecl_getMemoryManager},
{"XML::Xercesc::XMLEntityDecl_setName", _wrap_XMLEntityDecl_setName},
{"XML::Xercesc::XMLEntityDecl_setNotationName", _wrap_XMLEntityDecl_setNotationName},
{"XML::Xercesc::XMLEntityDecl_setPublicId", _wrap_XMLEntityDecl_setPublicId},
{"XML::Xercesc::XMLEntityDecl_setSystemId", _wrap_XMLEntityDecl_setSystemId},
{"XML::Xercesc::XMLEntityDecl_setBaseURI", _wrap_XMLEntityDecl_setBaseURI},
{"XML::Xercesc::XMLEntityDecl_setValue", _wrap_XMLEntityDecl_setValue},
{"XML::Xercesc::XMLEntityDecl_setId", _wrap_XMLEntityDecl_setId},
{"XML::Xercesc::XMLEntityDecl_getKey", _wrap_XMLEntityDecl_getKey},
{"XML::Xercesc::new_XMLNotationDecl", _wrap_new_XMLNotationDecl},
{"XML::Xercesc::delete_XMLNotationDecl", _wrap_delete_XMLNotationDecl},
{"XML::Xercesc::XMLNotationDecl_getId", _wrap_XMLNotationDecl_getId},
{"XML::Xercesc::XMLNotationDecl_getName", _wrap_XMLNotationDecl_getName},
{"XML::Xercesc::XMLNotationDecl_getPublicId", _wrap_XMLNotationDecl_getPublicId},
{"XML::Xercesc::XMLNotationDecl_getSystemId", _wrap_XMLNotationDecl_getSystemId},
{"XML::Xercesc::XMLNotationDecl_getBaseURI", _wrap_XMLNotationDecl_getBaseURI},
{"XML::Xercesc::XMLNotationDecl_getNameSpaceId", _wrap_XMLNotationDecl_getNameSpaceId},
{"XML::Xercesc::XMLNotationDecl_getMemoryManager", _wrap_XMLNotationDecl_getMemoryManager},
{"XML::Xercesc::XMLNotationDecl_setId", _wrap_XMLNotationDecl_setId},
{"XML::Xercesc::XMLNotationDecl_setName", _wrap_XMLNotationDecl_setName},
{"XML::Xercesc::XMLNotationDecl_setPublicId", _wrap_XMLNotationDecl_setPublicId},
{"XML::Xercesc::XMLNotationDecl_setSystemId", _wrap_XMLNotationDecl_setSystemId},
{"XML::Xercesc::XMLNotationDecl_setBaseURI", _wrap_XMLNotationDecl_setBaseURI},
{"XML::Xercesc::XMLNotationDecl_setNameSpaceId", _wrap_XMLNotationDecl_setNameSpaceId},
{"XML::Xercesc::XMLNotationDecl_getKey", _wrap_XMLNotationDecl_getKey},
{"XML::Xercesc::delete_XMLAttDefList", _wrap_delete_XMLAttDefList},
{"XML::Xercesc::XMLAttDefList_isEmpty", _wrap_XMLAttDefList_isEmpty},
{"XML::Xercesc::XMLAttDefList_findAttDef", _wrap_XMLAttDefList_findAttDef},
{"XML::Xercesc::XMLAttDefList_getAttDefCount", _wrap_XMLAttDefList_getAttDefCount},
{"XML::Xercesc::XMLAttDefList_getAttDef", _wrap_XMLAttDefList_getAttDef},
{"XML::Xercesc::XMLAttDefList_getMemoryManager", _wrap_XMLAttDefList_getMemoryManager},
{"XML::Xercesc::XMLAttDef_getAttTypeString", _wrap_XMLAttDef_getAttTypeString},
{"XML::Xercesc::XMLAttDef_getDefAttTypeString", _wrap_XMLAttDef_getDefAttTypeString},
{"XML::Xercesc::delete_XMLAttDef", _wrap_delete_XMLAttDef},
{"XML::Xercesc::XMLAttDef_getFullName", _wrap_XMLAttDef_getFullName},
{"XML::Xercesc::XMLAttDef_reset", _wrap_XMLAttDef_reset},
{"XML::Xercesc::XMLAttDef_getDefaultType", _wrap_XMLAttDef_getDefaultType},
{"XML::Xercesc::XMLAttDef_getEnumeration", _wrap_XMLAttDef_getEnumeration},
{"XML::Xercesc::XMLAttDef_getId", _wrap_XMLAttDef_getId},
{"XML::Xercesc::XMLAttDef_getType", _wrap_XMLAttDef_getType},
{"XML::Xercesc::XMLAttDef_getValue", _wrap_XMLAttDef_getValue},
{"XML::Xercesc::XMLAttDef_getCreateReason", _wrap_XMLAttDef_getCreateReason},
{"XML::Xercesc::XMLAttDef_isExternal", _wrap_XMLAttDef_isExternal},
{"XML::Xercesc::XMLAttDef_getMemoryManager", _wrap_XMLAttDef_getMemoryManager},
{"XML::Xercesc::XMLAttDef_setDefaultType", _wrap_XMLAttDef_setDefaultType},
{"XML::Xercesc::XMLAttDef_setId", _wrap_XMLAttDef_setId},
{"XML::Xercesc::XMLAttDef_setType", _wrap_XMLAttDef_setType},
{"XML::Xercesc::XMLAttDef_setValue", _wrap_XMLAttDef_setValue},
{"XML::Xercesc::XMLAttDef_setEnumeration", _wrap_XMLAttDef_setEnumeration},
{"XML::Xercesc::XMLAttDef_setCreateReason", _wrap_XMLAttDef_setCreateReason},
{"XML::Xercesc::XMLAttDef_setExternalAttDeclaration", _wrap_XMLAttDef_setExternalAttDeclaration},
{"XML::Xercesc::delete_XMLValidator", _wrap_delete_XMLValidator},
{"XML::Xercesc::XMLValidator_requiresNamespaces", _wrap_XMLValidator_requiresNamespaces},
{"XML::Xercesc::XMLValidator_getGrammar", _wrap_XMLValidator_getGrammar},
{"XML::Xercesc::XMLValidator_setGrammar", _wrap_XMLValidator_setGrammar},
{"XML::Xercesc::XMLValidator_handlesDTD", _wrap_XMLValidator_handlesDTD},
{"XML::Xercesc::XMLValidator_handlesSchema", _wrap_XMLValidator_handlesSchema},
{"XML::Xercesc::delete_Grammar", _wrap_delete_Grammar},
{"XML::Xercesc::Grammar_getGrammarType", _wrap_Grammar_getGrammarType},
{"XML::Xercesc::Grammar_getTargetNamespace", _wrap_Grammar_getTargetNamespace},
{"XML::Xercesc::Grammar_getValidated", _wrap_Grammar_getValidated},
{"XML::Xercesc::Grammar_setGrammarDescription", _wrap_Grammar_setGrammarDescription},
{"XML::Xercesc::Grammar_getGrammarDescription", _wrap_Grammar_getGrammarDescription},
{"XML::Xercesc::delete_XMLGrammarDescription", _wrap_delete_XMLGrammarDescription},
{"XML::Xercesc::XMLGrammarDescription_getGrammarType", _wrap_XMLGrammarDescription_getGrammarType},
{"XML::Xercesc::XMLGrammarDescription_getGrammarKey", _wrap_XMLGrammarDescription_getGrammarKey},
{"XML::Xercesc::delete_XMLDTDDescription", _wrap_delete_XMLDTDDescription},
{"XML::Xercesc::XMLDTDDescription_getGrammarType", _wrap_XMLDTDDescription_getGrammarType},
{"XML::Xercesc::XMLDTDDescription_getRootName", _wrap_XMLDTDDescription_getRootName},
{"XML::Xercesc::XMLDTDDescription_getSystemId", _wrap_XMLDTDDescription_getSystemId},
{"XML::Xercesc::XMLDTDDescription_setRootName", _wrap_XMLDTDDescription_setRootName},
{"XML::Xercesc::XMLDTDDescription_setSystemId", _wrap_XMLDTDDescription_setSystemId},
{"XML::Xercesc::new_BaseXMLChVector", _wrap_new_BaseXMLChVector},
{"XML::Xercesc::delete_BaseXMLChVector", _wrap_delete_BaseXMLChVector},
{"XML::Xercesc::BaseXMLChVector_addElement", _wrap_BaseXMLChVector_addElement},
{"XML::Xercesc::BaseXMLChVector_setElementAt", _wrap_BaseXMLChVector_setElementAt},
{"XML::Xercesc::BaseXMLChVector_insertElementAt", _wrap_BaseXMLChVector_insertElementAt},
{"XML::Xercesc::BaseXMLChVector_orphanElementAt", _wrap_BaseXMLChVector_orphanElementAt},
{"XML::Xercesc::BaseXMLChVector_removeAllElements", _wrap_BaseXMLChVector_removeAllElements},
{"XML::Xercesc::BaseXMLChVector_removeElementAt", _wrap_BaseXMLChVector_removeElementAt},
{"XML::Xercesc::BaseXMLChVector_removeLastElement", _wrap_BaseXMLChVector_removeLastElement},
{"XML::Xercesc::BaseXMLChVector_containsElement", _wrap_BaseXMLChVector_containsElement},
{"XML::Xercesc::BaseXMLChVector_cleanup", _wrap_BaseXMLChVector_cleanup},
{"XML::Xercesc::BaseXMLChVector_reinitialize", _wrap_BaseXMLChVector_reinitialize},
{"XML::Xercesc::BaseXMLChVector_curCapacity", _wrap_BaseXMLChVector_curCapacity},
{"XML::Xercesc::BaseXMLChVector_elementAt", _wrap_BaseXMLChVector_elementAt},
{"XML::Xercesc::BaseXMLChVector_size", _wrap_BaseXMLChVector_size},
{"XML::Xercesc::BaseXMLChVector_getMemoryManager", _wrap_BaseXMLChVector_getMemoryManager},
{"XML::Xercesc::BaseXMLChVector_ensureExtraCapacity", _wrap_BaseXMLChVector_ensureExtraCapacity},
{"XML::Xercesc::new_XMLChVector", _wrap_new_XMLChVector},
{"XML::Xercesc::delete_XMLChVector", _wrap_delete_XMLChVector},
{"XML::Xercesc::XMLChVector_setElementAt", _wrap_XMLChVector_setElementAt},
{"XML::Xercesc::XMLChVector_removeAllElements", _wrap_XMLChVector_removeAllElements},
{"XML::Xercesc::XMLChVector_removeElementAt", _wrap_XMLChVector_removeElementAt},
{"XML::Xercesc::XMLChVector_removeLastElement", _wrap_XMLChVector_removeLastElement},
{"XML::Xercesc::XMLChVector_cleanup", _wrap_XMLChVector_cleanup},
{"XML::Xercesc::delete_XMLSchemaDescription", _wrap_delete_XMLSchemaDescription},
{"XML::Xercesc::XMLSchemaDescription_getGrammarType", _wrap_XMLSchemaDescription_getGrammarType},
{"XML::Xercesc::XMLSchemaDescription_getContextType", _wrap_XMLSchemaDescription_getContextType},
{"XML::Xercesc::XMLSchemaDescription_getTargetNamespace", _wrap_XMLSchemaDescription_getTargetNamespace},
{"XML::Xercesc::XMLSchemaDescription_getLocationHints", _wrap_XMLSchemaDescription_getLocationHints},
{"XML::Xercesc::XMLSchemaDescription_getTriggeringComponent", _wrap_XMLSchemaDescription_getTriggeringComponent},
{"XML::Xercesc::XMLSchemaDescription_getEnclosingElementName", _wrap_XMLSchemaDescription_getEnclosingElementName},
{"XML::Xercesc::XMLSchemaDescription_getAttributes", _wrap_XMLSchemaDescription_getAttributes},
{"XML::Xercesc::XMLSchemaDescription_setContextType", _wrap_XMLSchemaDescription_setContextType},
{"XML::Xercesc::XMLSchemaDescription_setTargetNamespace", _wrap_XMLSchemaDescription_setTargetNamespace},
{"XML::Xercesc::XMLSchemaDescription_setLocationHints", _wrap_XMLSchemaDescription_setLocationHints},
{"XML::Xercesc::XMLSchemaDescription_setTriggeringComponent", _wrap_XMLSchemaDescription_setTriggeringComponent},
{"XML::Xercesc::XMLSchemaDescription_setEnclosingElementName", _wrap_XMLSchemaDescription_setEnclosingElementName},
{"XML::Xercesc::XMLSchemaDescription_setAttributes", _wrap_XMLSchemaDescription_setAttributes},
{"XML::Xercesc::delete_DTDElementDecl", _wrap_delete_DTDElementDecl},
{"XML::Xercesc::DTDElementDecl_getAttDefList", _wrap_DTDElementDecl_getAttDefList},
{"XML::Xercesc::DTDElementDecl_getCharDataOpts", _wrap_DTDElementDecl_getCharDataOpts},
{"XML::Xercesc::DTDElementDecl_hasAttDefs", _wrap_DTDElementDecl_hasAttDefs},
{"XML::Xercesc::DTDElementDecl_getContentSpec", _wrap_DTDElementDecl_getContentSpec},
{"XML::Xercesc::DTDElementDecl_setContentSpec", _wrap_DTDElementDecl_setContentSpec},
{"XML::Xercesc::DTDElementDecl_getContentModel", _wrap_DTDElementDecl_getContentModel},
{"XML::Xercesc::DTDElementDecl_setContentModel", _wrap_DTDElementDecl_setContentModel},
{"XML::Xercesc::DTDElementDecl_getFormattedContentModel", _wrap_DTDElementDecl_getFormattedContentModel},
{"XML::Xercesc::DTDElementDecl_getKey", _wrap_DTDElementDecl_getKey},
{"XML::Xercesc::DTDElementDecl_getAttDef", _wrap_DTDElementDecl_getAttDef},
{"XML::Xercesc::DTDElementDecl_getModelType", _wrap_DTDElementDecl_getModelType},
{"XML::Xercesc::DTDElementDecl_addAttDef", _wrap_DTDElementDecl_addAttDef},
{"XML::Xercesc::DTDElementDecl_setModelType", _wrap_DTDElementDecl_setModelType},
{"XML::Xercesc::DTDElementDecl_getObjectType", _wrap_DTDElementDecl_getObjectType},
{"XML::Xercesc::new_DTDElementDeclEnumerator", _wrap_new_DTDElementDeclEnumerator},
{"XML::Xercesc::delete_DTDElementDeclEnumerator", _wrap_delete_DTDElementDeclEnumerator},
{"XML::Xercesc::DTDElementDeclEnumerator_hasMoreElements", _wrap_DTDElementDeclEnumerator_hasMoreElements},
{"XML::Xercesc::DTDElementDeclEnumerator_nextElement", _wrap_DTDElementDeclEnumerator_nextElement},
{"XML::Xercesc::DTDElementDeclEnumerator_Reset", _wrap_DTDElementDeclEnumerator_Reset},
{"XML::Xercesc::DTDElementDeclEnumerator_size", _wrap_DTDElementDeclEnumerator_size},
{"XML::Xercesc::delete_DTDEntityDecl", _wrap_delete_DTDEntityDecl},
{"XML::Xercesc::DTDEntityDecl_getDeclaredInIntSubset", _wrap_DTDEntityDecl_getDeclaredInIntSubset},
{"XML::Xercesc::DTDEntityDecl_getIsParameter", _wrap_DTDEntityDecl_getIsParameter},
{"XML::Xercesc::DTDEntityDecl_getIsSpecialChar", _wrap_DTDEntityDecl_getIsSpecialChar},
{"XML::Xercesc::DTDEntityDecl_setDeclaredInIntSubset", _wrap_DTDEntityDecl_setDeclaredInIntSubset},
{"XML::Xercesc::DTDEntityDecl_setIsParameter", _wrap_DTDEntityDecl_setIsParameter},
{"XML::Xercesc::DTDEntityDecl_setIsSpecialChar", _wrap_DTDEntityDecl_setIsSpecialChar},
{"XML::Xercesc::new_DTDEntityDeclEnumerator", _wrap_new_DTDEntityDeclEnumerator},
{"XML::Xercesc::delete_DTDEntityDeclEnumerator", _wrap_delete_DTDEntityDeclEnumerator},
{"XML::Xercesc::DTDEntityDeclEnumerator_hasMoreElements", _wrap_DTDEntityDeclEnumerator_hasMoreElements},
{"XML::Xercesc::DTDEntityDeclEnumerator_nextElement", _wrap_DTDEntityDeclEnumerator_nextElement},
{"XML::Xercesc::DTDEntityDeclEnumerator_Reset", _wrap_DTDEntityDeclEnumerator_Reset},
{"XML::Xercesc::DTDEntityDeclEnumerator_size", _wrap_DTDEntityDeclEnumerator_size},
{"XML::Xercesc::delete_DTDAttDefList", _wrap_delete_DTDAttDefList},
{"XML::Xercesc::DTDAttDefList_isEmpty", _wrap_DTDAttDefList_isEmpty},
{"XML::Xercesc::DTDAttDefList_findAttDef", _wrap_DTDAttDefList_findAttDef},
{"XML::Xercesc::DTDAttDefList_getAttDefCount", _wrap_DTDAttDefList_getAttDefCount},
{"XML::Xercesc::DTDAttDefList_getAttDef", _wrap_DTDAttDefList_getAttDef},
{"XML::Xercesc::delete_DTDAttDef", _wrap_delete_DTDAttDef},
{"XML::Xercesc::DTDAttDef_getFullName", _wrap_DTDAttDef_getFullName},
{"XML::Xercesc::DTDAttDef_reset", _wrap_DTDAttDef_reset},
{"XML::Xercesc::DTDAttDef_getElemId", _wrap_DTDAttDef_getElemId},
{"XML::Xercesc::DTDAttDef_setElemId", _wrap_DTDAttDef_setElemId},
{"XML::Xercesc::DTDAttDef_setName", _wrap_DTDAttDef_setName},
{"XML::Xercesc::new_DTDGrammar", _wrap_new_DTDGrammar},
{"XML::Xercesc::delete_DTDGrammar", _wrap_delete_DTDGrammar},
{"XML::Xercesc::DTDGrammar_getGrammarType", _wrap_DTDGrammar_getGrammarType},
{"XML::Xercesc::DTDGrammar_getTargetNamespace", _wrap_DTDGrammar_getTargetNamespace},
{"XML::Xercesc::DTDGrammar_getValidated", _wrap_DTDGrammar_getValidated},
{"XML::Xercesc::DTDGrammar_getEntityDecl", _wrap_DTDGrammar_getEntityDecl},
{"XML::Xercesc::DTDGrammar_getEntityDeclPool", _wrap_DTDGrammar_getEntityDeclPool},
{"XML::Xercesc::DTDGrammar_getElemEnumerator", _wrap_DTDGrammar_getElemEnumerator},
{"XML::Xercesc::DTDGrammar_getEntityEnumerator", _wrap_DTDGrammar_getEntityEnumerator},
{"XML::Xercesc::DTDGrammar_getNotationEnumerator", _wrap_DTDGrammar_getNotationEnumerator},
{"XML::Xercesc::DTDGrammar_setGrammarDescription", _wrap_DTDGrammar_setGrammarDescription},
{"XML::Xercesc::DTDGrammar_getGrammarDescription", _wrap_DTDGrammar_getGrammarDescription},
{"XML::Xercesc::DTDGrammar_putEntityDecl", _wrap_DTDGrammar_putEntityDecl},
{"XML::Xercesc::DTDGrammar_reinitDfltEntities", _wrap_DTDGrammar_reinitDfltEntities},
{"XML::Xercesc::new_DTDValidator", _wrap_new_DTDValidator},
{"XML::Xercesc::delete_DTDValidator", _wrap_delete_DTDValidator},
{"XML::Xercesc::DTDValidator_requiresNamespaces", _wrap_DTDValidator_requiresNamespaces},
{"XML::Xercesc::DTDValidator_getGrammar", _wrap_DTDValidator_getGrammar},
{"XML::Xercesc::DTDValidator_setGrammar", _wrap_DTDValidator_setGrammar},
{"XML::Xercesc::DTDValidator_handlesDTD", _wrap_DTDValidator_handlesDTD},
{"XML::Xercesc::DTDValidator_handlesSchema", _wrap_DTDValidator_handlesSchema},
{"XML::Xercesc::delete_SchemaElementDecl", _wrap_delete_SchemaElementDecl},
{"XML::Xercesc::SchemaElementDecl_getAttDefList", _wrap_SchemaElementDecl_getAttDefList},
{"XML::Xercesc::SchemaElementDecl_getCharDataOpts", _wrap_SchemaElementDecl_getCharDataOpts},
{"XML::Xercesc::SchemaElementDecl_hasAttDefs", _wrap_SchemaElementDecl_hasAttDefs},
{"XML::Xercesc::SchemaElementDecl_getContentSpec", _wrap_SchemaElementDecl_getContentSpec},
{"XML::Xercesc::SchemaElementDecl_setContentSpec", _wrap_SchemaElementDecl_setContentSpec},
{"XML::Xercesc::SchemaElementDecl_getContentModel", _wrap_SchemaElementDecl_getContentModel},
{"XML::Xercesc::SchemaElementDecl_setContentModel", _wrap_SchemaElementDecl_setContentModel},
{"XML::Xercesc::SchemaElementDecl_getFormattedContentModel", _wrap_SchemaElementDecl_getFormattedContentModel},
{"XML::Xercesc::SchemaElementDecl_getAttDef", _wrap_SchemaElementDecl_getAttDef},
{"XML::Xercesc::SchemaElementDecl_getAttWildCard", _wrap_SchemaElementDecl_getAttWildCard},
{"XML::Xercesc::SchemaElementDecl_getModelType", _wrap_SchemaElementDecl_getModelType},
{"XML::Xercesc::SchemaElementDecl_getPSVIScope", _wrap_SchemaElementDecl_getPSVIScope},
{"XML::Xercesc::SchemaElementDecl_getDatatypeValidator", _wrap_SchemaElementDecl_getDatatypeValidator},
{"XML::Xercesc::SchemaElementDecl_getEnclosingScope", _wrap_SchemaElementDecl_getEnclosingScope},
{"XML::Xercesc::SchemaElementDecl_getFinalSet", _wrap_SchemaElementDecl_getFinalSet},
{"XML::Xercesc::SchemaElementDecl_getBlockSet", _wrap_SchemaElementDecl_getBlockSet},
{"XML::Xercesc::SchemaElementDecl_getMiscFlags", _wrap_SchemaElementDecl_getMiscFlags},
{"XML::Xercesc::SchemaElementDecl_getDefaultValue", _wrap_SchemaElementDecl_getDefaultValue},
{"XML::Xercesc::SchemaElementDecl_getComplexTypeInfo", _wrap_SchemaElementDecl_getComplexTypeInfo},
{"XML::Xercesc::SchemaElementDecl_isGlobalDecl", _wrap_SchemaElementDecl_isGlobalDecl},
{"XML::Xercesc::SchemaElementDecl_getSubstitutionGroupElem", _wrap_SchemaElementDecl_getSubstitutionGroupElem},
{"XML::Xercesc::SchemaElementDecl_setModelType", _wrap_SchemaElementDecl_setModelType},
{"XML::Xercesc::SchemaElementDecl_setPSVIScope", _wrap_SchemaElementDecl_setPSVIScope},
{"XML::Xercesc::SchemaElementDecl_setDatatypeValidator", _wrap_SchemaElementDecl_setDatatypeValidator},
{"XML::Xercesc::SchemaElementDecl_setEnclosingScope", _wrap_SchemaElementDecl_setEnclosingScope},
{"XML::Xercesc::SchemaElementDecl_setFinalSet", _wrap_SchemaElementDecl_setFinalSet},
{"XML::Xercesc::SchemaElementDecl_setBlockSet", _wrap_SchemaElementDecl_setBlockSet},
{"XML::Xercesc::SchemaElementDecl_setMiscFlags", _wrap_SchemaElementDecl_setMiscFlags},
{"XML::Xercesc::SchemaElementDecl_setDefaultValue", _wrap_SchemaElementDecl_setDefaultValue},
{"XML::Xercesc::SchemaElementDecl_setComplexTypeInfo", _wrap_SchemaElementDecl_setComplexTypeInfo},
{"XML::Xercesc::SchemaElementDecl_setAttWildCard", _wrap_SchemaElementDecl_setAttWildCard},
{"XML::Xercesc::SchemaElementDecl_setSubstitutionGroupElem", _wrap_SchemaElementDecl_setSubstitutionGroupElem},
{"XML::Xercesc::SchemaElementDecl_addIdentityConstraint", _wrap_SchemaElementDecl_addIdentityConstraint},
{"XML::Xercesc::SchemaElementDecl_getIdentityConstraintCount", _wrap_SchemaElementDecl_getIdentityConstraintCount},
{"XML::Xercesc::SchemaElementDecl_getIdentityConstraintAt", _wrap_SchemaElementDecl_getIdentityConstraintAt},
{"XML::Xercesc::SchemaElementDecl_getObjectType", _wrap_SchemaElementDecl_getObjectType},
{"XML::Xercesc::delete_SchemaElementDeclEnumerator", _wrap_delete_SchemaElementDeclEnumerator},
{"XML::Xercesc::new_SchemaElementDeclEnumerator", _wrap_new_SchemaElementDeclEnumerator},
{"XML::Xercesc::SchemaElementDeclEnumerator_hasMoreElements", _wrap_SchemaElementDeclEnumerator_hasMoreElements},
{"XML::Xercesc::SchemaElementDeclEnumerator_nextElement", _wrap_SchemaElementDeclEnumerator_nextElement},
{"XML::Xercesc::SchemaElementDeclEnumerator_Reset", _wrap_SchemaElementDeclEnumerator_Reset},
{"XML::Xercesc::SchemaElementDeclEnumerator_size", _wrap_SchemaElementDeclEnumerator_size},
{"XML::Xercesc::SchemaElementDeclEnumerator_resetKey", _wrap_SchemaElementDeclEnumerator_resetKey},
{"XML::Xercesc::SchemaElementDeclEnumerator_nextElementKey", _wrap_SchemaElementDeclEnumerator_nextElementKey},
{"XML::Xercesc::SchemaElementDeclEnumerator_hasMoreKeys", _wrap_SchemaElementDeclEnumerator_hasMoreKeys},
{"XML::Xercesc::new_SchemaGrammar", _wrap_new_SchemaGrammar},
{"XML::Xercesc::delete_SchemaGrammar", _wrap_delete_SchemaGrammar},
{"XML::Xercesc::SchemaGrammar_getGrammarType", _wrap_SchemaGrammar_getGrammarType},
{"XML::Xercesc::SchemaGrammar_getTargetNamespace", _wrap_SchemaGrammar_getTargetNamespace},
{"XML::Xercesc::SchemaGrammar_getValidated", _wrap_SchemaGrammar_getValidated},
{"XML::Xercesc::SchemaGrammar_getElemEnumerator", _wrap_SchemaGrammar_getElemEnumerator},
{"XML::Xercesc::SchemaGrammar_getNotationEnumerator", _wrap_SchemaGrammar_getNotationEnumerator},
{"XML::Xercesc::SchemaGrammar_getAttributeDeclRegistry", _wrap_SchemaGrammar_getAttributeDeclRegistry},
{"XML::Xercesc::SchemaGrammar_getComplexTypeRegistry", _wrap_SchemaGrammar_getComplexTypeRegistry},
{"XML::Xercesc::SchemaGrammar_getGroupInfoRegistry", _wrap_SchemaGrammar_getGroupInfoRegistry},
{"XML::Xercesc::SchemaGrammar_getAttGroupInfoRegistry", _wrap_SchemaGrammar_getAttGroupInfoRegistry},
{"XML::Xercesc::SchemaGrammar_getDatatypeRegistry", _wrap_SchemaGrammar_getDatatypeRegistry},
{"XML::Xercesc::SchemaGrammar_getNamespaceScope", _wrap_SchemaGrammar_getNamespaceScope},
{"XML::Xercesc::SchemaGrammar_getValidSubstitutionGroups", _wrap_SchemaGrammar_getValidSubstitutionGroups},
{"XML::Xercesc::SchemaGrammar_getValidationContext", _wrap_SchemaGrammar_getValidationContext},
{"XML::Xercesc::SchemaGrammar_setTargetNamespace", _wrap_SchemaGrammar_setTargetNamespace},
{"XML::Xercesc::SchemaGrammar_setAttributeDeclRegistry", _wrap_SchemaGrammar_setAttributeDeclRegistry},
{"XML::Xercesc::SchemaGrammar_setComplexTypeRegistry", _wrap_SchemaGrammar_setComplexTypeRegistry},
{"XML::Xercesc::SchemaGrammar_setGroupInfoRegistry", _wrap_SchemaGrammar_setGroupInfoRegistry},
{"XML::Xercesc::SchemaGrammar_setAttGroupInfoRegistry", _wrap_SchemaGrammar_setAttGroupInfoRegistry},
{"XML::Xercesc::SchemaGrammar_setNamespaceScope", _wrap_SchemaGrammar_setNamespaceScope},
{"XML::Xercesc::SchemaGrammar_setValidSubstitutionGroups", _wrap_SchemaGrammar_setValidSubstitutionGroups},
{"XML::Xercesc::SchemaGrammar_setGrammarDescription", _wrap_SchemaGrammar_setGrammarDescription},
{"XML::Xercesc::SchemaGrammar_getGrammarDescription", _wrap_SchemaGrammar_getGrammarDescription},
{"XML::Xercesc::SchemaGrammar_putGroupElemDecl", _wrap_SchemaGrammar_putGroupElemDecl},
{"XML::Xercesc::SchemaGrammar_putAnnotation", _wrap_SchemaGrammar_putAnnotation},
{"XML::Xercesc::SchemaGrammar_addAnnotation", _wrap_SchemaGrammar_addAnnotation},
{"XML::Xercesc::SchemaGrammar_getAnnotation", _wrap_SchemaGrammar_getAnnotation},
{"XML::Xercesc::SchemaGrammar_getAnnotations", _wrap_SchemaGrammar_getAnnotations},
{"XML::Xercesc::new_SchemaValidator", _wrap_new_SchemaValidator},
{"XML::Xercesc::delete_SchemaValidator", _wrap_delete_SchemaValidator},
{"XML::Xercesc::SchemaValidator_requiresNamespaces", _wrap_SchemaValidator_requiresNamespaces},
{"XML::Xercesc::SchemaValidator_getGrammar", _wrap_SchemaValidator_getGrammar},
{"XML::Xercesc::SchemaValidator_setGrammar", _wrap_SchemaValidator_setGrammar},
{"XML::Xercesc::SchemaValidator_handlesDTD", _wrap_SchemaValidator_handlesDTD},
{"XML::Xercesc::SchemaValidator_handlesSchema", _wrap_SchemaValidator_handlesSchema},
{"XML::Xercesc::SchemaValidator_normalizeWhiteSpace", _wrap_SchemaValidator_normalizeWhiteSpace},
{"XML::Xercesc::SchemaValidator_setGrammarResolver", _wrap_SchemaValidator_setGrammarResolver},
{"XML::Xercesc::SchemaValidator_setXsiType", _wrap_SchemaValidator_setXsiType},
{"XML::Xercesc::SchemaValidator_setNillable", _wrap_SchemaValidator_setNillable},
{"XML::Xercesc::SchemaValidator_setExitOnFirstFatal", _wrap_SchemaValidator_setExitOnFirstFatal},
{"XML::Xercesc::SchemaValidator_setDatatypeBuffer", _wrap_SchemaValidator_setDatatypeBuffer},
{"XML::Xercesc::SchemaValidator_clearDatatypeBuffer", _wrap_SchemaValidator_clearDatatypeBuffer},
{"XML::Xercesc::SchemaValidator_getCurrentTypeInfo", _wrap_SchemaValidator_getCurrentTypeInfo},
{"XML::Xercesc::SchemaValidator_getCurrentDatatypeValidator", _wrap_SchemaValidator_getCurrentDatatypeValidator},
{"XML::Xercesc::SchemaValidator_getMostRecentAttrValidator", _wrap_SchemaValidator_getMostRecentAttrValidator},
{"XML::Xercesc::SchemaValidator_getErrorOccurred", _wrap_SchemaValidator_getErrorOccurred},
{"XML::Xercesc::SchemaValidator_getIsElemSpecified", _wrap_SchemaValidator_getIsElemSpecified},
{"XML::Xercesc::SchemaValidator_getNormalizedValue", _wrap_SchemaValidator_getNormalizedValue},
{"XML::Xercesc::delete_SchemaAttDefList", _wrap_delete_SchemaAttDefList},
{"XML::Xercesc::SchemaAttDefList_isEmpty", _wrap_SchemaAttDefList_isEmpty},
{"XML::Xercesc::SchemaAttDefList_findAttDef", _wrap_SchemaAttDefList_findAttDef},
{"XML::Xercesc::SchemaAttDefList_findAttDefLocalPart", _wrap_SchemaAttDefList_findAttDefLocalPart},
{"XML::Xercesc::SchemaAttDefList_getAttDefCount", _wrap_SchemaAttDefList_getAttDefCount},
{"XML::Xercesc::SchemaAttDefList_getAttDef", _wrap_SchemaAttDefList_getAttDef},
{"XML::Xercesc::delete_SchemaAttDef", _wrap_delete_SchemaAttDef},
{"XML::Xercesc::SchemaAttDef_getFullName", _wrap_SchemaAttDef_getFullName},
{"XML::Xercesc::SchemaAttDef_reset", _wrap_SchemaAttDef_reset},
{"XML::Xercesc::SchemaAttDef_getElemId", _wrap_SchemaAttDef_getElemId},
{"XML::Xercesc::SchemaAttDef_getAttName", _wrap_SchemaAttDef_getAttName},
{"XML::Xercesc::SchemaAttDef_getDatatypeValidator", _wrap_SchemaAttDef_getDatatypeValidator},
{"XML::Xercesc::SchemaAttDef_getNamespaceList", _wrap_SchemaAttDef_getNamespaceList},
{"XML::Xercesc::SchemaAttDef_getBaseAttDecl", _wrap_SchemaAttDef_getBaseAttDecl},
{"XML::Xercesc::SchemaAttDef_getPSVIScope", _wrap_SchemaAttDef_getPSVIScope},
{"XML::Xercesc::SchemaAttDef_setElemId", _wrap_SchemaAttDef_setElemId},
{"XML::Xercesc::SchemaAttDef_setAttName", _wrap_SchemaAttDef_setAttName},
{"XML::Xercesc::SchemaAttDef_setDatatypeValidator", _wrap_SchemaAttDef_setDatatypeValidator},
{"XML::Xercesc::SchemaAttDef_setBaseAttDecl", _wrap_SchemaAttDef_setBaseAttDecl},
{"XML::Xercesc::SchemaAttDef_setPSVIScope", _wrap_SchemaAttDef_setPSVIScope},
{"XML::Xercesc::SchemaAttDef_setNamespaceList", _wrap_SchemaAttDef_setNamespaceList},
{"XML::Xercesc::SchemaAttDef_resetNamespaceList", _wrap_SchemaAttDef_resetNamespaceList},
{"XML::Xercesc::SchemaAttDef_setEnclosingCT", _wrap_SchemaAttDef_setEnclosingCT},
{"XML::Xercesc::delete_SAXException", _wrap_delete_SAXException},
{"XML::Xercesc::SAXException_getMessage", _wrap_SAXException_getMessage},
{"XML::Xercesc::new_SAXNotSupportedException", _wrap_new_SAXNotSupportedException},
{"XML::Xercesc::delete_SAXNotSupportedException", _wrap_delete_SAXNotSupportedException},
{"XML::Xercesc::new_SAXNotRecognizedException", _wrap_new_SAXNotRecognizedException},
{"XML::Xercesc::delete_SAXNotRecognizedException", _wrap_delete_SAXNotRecognizedException},
{"XML::Xercesc::delete_SAXParseException", _wrap_delete_SAXParseException},
{"XML::Xercesc::SAXParseException_getColumnNumber", _wrap_SAXParseException_getColumnNumber},
{"XML::Xercesc::SAXParseException_getLineNumber", _wrap_SAXParseException_getLineNumber},
{"XML::Xercesc::SAXParseException_getPublicId", _wrap_SAXParseException_getPublicId},
{"XML::Xercesc::SAXParseException_getSystemId", _wrap_SAXParseException_getSystemId},
{"XML::Xercesc::new_XMLPScanToken", _wrap_new_XMLPScanToken},
{"XML::Xercesc::delete_XMLPScanToken", _wrap_delete_XMLPScanToken},
{"XML::Xercesc::new_BaseXMLAttrVector", _wrap_new_BaseXMLAttrVector},
{"XML::Xercesc::delete_BaseXMLAttrVector", _wrap_delete_BaseXMLAttrVector},
{"XML::Xercesc::BaseXMLAttrVector_addElement", _wrap_BaseXMLAttrVector_addElement},
{"XML::Xercesc::BaseXMLAttrVector_setElementAt", _wrap_BaseXMLAttrVector_setElementAt},
{"XML::Xercesc::BaseXMLAttrVector_insertElementAt", _wrap_BaseXMLAttrVector_insertElementAt},
{"XML::Xercesc::BaseXMLAttrVector_orphanElementAt", _wrap_BaseXMLAttrVector_orphanElementAt},
{"XML::Xercesc::BaseXMLAttrVector_removeAllElements", _wrap_BaseXMLAttrVector_removeAllElements},
{"XML::Xercesc::BaseXMLAttrVector_removeElementAt", _wrap_BaseXMLAttrVector_removeElementAt},
{"XML::Xercesc::BaseXMLAttrVector_removeLastElement", _wrap_BaseXMLAttrVector_removeLastElement},
{"XML::Xercesc::BaseXMLAttrVector_containsElement", _wrap_BaseXMLAttrVector_containsElement},
{"XML::Xercesc::BaseXMLAttrVector_cleanup", _wrap_BaseXMLAttrVector_cleanup},
{"XML::Xercesc::BaseXMLAttrVector_reinitialize", _wrap_BaseXMLAttrVector_reinitialize},
{"XML::Xercesc::BaseXMLAttrVector_curCapacity", _wrap_BaseXMLAttrVector_curCapacity},
{"XML::Xercesc::BaseXMLAttrVector_elementAt", _wrap_BaseXMLAttrVector_elementAt},
{"XML::Xercesc::BaseXMLAttrVector_size", _wrap_BaseXMLAttrVector_size},
{"XML::Xercesc::BaseXMLAttrVector_getMemoryManager", _wrap_BaseXMLAttrVector_getMemoryManager},
{"XML::Xercesc::BaseXMLAttrVector_ensureExtraCapacity", _wrap_BaseXMLAttrVector_ensureExtraCapacity},
{"XML::Xercesc::new_XMLAttrVector", _wrap_new_XMLAttrVector},
{"XML::Xercesc::delete_XMLAttrVector", _wrap_delete_XMLAttrVector},
{"XML::Xercesc::new_XMLAttr", _wrap_new_XMLAttr},
{"XML::Xercesc::delete_XMLAttr", _wrap_delete_XMLAttr},
{"XML::Xercesc::XMLAttr_getAttName", _wrap_XMLAttr_getAttName},
{"XML::Xercesc::XMLAttr_getName", _wrap_XMLAttr_getName},
{"XML::Xercesc::XMLAttr_getQName", _wrap_XMLAttr_getQName},
{"XML::Xercesc::XMLAttr_getSpecified", _wrap_XMLAttr_getSpecified},
{"XML::Xercesc::XMLAttr_getType", _wrap_XMLAttr_getType},
{"XML::Xercesc::XMLAttr_getValue", _wrap_XMLAttr_getValue},
{"XML::Xercesc::XMLAttr_getURIId", _wrap_XMLAttr_getURIId},
{"XML::Xercesc::XMLAttr_set", _wrap_XMLAttr_set},
{"XML::Xercesc::XMLAttr_setName", _wrap_XMLAttr_setName},
{"XML::Xercesc::XMLAttr_setSpecified", _wrap_XMLAttr_setSpecified},
{"XML::Xercesc::XMLAttr_setType", _wrap_XMLAttr_setType},
{"XML::Xercesc::XMLAttr_setValue", _wrap_XMLAttr_setValue},
{"XML::Xercesc::XMLAttr_setURIId", _wrap_XMLAttr_setURIId},
{"XML::Xercesc::delete_XMLDocumentHandler", _wrap_delete_XMLDocumentHandler},
{"XML::Xercesc::XMLDocumentHandler_docCharacters", _wrap_XMLDocumentHandler_docCharacters},
{"XML::Xercesc::XMLDocumentHandler_docComment", _wrap_XMLDocumentHandler_docComment},
{"XML::Xercesc::XMLDocumentHandler_docPI", _wrap_XMLDocumentHandler_docPI},
{"XML::Xercesc::XMLDocumentHandler_endDocument", _wrap_XMLDocumentHandler_endDocument},
{"XML::Xercesc::XMLDocumentHandler_endElement", _wrap_XMLDocumentHandler_endElement},
{"XML::Xercesc::XMLDocumentHandler_endEntityReference", _wrap_XMLDocumentHandler_endEntityReference},
{"XML::Xercesc::XMLDocumentHandler_ignorableWhitespace", _wrap_XMLDocumentHandler_ignorableWhitespace},
{"XML::Xercesc::XMLDocumentHandler_resetDocument", _wrap_XMLDocumentHandler_resetDocument},
{"XML::Xercesc::XMLDocumentHandler_startDocument", _wrap_XMLDocumentHandler_startDocument},
{"XML::Xercesc::XMLDocumentHandler_startElement", _wrap_XMLDocumentHandler_startElement},
{"XML::Xercesc::XMLDocumentHandler_startEntityReference", _wrap_XMLDocumentHandler_startEntityReference},
{"XML::Xercesc::XMLDocumentHandler_XMLDecl", _wrap_XMLDocumentHandler_XMLDecl},
{"XML::Xercesc::delete_EntityResolver", _wrap_delete_EntityResolver},
{"XML::Xercesc::new_XMLResourceIdentifier", _wrap_new_XMLResourceIdentifier},
{"XML::Xercesc::delete_XMLResourceIdentifier", _wrap_delete_XMLResourceIdentifier},
{"XML::Xercesc::XMLResourceIdentifier_getResourceIdentifierType", _wrap_XMLResourceIdentifier_getResourceIdentifierType},
{"XML::Xercesc::XMLResourceIdentifier_getPublicId", _wrap_XMLResourceIdentifier_getPublicId},
{"XML::Xercesc::XMLResourceIdentifier_getSystemId", _wrap_XMLResourceIdentifier_getSystemId},
{"XML::Xercesc::XMLResourceIdentifier_getSchemaLocation", _wrap_XMLResourceIdentifier_getSchemaLocation},
{"XML::Xercesc::XMLResourceIdentifier_getBaseURI", _wrap_XMLResourceIdentifier_getBaseURI},
{"XML::Xercesc::XMLResourceIdentifier_getNameSpace", _wrap_XMLResourceIdentifier_getNameSpace},
{"XML::Xercesc::XMLResourceIdentifier_getLocator", _wrap_XMLResourceIdentifier_getLocator},
{"XML::Xercesc::delete_XMLEntityResolver", _wrap_delete_XMLEntityResolver},
{"XML::Xercesc::delete_PSVIItem", _wrap_delete_PSVIItem},
{"XML::Xercesc::PSVIItem_getValidationContext", _wrap_PSVIItem_getValidationContext},
{"XML::Xercesc::PSVIItem_getValidity", _wrap_PSVIItem_getValidity},
{"XML::Xercesc::PSVIItem_getValidationAttempted", _wrap_PSVIItem_getValidationAttempted},
{"XML::Xercesc::PSVIItem_getSchemaNormalizedValue", _wrap_PSVIItem_getSchemaNormalizedValue},
{"XML::Xercesc::PSVIItem_getTypeDefinition", _wrap_PSVIItem_getTypeDefinition},
{"XML::Xercesc::PSVIItem_getMemberTypeDefinition", _wrap_PSVIItem_getMemberTypeDefinition},
{"XML::Xercesc::PSVIItem_getSchemaDefault", _wrap_PSVIItem_getSchemaDefault},
{"XML::Xercesc::PSVIItem_getIsSchemaSpecified", _wrap_PSVIItem_getIsSchemaSpecified},
{"XML::Xercesc::PSVIItem_getCanonicalRepresentation", _wrap_PSVIItem_getCanonicalRepresentation},
{"XML::Xercesc::PSVIItem_getActualValue", _wrap_PSVIItem_getActualValue},
{"XML::Xercesc::PSVIItem_setValidationAttempted", _wrap_PSVIItem_setValidationAttempted},
{"XML::Xercesc::PSVIItem_setValidity", _wrap_PSVIItem_setValidity},
{"XML::Xercesc::PSVIItem_reset", _wrap_PSVIItem_reset},
{"XML::Xercesc::new_PSVIElement", _wrap_new_PSVIElement},
{"XML::Xercesc::delete_PSVIElement", _wrap_delete_PSVIElement},
{"XML::Xercesc::PSVIElement_getElementDeclaration", _wrap_PSVIElement_getElementDeclaration},
{"XML::Xercesc::PSVIElement_getNotationDeclaration", _wrap_PSVIElement_getNotationDeclaration},
{"XML::Xercesc::PSVIElement_getSchemaInformation", _wrap_PSVIElement_getSchemaInformation},
{"XML::Xercesc::PSVIElement_getTypeDefinition", _wrap_PSVIElement_getTypeDefinition},
{"XML::Xercesc::PSVIElement_getMemberTypeDefinition", _wrap_PSVIElement_getMemberTypeDefinition},
{"XML::Xercesc::PSVIElement_reset", _wrap_PSVIElement_reset},
{"XML::Xercesc::new_PSVIAttribute", _wrap_new_PSVIAttribute},
{"XML::Xercesc::delete_PSVIAttribute", _wrap_delete_PSVIAttribute},
{"XML::Xercesc::PSVIAttribute_getAttributeDeclaration", _wrap_PSVIAttribute_getAttributeDeclaration},
{"XML::Xercesc::PSVIAttribute_getTypeDefinition", _wrap_PSVIAttribute_getTypeDefinition},
{"XML::Xercesc::PSVIAttribute_getMemberTypeDefinition", _wrap_PSVIAttribute_getMemberTypeDefinition},
{"XML::Xercesc::PSVIAttribute_reset", _wrap_PSVIAttribute_reset},
{"XML::Xercesc::PSVIAttribute_setValue", _wrap_PSVIAttribute_setValue},
{"XML::Xercesc::PSVIAttribute_updateValidity", _wrap_PSVIAttribute_updateValidity},
{"XML::Xercesc::new_PSVIAttributeList", _wrap_new_PSVIAttributeList},
{"XML::Xercesc::delete_PSVIAttributeList", _wrap_delete_PSVIAttributeList},
{"XML::Xercesc::PSVIAttributeList_getLength", _wrap_PSVIAttributeList_getLength},
{"XML::Xercesc::PSVIAttributeList_getAttributePSVIAtIndex", _wrap_PSVIAttributeList_getAttributePSVIAtIndex},
{"XML::Xercesc::PSVIAttributeList_getAttributeNameAtIndex", _wrap_PSVIAttributeList_getAttributeNameAtIndex},
{"XML::Xercesc::PSVIAttributeList_getAttributeNamespaceAtIndex", _wrap_PSVIAttributeList_getAttributeNamespaceAtIndex},
{"XML::Xercesc::PSVIAttributeList_getAttributePSVIByName", _wrap_PSVIAttributeList_getAttributePSVIByName},
{"XML::Xercesc::PSVIAttributeList_getPSVIAttributeToFill", _wrap_PSVIAttributeList_getPSVIAttributeToFill},
{"XML::Xercesc::PSVIAttributeList_reset", _wrap_PSVIAttributeList_reset},
{"XML::Xercesc::delete_PSVIHandler", _wrap_delete_PSVIHandler},
{"XML::Xercesc::PSVIHandler_handleElementPSVI", _wrap_PSVIHandler_handleElementPSVI},
{"XML::Xercesc::PSVIHandler_handlePartialElementPSVI", _wrap_PSVIHandler_handlePartialElementPSVI},
{"XML::Xercesc::PSVIHandler_handleAttributesPSVI", _wrap_PSVIHandler_handleAttributesPSVI},
{"XML::Xercesc::delete_ErrorHandler", _wrap_delete_ErrorHandler},
{"XML::Xercesc::ErrorHandler_warning", _wrap_ErrorHandler_warning},
{"XML::Xercesc::ErrorHandler_error", _wrap_ErrorHandler_error},
{"XML::Xercesc::ErrorHandler_fatalError", _wrap_ErrorHandler_fatalError},
{"XML::Xercesc::ErrorHandler_resetErrors", _wrap_ErrorHandler_resetErrors},
{"XML::Xercesc::new_PerlCallbackHandler", _wrap_new_PerlCallbackHandler},
{"XML::Xercesc::delete_PerlCallbackHandler", _wrap_delete_PerlCallbackHandler},
{"XML::Xercesc::PerlCallbackHandler_type", _wrap_PerlCallbackHandler_type},
{"XML::Xercesc::PerlCallbackHandler_set_callback_obj", _wrap_PerlCallbackHandler_set_callback_obj},
{"XML::Xercesc::new_PerlErrorCallbackHandler", _wrap_new_PerlErrorCallbackHandler},
{"XML::Xercesc::delete_PerlErrorCallbackHandler", _wrap_delete_PerlErrorCallbackHandler},
{"XML::Xercesc::PerlErrorCallbackHandler_type", _wrap_PerlErrorCallbackHandler_type},
{"XML::Xercesc::PerlErrorCallbackHandler_warning", _wrap_PerlErrorCallbackHandler_warning},
{"XML::Xercesc::PerlErrorCallbackHandler_error", _wrap_PerlErrorCallbackHandler_error},
{"XML::Xercesc::PerlErrorCallbackHandler_fatalError", _wrap_PerlErrorCallbackHandler_fatalError},
{"XML::Xercesc::PerlErrorCallbackHandler_resetErrors", _wrap_PerlErrorCallbackHandler_resetErrors},
{"XML::Xercesc::new_PerlEntityResolverHandler", _wrap_new_PerlEntityResolverHandler},
{"XML::Xercesc::delete_PerlEntityResolverHandler", _wrap_delete_PerlEntityResolverHandler},
{"XML::Xercesc::PerlEntityResolverHandler_type", _wrap_PerlEntityResolverHandler_type},
{0,0}
};
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head;
  static int init_run = 0;
  
  clientdata = clientdata;
  
  if (init_run) return;
  init_run = 1;
  
  /* Initialize the swig_module */
  swig_module.type_initial = swig_type_initial;
  swig_module.cast_initial = swig_cast_initial;
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (module_head) {
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  } else {
    /* This is the first module loaded */
    swig_module.next = &swig_module;
    SWIG_SetModule(clientdata, &swig_module);
  }
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C"
#endif

XS(SWIG_init) {
  dXSARGS;
  int i;
  
  SWIG_InitializeModule(0);
  
  /* Install commands */
  for (i = 0; swig_commands[i].name; i++) {
    newXS((char*) swig_commands[i].name,swig_commands[i].wrapper, (char*)__FILE__);
  }
  
  /* Install variables */
  for (i = 0; swig_variables[i].name; i++) {
    SV *sv;
    sv = get_sv((char*) swig_variables[i].name, TRUE | 0x2);
    if (swig_variables[i].type) {
      SWIG_MakePtr(sv,(void *)1, *swig_variables[i].type,0);
    } else {
      sv_setiv(sv,(IV) 0);
    }
    swig_create_magic(sv, (char *) swig_variables[i].name, swig_variables[i].set, swig_variables[i].get); 
  }
  
  /* Install constant */
  for (i = 0; swig_constants[i].type; i++) {
    SV *sv;
    sv = get_sv((char*)swig_constants[i].name, TRUE | 0x2);
    switch(swig_constants[i].type) {
    case SWIG_INT:
      sv_setiv(sv, (IV) swig_constants[i].lvalue);
      break;
    case SWIG_FLOAT:
      sv_setnv(sv, (double) swig_constants[i].dvalue);
      break;
    case SWIG_STRING:
      sv_setpv(sv, (char *) swig_constants[i].pvalue);
      break;
    case SWIG_POINTER:
      SWIG_MakePtr(sv, swig_constants[i].pvalue, *(swig_constants[i].ptype),0);
      break;
    case SWIG_BINARY:
      SWIG_MakePackedObj(sv, swig_constants[i].pvalue, swig_constants[i].lvalue, *(swig_constants[i].ptype));
      break;
    default:
      break;
    }
    SvREADONLY_on(sv);
  }
  
  
  SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar->dcast = (swig_dycast_func) Grammar_dynamic_cast;
  
  
  SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription->dcast = (swig_dycast_func) XMLGrammarDescription_dynamic_cast;
  
  
  // we create the global transcoder for UTF-8 to UTF-16
  // must initialize the Xerces-C transcoding service
  XMLPlatformUtils::Initialize();
  UTF8_TRANSCODER = Transcoder::getInstance();
  if (! UTF8_TRANSCODER) {
    croak("ERROR: XML::Xerces: INIT: Could not create UTF-8 transcoder");
  }
  
  XML_EXCEPTION_HANDLER = XMLExceptionHandler::getInstance();
  if (! XML_EXCEPTION_HANDLER) {
    croak("ERROR: XML::Xerces: INIT: Could not create XMLExceptionHandler");
  }
  
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUni, (void*) "XML::Xerces::XMLUni");
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaSymbols_XSD_EMPTYSET", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaSymbols::XSD_EMPTYSET)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaSymbols_XSD_SUBSTITUTION", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaSymbols::XSD_SUBSTITUTION)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaSymbols_XSD_EXTENSION", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaSymbols::XSD_EXTENSION)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaSymbols_XSD_RESTRICTION", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaSymbols::XSD_RESTRICTION)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaSymbols_XSD_LIST", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaSymbols::XSD_LIST)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaSymbols_XSD_UNION", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaSymbols::XSD_UNION)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaSymbols_XSD_ENUMERATION", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaSymbols::XSD_ENUMERATION)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaSymbols_XSD_CHOICE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaSymbols::XSD_CHOICE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaSymbols_XSD_SEQUENCE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaSymbols::XSD_SEQUENCE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaSymbols_XSD_ALL", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaSymbols::XSD_ALL)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaSymbols_XSD_UNBOUNDED", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaSymbols::XSD_UNBOUNDED)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaSymbols_XSD_NILLABLE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaSymbols::XSD_NILLABLE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaSymbols_XSD_ABSTRACT", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaSymbols::XSD_ABSTRACT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaSymbols_XSD_FIXED", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaSymbols::XSD_FIXED)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaSymbols, (void*) "XML::Xerces::SchemaSymbols");
  SWIG_TypeClientData(SWIGTYPE_p_PSVIUni, (void*) "XML::Xerces::PSVIUni");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDeleter, (void*) "XML::Xerces::XMLDeleter");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPlatformUtils, (void*) "XML::Xerces::XMLPlatformUtils");
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLURL_File", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLURL::File)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLURL_HTTP", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLURL::HTTP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLURL_FTP", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLURL::FTP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLURL_Protocols_Count", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLURL::Protocols_Count)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLURL_Unknown", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLURL::Unknown)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLURL, (void*) "XML::Xerces::XMLURL");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLUri, (void*) "XML::Xerces::XMLUri");
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_NoError", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::NoError)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_W_LowBounds", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::W_LowBounds)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Scan_CouldNotOpenSource_Warning", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Scan_CouldNotOpenSource_Warning)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_GC_ExistingGrammar", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::GC_ExistingGrammar)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_W_HighBounds", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::W_HighBounds)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_F_LowBounds", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::F_LowBounds)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Array_BadIndex", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Array_BadIndex)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Array_BadNewSize", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Array_BadNewSize)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_AttrList_BadIndex", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::AttrList_BadIndex)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_AttDef_BadAttType", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::AttDef_BadAttType)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_AttDef_BadDefAttType", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::AttDef_BadDefAttType)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Bitset_BadIndex", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Bitset_BadIndex)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Bitset_NotEqualSize", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Bitset_NotEqualSize)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_BufMgr_NoMoreBuffers", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::BufMgr_NoMoreBuffers)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_BufMgr_BufferNotInPool", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::BufMgr_BufferNotInPool)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_CPtr_PointerIsZero", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::CPtr_PointerIsZero)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_CM_BinOpHadUnaryType", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::CM_BinOpHadUnaryType)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_CM_MustBeMixedOrChildren", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::CM_MustBeMixedOrChildren)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_CM_NoPCDATAHere", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::CM_NoPCDATAHere)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_CM_NotValidForSpecType", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::CM_NotValidForSpecType)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_CM_UnaryOpHadBinType", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::CM_UnaryOpHadBinType)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_CM_UnknownCMType", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::CM_UnknownCMType)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_CM_UnknownCMSpecType", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::CM_UnknownCMSpecType)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_CM_NoParentCSN", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::CM_NoParentCSN)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_CM_NotValidSpecTypeForNode", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::CM_NotValidSpecTypeForNode)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DTD_UnknownCreateReason", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DTD_UnknownCreateReason)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_ElemStack_EmptyStack", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::ElemStack_EmptyStack)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_ElemStack_BadIndex", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::ElemStack_BadIndex)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_ElemStack_StackUnderflow", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::ElemStack_StackUnderflow)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_ElemStack_NoParentPushed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::ElemStack_NoParentPushed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Enum_NoMoreElements", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Enum_NoMoreElements)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_File_CouldNotOpenFile", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotOpenFile)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_File_CouldNotGetCurPos", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotGetCurPos)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_File_CouldNotCloseFile", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotCloseFile)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_File_CouldNotSeekToEnd", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotSeekToEnd)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_File_CouldNotSeekToPos", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotSeekToPos)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_File_CouldNotDupHandle", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotDupHandle)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_File_CouldNotReadFromFile", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotReadFromFile)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_File_CouldNotWriteToFile", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotWriteToFile)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_File_CouldNotResetFile", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotResetFile)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_File_CouldNotGetSize", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotGetSize)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_File_CouldNotGetBasePathName", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::File_CouldNotGetBasePathName)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_File_BasePathUnderflow", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::File_BasePathUnderflow)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Gen_ParseInProgress", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Gen_ParseInProgress)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Gen_NoDTDValidator", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Gen_NoDTDValidator)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Gen_CouldNotOpenDTD", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Gen_CouldNotOpenDTD)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Gen_CouldNotOpenExtEntity", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Gen_CouldNotOpenExtEntity)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Gen_UnexpectedEOF", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Gen_UnexpectedEOF)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_HshTbl_ZeroModulus", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::HshTbl_ZeroModulus)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_HshTbl_BadHashFromKey", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::HshTbl_BadHashFromKey)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_HshTbl_NoSuchKeyExists", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::HshTbl_NoSuchKeyExists)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Mutex_CouldNotCreate", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Mutex_CouldNotCreate)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Mutex_CouldNotClose", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Mutex_CouldNotClose)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Mutex_CouldNotLock", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Mutex_CouldNotLock)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Mutex_CouldNotUnlock", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Mutex_CouldNotUnlock)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Mutex_CouldNotDestroy", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Mutex_CouldNotDestroy)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_NetAcc_InternalError", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::NetAcc_InternalError)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_NetAcc_LengthError", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::NetAcc_LengthError)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_NetAcc_InitFailed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::NetAcc_InitFailed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_NetAcc_TargetResolution", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::NetAcc_TargetResolution)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_NetAcc_CreateSocket", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::NetAcc_CreateSocket)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_NetAcc_ConnSocket", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::NetAcc_ConnSocket)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_NetAcc_WriteSocket", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::NetAcc_WriteSocket)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_NetAcc_ReadSocket", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::NetAcc_ReadSocket)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_NetAcc_UnsupportedMethod", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::NetAcc_UnsupportedMethod)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Pool_ElemAlreadyExists", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Pool_ElemAlreadyExists)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Pool_BadHashFromKey", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Pool_BadHashFromKey)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Pool_InvalidId", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Pool_InvalidId)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Pool_ZeroModulus", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Pool_ZeroModulus)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_RdrMgr_ReaderIdNotFound", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::RdrMgr_ReaderIdNotFound)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Reader_BadAutoEncoding", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Reader_BadAutoEncoding)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Reader_CouldNotDecodeFirstLine", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Reader_CouldNotDecodeFirstLine)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Reader_NelLsepinDecl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Reader_NelLsepinDecl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Reader_EOIInMultiSeq", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Reader_EOIInMultiSeq)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Reader_SrcOfsNotSupported", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Reader_SrcOfsNotSupported)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Reader_EncodingStrRequired", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Reader_EncodingStrRequired)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Scan_CouldNotOpenSource", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Scan_CouldNotOpenSource)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Scan_UnbalancedStartEnd", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Scan_UnbalancedStartEnd)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Scan_BadPScanToken", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Scan_BadPScanToken)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Stack_BadIndex", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Stack_BadIndex)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Stack_EmptyStack", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Stack_EmptyStack)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Str_ZeroSizedTargetBuf", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Str_ZeroSizedTargetBuf)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Str_UnknownRadix", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Str_UnknownRadix)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Str_TargetBufTooSmall", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Str_TargetBufTooSmall)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Str_StartIndexPastEnd", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Str_StartIndexPastEnd)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Str_ConvertOverflow", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Str_ConvertOverflow)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Strm_StdErrWriteFailure", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Strm_StdErrWriteFailure)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Strm_StdOutWriteFailure", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Strm_StdOutWriteFailure)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Strm_ConWriteFailure", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Strm_ConWriteFailure)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_StrPool_IllegalId", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::StrPool_IllegalId)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Trans_CouldNotCreateDefCvtr", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Trans_CouldNotCreateDefCvtr)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Trans_InvalidSizeReq", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Trans_InvalidSizeReq)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Trans_Unrepresentable", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Trans_Unrepresentable)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Trans_NotValidForEncoding", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Trans_NotValidForEncoding)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Trans_BadBlockSize", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Trans_BadBlockSize)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Trans_BadSrcSeq", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Trans_BadSrcSeq)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Trans_BadSrcCP", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Trans_BadSrcCP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Trans_BadTrailingSurrogate", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Trans_BadTrailingSurrogate)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Trans_CantCreateCvtrFor", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Trans_CantCreateCvtrFor)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_URL_MalformedURL", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::URL_MalformedURL)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_URL_UnsupportedProto", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::URL_UnsupportedProto)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_URL_UnsupportedProto1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::URL_UnsupportedProto1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_URL_OnlyLocalHost", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::URL_OnlyLocalHost)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_URL_NoProtocolPresent", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::URL_NoProtocolPresent)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_URL_ExpectingTwoSlashes", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::URL_ExpectingTwoSlashes)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_URL_IncorrectEscapedCharRef", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::URL_IncorrectEscapedCharRef)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_URL_UnterminatedHostComponent", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::URL_UnterminatedHostComponent)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_URL_RelativeBaseURL", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::URL_RelativeBaseURL)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_URL_BaseUnderflow", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::URL_BaseUnderflow)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_URL_BadPortField", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::URL_BadPortField)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_UTF8_FormatError", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::UTF8_FormatError)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_UTF8_Invalid_2BytesSeq", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::UTF8_Invalid_2BytesSeq)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_UTF8_Invalid_3BytesSeq", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::UTF8_Invalid_3BytesSeq)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_UTF8_Irregular_3BytesSeq", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::UTF8_Irregular_3BytesSeq)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_UTF8_Invalid_4BytesSeq", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::UTF8_Invalid_4BytesSeq)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_UTF8_Exceede_BytesLimit", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::UTF8_Exceede_BytesLimit)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Vector_BadIndex", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Vector_BadIndex)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Val_InvalidElemId", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Val_InvalidElemId)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Val_CantHaveIntSS", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Val_CantHaveIntSS)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLRec_UnknownEncoding", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLRec_UnknownEncoding)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Parse1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Parse1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Parse2", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Parse2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Next1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Next1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Next2", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Next2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Next3", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Next3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Next4", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Next4)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Factor1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Factor1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Factor2", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Factor2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Factor3", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Factor3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Factor4", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Factor4)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Factor5", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Factor5)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Factor6", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Factor6)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Atom1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Atom1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Atom2", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Atom2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Atom3", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Atom3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Atom4", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Atom4)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Atom5", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Atom5)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_CC1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_CC1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_CC2", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_CC2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_CC3", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_CC3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_CC4", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_CC4)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_CC5", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_CC5)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_CC6", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_CC6)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Ope1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Ope1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Ope2", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Ope2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Ope3", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Ope3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Descape1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Descape1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Descape2", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Descape2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Descape3", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Descape3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Descape4", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Descape4)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Descape5", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Descape5)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Process1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Process1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Process2", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Process2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Quantifier1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Quantifier1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Quantifier2", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Quantifier2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Quantifier3", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Quantifier3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Quantifier4", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Quantifier4)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Parser_Quantifier5", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Parser_Quantifier5)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Gen_NoSchemaValidator", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Gen_NoSchemaValidator)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XUTIL_UnCopyableNodeType", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XUTIL_UnCopyableNodeType)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_SubGrpComparator_NGR", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::SubGrpComparator_NGR)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Invalid_Len", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_Len)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Invalid_maxLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_maxLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Invalid_minLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_minLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_NonNeg_Len", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_NonNeg_Len)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_NonNeg_maxLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_NonNeg_maxLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_NonNeg_minLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_NonNeg_minLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Len_maxLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Len_maxLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Len_minLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Len_minLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxLen_minLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxLen_minLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_bool_Pattern", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_bool_Pattern)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Invalid_Tag", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_Tag)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Len_baseLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Len_baseLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_minLen_baseminLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minLen_baseminLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_minLen_basemaxLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minLen_basemaxLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxLen_basemaxLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxLen_basemaxLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxLen_baseminLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxLen_baseminLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Len_baseMinLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Len_baseMinLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Len_baseMaxLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Len_baseMaxLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_minLen_baseLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minLen_baseLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxLen_baseLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxLen_baseLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_enum_base", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_enum_base)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Invalid_WS", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_WS)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_WS_collapse", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_WS_collapse)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_WS_replace", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_WS_replace)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Invalid_MaxIncl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_MaxIncl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Invalid_MaxExcl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_MaxExcl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Invalid_MinIncl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_MinIncl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Invalid_MinExcl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_MinExcl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Invalid_TotalDigit", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_TotalDigit)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Invalid_FractDigit", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Invalid_FractDigit)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_PosInt_TotalDigit", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_PosInt_TotalDigit)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_NonNeg_FractDigit", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_NonNeg_FractDigit)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_max_Incl_Excl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_max_Incl_Excl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_min_Incl_Excl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_min_Incl_Excl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxExcl_minExcl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxExcl_minExcl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxExcl_minIncl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxExcl_minIncl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxIncl_minExcl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxIncl_minExcl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxIncl_minIncl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxIncl_minIncl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_TotDigit_FractDigit", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_TotDigit_FractDigit)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxIncl_base_maxExcl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxIncl_base_maxExcl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxIncl_base_maxIncl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxIncl_base_maxIncl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxIncl_base_minIncl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxIncl_base_minIncl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxIncl_base_minExcl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxIncl_base_minExcl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxExcl_base_maxExcl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxExcl_base_maxExcl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxExcl_base_maxIncl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxExcl_base_maxIncl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxExcl_base_minIncl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxExcl_base_minIncl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxExcl_base_minExcl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxExcl_base_minExcl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_minExcl_base_maxExcl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minExcl_base_maxExcl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_minExcl_base_maxIncl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minExcl_base_maxIncl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_minExcl_base_minIncl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minExcl_base_minIncl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_minExcl_base_minExcl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minExcl_base_minExcl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_minIncl_base_maxExcl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minIncl_base_maxExcl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_minIncl_base_maxIncl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minIncl_base_maxIncl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_minIncl_base_minIncl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minIncl_base_minIncl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_minIncl_base_minExcl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minIncl_base_minExcl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxIncl_notFromBase", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxIncl_notFromBase)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxExcl_notFromBase", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxExcl_notFromBase)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_minIncl_notFromBase", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minIncl_notFromBase)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_minExcl_notFromBase", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minExcl_notFromBase)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_totalDigit_base_totalDigit", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_totalDigit_base_totalDigit)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_fractDigit_base_totalDigit", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_fractDigit_base_totalDigit)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_fractDigit_base_fractDigit", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_fractDigit_base_fractDigit)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxIncl_base_fixed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxIncl_base_fixed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxExcl_base_fixed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxExcl_base_fixed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_minIncl_base_fixed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minIncl_base_fixed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_minExcl_base_fixed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minExcl_base_fixed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_totalDigit_base_fixed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_totalDigit_base_fixed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_fractDigit_base_fixed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_fractDigit_base_fixed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_maxLen_base_fixed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_maxLen_base_fixed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_minLen_base_fixed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_minLen_base_fixed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_len_base_fixed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_len_base_fixed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_whitespace_base_fixed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_whitespace_base_fixed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_internalError_fixed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_internalError_fixed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_List_Null_baseValidator", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_List_Null_baseValidator)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Union_Null_memberTypeValidators", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Union_Null_memberTypeValidators)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Union_Null_baseValidator", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Union_Null_baseValidator)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_FACET_Union_invalid_baseValidatorType", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::FACET_Union_invalid_baseValidatorType)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_NotMatch_Pattern", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_NotMatch_Pattern)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_Not_Base64", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_Not_Base64)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_Not_HexBin", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_Not_HexBin)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_GT_maxLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_GT_maxLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_LT_minLen", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_LT_minLen)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_NE_Len", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_NE_Len)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_NotIn_Enumeration", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_NotIn_Enumeration)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_exceed_totalDigit", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_exceed_totalDigit)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_exceed_fractDigit", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_exceed_fractDigit)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_exceed_maxIncl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_exceed_maxIncl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_exceed_maxExcl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_exceed_maxExcl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_exceed_minIncl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_exceed_minIncl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_exceed_minExcl", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_exceed_minExcl)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_WS_replaced", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_WS_replaced)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_WS_collapsed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_WS_collapsed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_Invalid_NCName", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_Invalid_NCName)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_Invalid_Name", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_Invalid_Name)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_ID_Not_Unique", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_ID_Not_Unique)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_ENTITY_Invalid", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_ENTITY_Invalid)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_QName_Invalid", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_QName_Invalid)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_NOTATION_Invalid", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_NOTATION_Invalid)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_no_match_memberType", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_no_match_memberType)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_URI_Malformed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_URI_Malformed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_emptyString", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_emptyString)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_WSString", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_WSString)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_2ManyDecPoint", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_2ManyDecPoint)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_Inv_chars", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_Inv_chars)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_null_ptr", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_null_ptr)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_URI_Component_Empty", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_Component_Empty)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_URI_Component_for_GenURI_Only", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_Component_for_GenURI_Only)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_URI_Component_Invalid_EscapeSequence", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_Component_Invalid_EscapeSequence)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_URI_Component_Invalid_Char", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_Component_Invalid_Char)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_URI_Component_Set_Null", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_Component_Set_Null)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_URI_Component_Not_Conformant", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_Component_Not_Conformant)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_URI_No_Scheme", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_No_Scheme)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_URI_NullHost", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_NullHost)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_URI_NullPath", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_NullPath)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_URI_Component_inPath", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_Component_inPath)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_URI_PortNo_Invalid", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_URI_PortNo_Invalid)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_DBL_FLT_maxNeg", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_DBL_FLT_maxNeg)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_DBL_FLT_maxPos", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_DBL_FLT_maxPos)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_DBL_FLT_minNegPos", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_DBL_FLT_minNegPos)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_DBL_FLT_InvalidType", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_DBL_FLT_InvalidType)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XMLNUM_DBL_FLT_No_Exponent", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XMLNUM_DBL_FLT_No_Exponent)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Regex_Result_Not_Set", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Regex_Result_Not_Set)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Regex_CompactRangesError", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Regex_CompactRangesError)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Regex_MergeRangesTypeMismatch", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Regex_MergeRangesTypeMismatch)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Regex_SubtractRangesError", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Regex_SubtractRangesError)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Regex_IntersectRangesError", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Regex_IntersectRangesError)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Regex_ComplementRangesInvalidArg", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Regex_ComplementRangesInvalidArg)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Regex_InvalidCategoryName", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Regex_InvalidCategoryName)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Regex_KeywordNotFound", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Regex_KeywordNotFound)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Regex_BadRefNo", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Regex_BadRefNo)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Regex_UnknownOption", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Regex_UnknownOption)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Regex_UnknownTokenType", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Regex_UnknownTokenType)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Regex_RangeTokenGetError", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Regex_RangeTokenGetError)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Regex_NotSupported", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Regex_NotSupported)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Regex_InvalidChildIndex", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Regex_InvalidChildIndex)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Regex_RepPatMatchesZeroString", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Regex_RepPatMatchesZeroString)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Regex_InvalidRepPattern", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Regex_InvalidRepPattern)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_NEL_RepeatedCalls", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::NEL_RepeatedCalls)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_RethrowError", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::RethrowError)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_Out_Of_Memory", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::Out_Of_Memory)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DV_InvalidOperation", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DV_InvalidOperation)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_NoAttrSelector", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoAttrSelector)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_NoUnionAtStart", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoUnionAtStart)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_NoMultipleUnion", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoMultipleUnion)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_MissingAttr", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_MissingAttr)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_ExpectedToken1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_ExpectedToken1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_PrefixNoURI", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_PrefixNoURI)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_NoDoubleColon", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoDoubleColon)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_ExpectedStep1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_ExpectedStep1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_ExpectedStep2", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_ExpectedStep2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_ExpectedStep3", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_ExpectedStep3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_NoForwardSlash", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoForwardSlash)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_NoDoubleForwardSlash", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoDoubleForwardSlash)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_NoForwardSlashAtStart", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoForwardSlashAtStart)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_NoSelectionOfRoot", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoSelectionOfRoot)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_EmptyExpr", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_EmptyExpr)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_NoUnionAtEnd", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_NoUnionAtEnd)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_InvalidChar", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_InvalidChar)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_TokenNotSupported", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_TokenNotSupported)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XPath_FindSolution", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XPath_FindSolution)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_Assert_Buffer_Fail", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_Assert_Buffer_Fail)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_dt_missingT", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_dt_missingT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_gDay_invalid", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_gDay_invalid)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_gMth_invalid", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_gMth_invalid)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_gMthDay_invalid", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_gMthDay_invalid)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_dur_Start_dashP", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_dur_Start_dashP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_dur_noP", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_dur_noP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_dur_DashNotFirst", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_dur_DashNotFirst)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_dur_inv_b4T", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_dur_inv_b4T)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_dur_NoTimeAfterT", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_dur_NoTimeAfterT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_dur_NoElementAtAll", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_dur_NoElementAtAll)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_dur_inv_seconds", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_dur_inv_seconds)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_date_incomplete", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_date_incomplete)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_date_invalid", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_date_invalid)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_time_incomplete", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_time_incomplete)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_time_invalid", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_time_invalid)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_ms_noDigit", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_ms_noDigit)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_ym_incomplete", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_ym_incomplete)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_ym_invalid", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_ym_invalid)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_year_tooShort", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_year_tooShort)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_year_leadingZero", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_year_leadingZero)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_ym_noMonth", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_ym_noMonth)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_tz_noUTCsign", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_tz_noUTCsign)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_tz_stuffAfterZ", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_tz_stuffAfterZ)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_tz_invalid", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_tz_invalid)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_year_zero", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_year_zero)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_mth_invalid", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_mth_invalid)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_day_invalid", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_day_invalid)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_hour_invalid", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_hour_invalid)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_min_invalid", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_min_invalid)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_second_invalid", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_second_invalid)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_DateTime_tz_hh_invalid", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::DateTime_tz_hh_invalid)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_EmptyBase", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_EmptyBase)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_NSCompat1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_NSCompat1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_OccurRangeE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_OccurRangeE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_NameTypeOK1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_NameTypeOK1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_NameTypeOK2", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_NameTypeOK2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_NameTypeOK3", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_NameTypeOK3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_NameTypeOK4", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_NameTypeOK4)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_NameTypeOK5", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_NameTypeOK5)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_NameTypeOK6", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_NameTypeOK6)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_NameTypeOK7", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_NameTypeOK7)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_RecurseAsIfGroup", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_RecurseAsIfGroup)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_Recurse1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_Recurse1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_Recurse2", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_Recurse2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_ForbiddenRes1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_ForbiddenRes1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_ForbiddenRes2", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_ForbiddenRes2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_ForbiddenRes3", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_ForbiddenRes3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_ForbiddenRes4", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_ForbiddenRes4)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_NSSubset1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_NSSubset1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_NSSubset2", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_NSSubset2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_NSRecurseCheckCardinality1", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_NSRecurseCheckCardinality1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_RecurseUnordered", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_RecurseUnordered)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_MapAndSum", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_MapAndSum)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_PD_InvalidContentType", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::PD_InvalidContentType)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_NodeIDMap_GrowErr", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::NodeIDMap_GrowErr)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_ProtoType_Null_ClassName", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_ProtoType_Null_ClassName)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_ProtoType_NameLen_Dif", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_ProtoType_NameLen_Dif)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_ProtoType_Name_Dif", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_ProtoType_Name_Dif)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_InStream_Read_LT_Req", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_InStream_Read_LT_Req)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_InStream_Read_OverFlow", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_InStream_Read_OverFlow)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_Storing_Violation", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_Storing_Violation)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_StoreBuffer_Violation", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_StoreBuffer_Violation)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_LoadPool_UppBnd_Exceed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_LoadPool_UppBnd_Exceed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_LoadPool_NoTally_ObjCnt", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_LoadPool_NoTally_ObjCnt)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_Loading_Violation", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_Loading_Violation)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_LoadBuffer_Violation", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_LoadBuffer_Violation)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_Inv_ClassIndex", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_Inv_ClassIndex)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_Inv_FillBuffer_Size", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_Inv_FillBuffer_Size)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_Inv_checkFillBuffer_Size", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_Inv_checkFillBuffer_Size)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_Inv_checkFlushBuffer_Size", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_Inv_checkFlushBuffer_Size)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_Inv_Null_Pointer", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_Inv_Null_Pointer)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_Inv_Buffer_Len", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_Inv_Buffer_Len)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_CreateObject_Fail", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_CreateObject_Fail)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_ObjCount_UppBnd_Exceed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_ObjCount_UppBnd_Exceed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_GrammarPool_Locked", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_GrammarPool_Locked)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_GrammarPool_Empty", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_GrammarPool_Empty)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_GrammarPool_NotEmpty", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_GrammarPool_NotEmpty)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_StringPool_NotEmpty", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_StringPool_NotEmpty)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_XSer_Storer_NewerThan_Loader", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::XSer_Storer_NewerThan_Loader)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_VALUE_QName_Invalid2", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::VALUE_QName_Invalid2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_F_HighBounds", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::F_HighBounds)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_E_LowBounds", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::E_LowBounds)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLExcepts_E_HighBounds", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLExcepts::E_HighBounds)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLExcepts, (void*) "XML::Xerces::XMLExcepts");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLException, (void*) "XML::Xerces::XMLException");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__QName, (void*) "XML::Xerces::QName");
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SecurityManager_ENTITY_EXPANSION_LIMIT", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SecurityManager::ENTITY_EXPANSION_LIMIT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SecurityManager, (void*) "XML::Xerces::SecurityManager");
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLElementDecl_NoReason", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLElementDecl::NoReason)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLElementDecl_Declared", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLElementDecl::Declared)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLElementDecl_AttList", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLElementDecl::AttList)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLElementDecl_InContentModel", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLElementDecl::InContentModel)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLElementDecl_AsRootElem", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLElementDecl::AsRootElem)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLElementDecl_JustFaultIn", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLElementDecl::JustFaultIn)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLElementDecl_NoCharData", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLElementDecl::NoCharData)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLElementDecl_SpacesOk", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLElementDecl::SpacesOk)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLElementDecl_AllCharData", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLElementDecl::AllCharData)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLElementDecl_Schema", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLElementDecl::Schema)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLElementDecl_DTD", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLElementDecl::DTD)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLElementDecl_UnKnown", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLElementDecl::UnKnown)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLElementDecl, (void*) "XML::Xerces::XMLElementDecl");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityDecl, (void*) "XML::Xerces::XMLEntityDecl");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLNotationDecl, (void*) "XML::Xerces::XMLNotationDecl");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDefList, (void*) "XML::Xerces::XMLAttDefList");
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_CData", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::CData)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_ID", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::ID)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_IDRef", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::IDRef)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_IDRefs", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::IDRefs)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_Entity", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::Entity)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_Entities", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::Entities)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_NmToken", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::NmToken)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_NmTokens", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::NmTokens)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_Notation", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::Notation)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_Enumeration", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::Enumeration)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_Simple", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::Simple)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_Any_Any", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::Any_Any)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_Any_Other", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::Any_Other)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_Any_List", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::Any_List)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_AttTypes_Count", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes_Count)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_AttTypes_Min", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes_Min)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_AttTypes_Max", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes_Max)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_AttTypes_Unknown", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::AttTypes_Unknown)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_Default", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::Default)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_Fixed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::Fixed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_Required", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::Required)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_Required_And_Fixed", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::Required_And_Fixed)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_Implied", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::Implied)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_ProcessContents_Skip", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::ProcessContents_Skip)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_ProcessContents_Lax", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::ProcessContents_Lax)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_ProcessContents_Strict", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::ProcessContents_Strict)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_Prohibited", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::Prohibited)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_DefAttTypes_Count", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes_Count)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_DefAttTypes_Min", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes_Min)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_DefAttTypes_Max", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes_Max)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_DefAttTypes_Unknown", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::DefAttTypes_Unknown)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_NoReason", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::NoReason)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLAttDef_JustFaultIn", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLAttDef::JustFaultIn)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttDef, (void*) "XML::Xerces::XMLAttDef");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLValidator, (void*) "XML::Xerces::XMLValidator");
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Grammar_DTDGrammarType", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::Grammar::DTDGrammarType)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Grammar_SchemaGrammarType", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::Grammar::SchemaGrammarType)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Grammar_UnKnown", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::Grammar::UnKnown)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Grammar_UNKNOWN_SCOPE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::Grammar::UNKNOWN_SCOPE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "Grammar_TOP_LEVEL_SCOPE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::Grammar::TOP_LEVEL_SCOPE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__Grammar, (void*) "XML::Xerces::Grammar");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLGrammarDescription, (void*) "XML::Xerces::XMLGrammarDescription");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDTDDescription, (void*) "XML::Xerces::XMLDTDDescription");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTuint16_t_t, (void*) "XML::Xerces::BaseXMLChVector");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefArrayVectorOfTuint16_t_t, (void*) "XML::Xerces::XMLChVector");
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLSchemaDescription_CONTEXT_INCLUDE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLSchemaDescription::CONTEXT_INCLUDE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLSchemaDescription_CONTEXT_REDEFINE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLSchemaDescription::CONTEXT_REDEFINE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLSchemaDescription_CONTEXT_IMPORT", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLSchemaDescription::CONTEXT_IMPORT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLSchemaDescription_CONTEXT_PREPARSE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLSchemaDescription::CONTEXT_PREPARSE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLSchemaDescription_CONTEXT_INSTANCE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLSchemaDescription::CONTEXT_INSTANCE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLSchemaDescription_CONTEXT_ELEMENT", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLSchemaDescription::CONTEXT_ELEMENT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLSchemaDescription_CONTEXT_ATTRIBUTE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLSchemaDescription::CONTEXT_ATTRIBUTE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLSchemaDescription_CONTEXT_XSITYPE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLSchemaDescription::CONTEXT_XSITYPE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLSchemaDescription_CONTEXT_UNKNOWN", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLSchemaDescription::CONTEXT_UNKNOWN)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLSchemaDescription, (void*) "XML::Xerces::XMLSchemaDescription");
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DTDElementDecl_Empty", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::DTDElementDecl::Empty)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DTDElementDecl_Any", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::DTDElementDecl::Any)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DTDElementDecl_Mixed_Simple", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::DTDElementDecl::Mixed_Simple)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DTDElementDecl_Children", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::DTDElementDecl::Children)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DTDElementDecl_ModelTypes_Count", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::DTDElementDecl::ModelTypes_Count)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDElementDecl, (void*) "XML::Xerces::DTDElementDecl");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDElementDecl_t, (void*) "XML::Xerces::DTDElementDeclEnumerator");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDEntityDecl, (void*) "XML::Xerces::DTDEntityDecl");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__NameIdPoolEnumeratorTXERCES_CPP_NAMESPACE__DTDEntityDecl_t, (void*) "XML::Xerces::DTDEntityDeclEnumerator");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDefList, (void*) "XML::Xerces::DTDAttDefList");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDAttDef, (void*) "XML::Xerces::DTDAttDef");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDGrammar, (void*) "XML::Xerces::DTDGrammar");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DTDValidator, (void*) "XML::Xerces::DTDValidator");
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaElementDecl_Empty", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaElementDecl::Empty)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaElementDecl_Any", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaElementDecl::Any)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaElementDecl_Mixed_Simple", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaElementDecl::Mixed_Simple)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaElementDecl_Mixed_Complex", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaElementDecl::Mixed_Complex)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaElementDecl_Children", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaElementDecl::Children)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaElementDecl_Simple", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaElementDecl::Simple)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SchemaElementDecl_ModelTypes_Count", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::SchemaElementDecl::ModelTypes_Count)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaElementDecl, (void*) "XML::Xerces::SchemaElementDecl");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefHash3KeysIdPoolEnumeratorTXERCES_CPP_NAMESPACE__SchemaElementDecl_t, (void*) "XML::Xerces::SchemaElementDeclEnumerator");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaGrammar, (void*) "XML::Xerces::SchemaGrammar");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaValidator, (void*) "XML::Xerces::SchemaValidator");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDefList, (void*) "XML::Xerces::SchemaAttDefList");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SchemaAttDef, (void*) "XML::Xerces::SchemaAttDef");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXException, (void*) "XML::Xerces::SAXException");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotSupportedException, (void*) "XML::Xerces::SAXNotSupportedException");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXNotRecognizedException, (void*) "XML::Xerces::SAXNotRecognizedException");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__SAXParseException, (void*) "XML::Xerces::SAXParseException");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLPScanToken, (void*) "XML::Xerces::XMLPScanToken");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__BaseRefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, (void*) "XML::Xerces::BaseXMLAttrVector");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__RefVectorOfTXERCES_CPP_NAMESPACE__XMLAttr_t, (void*) "XML::Xerces::XMLAttrVector");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLAttr, (void*) "XML::Xerces::XMLAttr");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLDocumentHandler, (void*) "XML::Xerces::XMLDocumentHandler");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__EntityResolver, (void*) "XML::Xerces::EntityResolver");
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLResourceIdentifier_SchemaGrammar", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLResourceIdentifier::SchemaGrammar)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLResourceIdentifier_SchemaImport", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLResourceIdentifier::SchemaImport)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLResourceIdentifier_SchemaInclude", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLResourceIdentifier::SchemaInclude)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLResourceIdentifier_SchemaRedefine", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLResourceIdentifier::SchemaRedefine)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLResourceIdentifier_ExternalEntity", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLResourceIdentifier::ExternalEntity)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "XMLResourceIdentifier_UnKnown", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::XMLResourceIdentifier::UnKnown)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLResourceIdentifier, (void*) "XML::Xerces::XMLResourceIdentifier");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__XMLEntityResolver, (void*) "XML::Xerces::XMLEntityResolver");
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PSVIItem_VALIDITY_NOTKNOWN", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_NOTKNOWN)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PSVIItem_VALIDITY_INVALID", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_INVALID)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PSVIItem_VALIDITY_VALID", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::PSVIItem::VALIDITY_VALID)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PSVIItem_VALIDATION_NONE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::PSVIItem::VALIDATION_NONE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PSVIItem_VALIDATION_PARTIAL", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::PSVIItem::VALIDATION_PARTIAL)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PSVIItem_VALIDATION_FULL", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(XERCES_CPP_NAMESPACE::PSVIItem::VALIDATION_FULL)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIItem, (void*) "XML::Xerces::PSVIItem");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIElement, (void*) "XML::Xerces::PSVIElement");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttribute, (void*) "XML::Xerces::PSVIAttribute");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIAttributeList, (void*) "XML::Xerces::PSVIAttributeList");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__PSVIHandler, (void*) "XML::Xerces::PSVIHandler");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__ErrorHandler, (void*) "XML::Xerces::ErrorHandler");
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PERLCALLBACKHANDLER_BASE_TYPE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(-1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PERLCALLBACKHANDLER_ERROR_TYPE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(0)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PERLCALLBACKHANDLER_ENTITY_TYPE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PERLCALLBACKHANDLER_NODE_TYPE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(2)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PERLCALLBACKHANDLER_CONTENT_TYPE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PERLCALLBACKHANDLER_DOCUMENT_TYPE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(4)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PERLCALLBACKHANDLER_DOMERROR_TYPE", TRUE | 0x2);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(5)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlCallbackHandler, (void*) "XML::Xerces::PerlCallbackHandler");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlErrorCallbackHandler, (void*) "XML::Xerces::PerlErrorCallbackHandler");
  SWIG_TypeClientData(SWIGTYPE_p_XERCES_CPP_NAMESPACE__PerlEntityResolverHandler, (void*) "XML::Xerces::PerlEntityResolverHandler");
  ST(0) = &PL_sv_yes;
  XSRETURN(1);
}

